 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = SYN	SeqNum = 100	AckNum: 200	WindowSize = 2154	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = SYNACK	SeqNum = 200	AckNum: 115	WindowSize = 15	data: 
 Retransmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = SYNACK	SeqNum = 200	AckNum: 115	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 175	AckNum: 75	WindowSize = 5	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 190	AckNum: 90	WindowSize = 6	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 205	AckNum: 105	WindowSize = 7	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 220	AckNum: 120	WindowSize = 8	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 235	AckNum: 135	WindowSize = 9	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 250	AckNum: 150	WindowSize = 10	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 265	AckNum: 165	WindowSize = 11	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 280	AckNum: 180	WindowSize = 12	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 295	AckNum: 195	WindowSize = 13	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 310	AckNum: 210	WindowSize = 14	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 325	AckNum: 225	WindowSize = 15	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 75	AckNum: 400	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 90	AckNum: 415	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 105	AckNum: 430	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 120	AckNum: 445	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 135	AckNum: 460	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 150	AckNum: 475	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 165	AckNum: 490	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 180	AckNum: 505	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 195	AckNum: 520	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 210	AckNum: 535	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 225	AckNum: 550	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 115	AckNum: 15	WindowSize = 1	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 130	AckNum: 30	WindowSize = 2	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 145	AckNum: 45	WindowSize = 3	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 160	AckNum: 60	WindowSize = 4	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 340	AckNum: 240	WindowSize = 1	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 355	AckNum: 255	WindowSize = 2	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 370	AckNum: 270	WindowSize = 3	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 385	AckNum: 285	WindowSize = 4	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 400	AckNum: 300	WindowSize = 5	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 415	AckNum: 315	WindowSize = 6	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 430	AckNum: 330	WindowSize = 7	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 445	AckNum: 345	WindowSize = 8	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 460	AckNum: 360	WindowSize = 9	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 475	AckNum: 375	WindowSize = 10	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 490	AckNum: 390	WindowSize = 11	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 505	AckNum: 405	WindowSize = 12	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 520	AckNum: 420	WindowSize = 13	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 535	AckNum: 435	WindowSize = 14	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 550	AckNum: 450	WindowSize = 15	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 240	AckNum: 565	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 255	AckNum: 580	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 270	AckNum: 595	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 285	AckNum: 610	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 300	AckNum: 625	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 315	AckNum: 640	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 330	AckNum: 655	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 345	AckNum: 670	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 360	AckNum: 685	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 375	AckNum: 700	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 390	AckNum: 715	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 405	AckNum: 730	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 420	AckNum: 745	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 435	AckNum: 760	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 450	AckNum: 775	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 565	AckNum: 465	WindowSize = 1	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 580	AckNum: 480	WindowSize = 2	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 595	AckNum: 495	WindowSize = 3	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 610	AckNum: 510	WindowSize = 4	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 625	AckNum: 525	WindowSize = 5	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 640	AckNum: 540	WindowSize = 6	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 655	AckNum: 555	WindowSize = 7	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 670	AckNum: 570	WindowSize = 8	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 685	AckNum: 585	WindowSize = 9	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 700	AckNum: 600	WindowSize = 10	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 715	AckNum: 615	WindowSize = 11	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 730	AckNum: 630	WindowSize = 12	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 745	AckNum: 645	WindowSize = 13	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 760	AckNum: 660	WindowSize = 14	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 775	AckNum: 675	WindowSize = 15	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 465	AckNum: 790	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 480	AckNum: 805	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 495	AckNum: 820	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 510	AckNum: 835	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 525	AckNum: 850	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 540	AckNum: 865	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 555	AckNum: 880	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 570	AckNum: 895	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 585	AckNum: 910	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 600	AckNum: 925	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 615	AckNum: 940	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 630	AckNum: 955	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 645	AckNum: 970	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 660	AckNum: 985	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 675	AckNum: 1000	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 790	AckNum: 690	WindowSize = 1	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 805	AckNum: 705	WindowSize = 2	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 820	AckNum: 720	WindowSize = 3	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 835	AckNum: 735	WindowSize = 4	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 850	AckNum: 750	WindowSize = 5	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 865	AckNum: 765	WindowSize = 6	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 880	AckNum: 780	WindowSize = 7	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 895	AckNum: 795	WindowSize = 8	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 910	AckNum: 810	WindowSize = 9	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 925	AckNum: 825	WindowSize = 10	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 940	AckNum: 840	WindowSize = 11	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 955	AckNum: 855	WindowSize = 12	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 970	AckNum: 870	WindowSize = 13	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 985	AckNum: 885	WindowSize = 14	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1000	AckNum: 900	WindowSize = 15	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 690	AckNum: 1015	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 705	AckNum: 1030	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 720	AckNum: 1045	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 735	AckNum: 1060	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 750	AckNum: 1075	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 765	AckNum: 1090	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 780	AckNum: 1105	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 795	AckNum: 1120	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 810	AckNum: 1135	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 825	AckNum: 1150	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 840	AckNum: 1165	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 855	AckNum: 1180	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 870	AckNum: 1195	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 885	AckNum: 1210	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 900	AckNum: 1225	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 790	AckNum: 690	WindowSize = 1	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 805	AckNum: 705	WindowSize = 2	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 820	AckNum: 720	WindowSize = 3	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 835	AckNum: 735	WindowSize = 4	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1015	AckNum: 915	WindowSize = 1	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1030	AckNum: 930	WindowSize = 2	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1045	AckNum: 945	WindowSize = 3	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1060	AckNum: 960	WindowSize = 4	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1075	AckNum: 975	WindowSize = 5	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1090	AckNum: 990	WindowSize = 6	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1105	AckNum: 1005	WindowSize = 7	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1120	AckNum: 1020	WindowSize = 8	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1135	AckNum: 1035	WindowSize = 9	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1150	AckNum: 1050	WindowSize = 10	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1165	AckNum: 1065	WindowSize = 11	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1180	AckNum: 1080	WindowSize = 12	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1195	AckNum: 1095	WindowSize = 13	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1210	AckNum: 1110	WindowSize = 14	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1225	AckNum: 1125	WindowSize = 15	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 915	AckNum: 1240	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 930	AckNum: 1255	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 945	AckNum: 1270	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 960	AckNum: 1285	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 975	AckNum: 1300	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 990	AckNum: 1315	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1005	AckNum: 1330	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1020	AckNum: 1345	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1035	AckNum: 1360	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1050	AckNum: 1375	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1065	AckNum: 1390	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1080	AckNum: 1405	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1095	AckNum: 1420	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1110	AckNum: 1435	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1125	AckNum: 1450	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1015	AckNum: 915	WindowSize = 1	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1030	AckNum: 930	WindowSize = 2	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1045	AckNum: 945	WindowSize = 3	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1060	AckNum: 960	WindowSize = 4	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1075	AckNum: 975	WindowSize = 5	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1240	AckNum: 1140	WindowSize = 1	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1255	AckNum: 1155	WindowSize = 2	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1270	AckNum: 1170	WindowSize = 3	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1285	AckNum: 1185	WindowSize = 4	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1300	AckNum: 1200	WindowSize = 5	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1315	AckNum: 1215	WindowSize = 6	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1330	AckNum: 1230	WindowSize = 7	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1345	AckNum: 1245	WindowSize = 8	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1360	AckNum: 1260	WindowSize = 9	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1375	AckNum: 1275	WindowSize = 10	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1390	AckNum: 1290	WindowSize = 11	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1405	AckNum: 1305	WindowSize = 12	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1420	AckNum: 1320	WindowSize = 13	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1435	AckNum: 1335	WindowSize = 14	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1450	AckNum: 1350	WindowSize = 15	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1140	AckNum: 1465	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1155	AckNum: 1480	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1170	AckNum: 1495	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1185	AckNum: 1510	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1200	AckNum: 1525	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1215	AckNum: 1540	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1230	AckNum: 1555	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1245	AckNum: 1570	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1260	AckNum: 1585	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1275	AckNum: 1600	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1290	AckNum: 1615	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1305	AckNum: 1630	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1320	AckNum: 1645	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1335	AckNum: 1660	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1350	AckNum: 1675	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1240	AckNum: 1140	WindowSize = 1	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1255	AckNum: 1155	WindowSize = 2	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1270	AckNum: 1170	WindowSize = 3	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1465	AckNum: 1365	WindowSize = 1	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1480	AckNum: 1380	WindowSize = 2	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1495	AckNum: 1395	WindowSize = 3	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1510	AckNum: 1410	WindowSize = 4	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1525	AckNum: 1425	WindowSize = 5	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1540	AckNum: 1440	WindowSize = 6	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1555	AckNum: 1455	WindowSize = 7	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1570	AckNum: 1470	WindowSize = 8	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1585	AckNum: 1485	WindowSize = 9	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1600	AckNum: 1500	WindowSize = 10	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1615	AckNum: 1515	WindowSize = 11	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1630	AckNum: 1530	WindowSize = 12	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1645	AckNum: 1545	WindowSize = 13	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1660	AckNum: 1560	WindowSize = 14	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1675	AckNum: 1575	WindowSize = 15	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1365	AckNum: 1690	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1380	AckNum: 1705	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1395	AckNum: 1720	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1410	AckNum: 1735	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1425	AckNum: 1750	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1440	AckNum: 1765	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1455	AckNum: 1780	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1470	AckNum: 1795	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1485	AckNum: 1810	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1500	AckNum: 1825	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1515	AckNum: 1840	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1530	AckNum: 1855	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1545	AckNum: 1870	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1560	AckNum: 1885	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1575	AckNum: 1900	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1690	AckNum: 1590	WindowSize = 1	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1705	AckNum: 1605	WindowSize = 2	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1720	AckNum: 1620	WindowSize = 3	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1735	AckNum: 1635	WindowSize = 4	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1750	AckNum: 1650	WindowSize = 5	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1765	AckNum: 1665	WindowSize = 6	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1780	AckNum: 1680	WindowSize = 7	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1795	AckNum: 1695	WindowSize = 8	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1810	AckNum: 1710	WindowSize = 9	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1825	AckNum: 1725	WindowSize = 10	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1840	AckNum: 1740	WindowSize = 11	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1855	AckNum: 1755	WindowSize = 12	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1870	AckNum: 1770	WindowSize = 13	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1885	AckNum: 1785	WindowSize = 14	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1900	AckNum: 1800	WindowSize = 15	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1590	AckNum: 1915	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1605	AckNum: 1930	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1620	AckNum: 1945	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1635	AckNum: 1960	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1650	AckNum: 1975	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1665	AckNum: 1990	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1680	AckNum: 2005	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1695	AckNum: 2020	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1710	AckNum: 2035	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1725	AckNum: 2050	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1740	AckNum: 2065	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1755	AckNum: 2080	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1770	AckNum: 2095	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1785	AckNum: 2110	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1800	AckNum: 2125	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1915	AckNum: 1815	WindowSize = 1	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1930	AckNum: 1830	WindowSize = 2	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1945	AckNum: 1845	WindowSize = 3	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1960	AckNum: 1860	WindowSize = 4	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1975	AckNum: 1875	WindowSize = 5	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1990	AckNum: 1890	WindowSize = 6	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2005	AckNum: 1905	WindowSize = 7	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2020	AckNum: 1920	WindowSize = 8	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2035	AckNum: 1935	WindowSize = 9	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2050	AckNum: 1950	WindowSize = 10	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2065	AckNum: 1965	WindowSize = 11	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2080	AckNum: 1980	WindowSize = 12	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2095	AckNum: 1995	WindowSize = 13	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2110	AckNum: 2010	WindowSize = 14	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2125	AckNum: 2025	WindowSize = 15	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1815	AckNum: 2140	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1830	AckNum: 2155	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1845	AckNum: 2170	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1860	AckNum: 2185	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1875	AckNum: 2200	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1890	AckNum: 2215	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1905	AckNum: 2230	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1920	AckNum: 2245	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1935	AckNum: 2260	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1950	AckNum: 2275	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1965	AckNum: 2290	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1980	AckNum: 2305	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 1995	AckNum: 2320	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2010	AckNum: 2335	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2025	AckNum: 2350	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2140	AckNum: 2040	WindowSize = 1	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2155	AckNum: 2055	WindowSize = 2	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2170	AckNum: 2070	WindowSize = 3	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2185	AckNum: 2085	WindowSize = 4	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2200	AckNum: 2100	WindowSize = 5	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2215	AckNum: 2115	WindowSize = 6	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2230	AckNum: 2130	WindowSize = 7	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2245	AckNum: 2145	WindowSize = 8	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2260	AckNum: 2160	WindowSize = 9	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2275	AckNum: 2175	WindowSize = 10	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2290	AckNum: 2190	WindowSize = 11	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2305	AckNum: 2205	WindowSize = 12	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2320	AckNum: 2220	WindowSize = 13	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2335	AckNum: 2235	WindowSize = 14	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2350	AckNum: 2250	WindowSize = 15	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2040	AckNum: 2365	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2055	AckNum: 2380	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2070	AckNum: 2395	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2085	AckNum: 2410	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2100	AckNum: 2425	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2115	AckNum: 2440	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2130	AckNum: 2455	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2145	AckNum: 2470	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2160	AckNum: 2485	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2175	AckNum: 2500	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2190	AckNum: 2515	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2205	AckNum: 2530	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2220	AckNum: 2545	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2235	AckNum: 2560	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2250	AckNum: 2575	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2365	AckNum: 2265	WindowSize = 1	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2380	AckNum: 2280	WindowSize = 2	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2395	AckNum: 2295	WindowSize = 3	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2410	AckNum: 2310	WindowSize = 4	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2425	AckNum: 2325	WindowSize = 5	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2440	AckNum: 2340	WindowSize = 6	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2455	AckNum: 2355	WindowSize = 7	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2470	AckNum: 2370	WindowSize = 8	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2485	AckNum: 2385	WindowSize = 9	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2500	AckNum: 2400	WindowSize = 10	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2515	AckNum: 2415	WindowSize = 11	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2530	AckNum: 2430	WindowSize = 12	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2545	AckNum: 2445	WindowSize = 13	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2560	AckNum: 2460	WindowSize = 14	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2575	AckNum: 2475	WindowSize = 15	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2265	AckNum: 2590	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2280	AckNum: 2605	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2295	AckNum: 2620	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2310	AckNum: 2635	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2325	AckNum: 2650	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2340	AckNum: 2665	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2355	AckNum: 2680	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2370	AckNum: 2695	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2385	AckNum: 2710	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2400	AckNum: 2725	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2415	AckNum: 2740	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2430	AckNum: 2755	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2445	AckNum: 2770	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2460	AckNum: 2785	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2475	AckNum: 2800	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2365	AckNum: 2265	WindowSize = 1	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2380	AckNum: 2280	WindowSize = 2	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2395	AckNum: 2295	WindowSize = 3	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2410	AckNum: 2310	WindowSize = 4	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2425	AckNum: 2325	WindowSize = 5	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2440	AckNum: 2340	WindowSize = 6	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2455	AckNum: 2355	WindowSize = 7	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2590	AckNum: 2490	WindowSize = 1	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2605	AckNum: 2505	WindowSize = 2	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2620	AckNum: 2520	WindowSize = 3	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2635	AckNum: 2535	WindowSize = 4	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2650	AckNum: 2550	WindowSize = 5	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2665	AckNum: 2565	WindowSize = 6	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2680	AckNum: 2580	WindowSize = 7	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2695	AckNum: 2595	WindowSize = 8	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2710	AckNum: 2610	WindowSize = 9	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2725	AckNum: 2625	WindowSize = 10	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2740	AckNum: 2640	WindowSize = 11	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2755	AckNum: 2655	WindowSize = 12	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2770	AckNum: 2670	WindowSize = 13	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2785	AckNum: 2685	WindowSize = 14	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2800	AckNum: 2700	WindowSize = 15	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2490	AckNum: 2815	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2505	AckNum: 2830	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2520	AckNum: 2845	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2535	AckNum: 2860	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2550	AckNum: 2875	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2565	AckNum: 2890	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2580	AckNum: 2905	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2595	AckNum: 2920	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2610	AckNum: 2935	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2625	AckNum: 2950	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2640	AckNum: 2965	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2655	AckNum: 2980	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2670	AckNum: 2995	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2685	AckNum: 3010	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2700	AckNum: 3025	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2590	AckNum: 2490	WindowSize = 1	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2605	AckNum: 2505	WindowSize = 2	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2620	AckNum: 2520	WindowSize = 3	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2635	AckNum: 2535	WindowSize = 4	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2815	AckNum: 2715	WindowSize = 1	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2830	AckNum: 2730	WindowSize = 2	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2845	AckNum: 2745	WindowSize = 3	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2860	AckNum: 2760	WindowSize = 4	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2875	AckNum: 2775	WindowSize = 5	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2890	AckNum: 2790	WindowSize = 6	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2905	AckNum: 2805	WindowSize = 7	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2920	AckNum: 2820	WindowSize = 8	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2935	AckNum: 2835	WindowSize = 9	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2950	AckNum: 2850	WindowSize = 10	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2965	AckNum: 2865	WindowSize = 11	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2980	AckNum: 2880	WindowSize = 12	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2995	AckNum: 2895	WindowSize = 13	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3010	AckNum: 2910	WindowSize = 14	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3025	AckNum: 2925	WindowSize = 15	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2715	AckNum: 3040	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2730	AckNum: 3055	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2745	AckNum: 3070	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2760	AckNum: 3085	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2775	AckNum: 3100	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2790	AckNum: 3115	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2805	AckNum: 3130	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2820	AckNum: 3145	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2835	AckNum: 3160	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2850	AckNum: 3175	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2865	AckNum: 3190	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2880	AckNum: 3205	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2895	AckNum: 3220	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2910	AckNum: 3235	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2925	AckNum: 3250	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2815	AckNum: 2715	WindowSize = 1	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2830	AckNum: 2730	WindowSize = 2	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3040	AckNum: 2940	WindowSize = 1	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3055	AckNum: 2955	WindowSize = 2	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3070	AckNum: 2970	WindowSize = 3	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3085	AckNum: 2985	WindowSize = 4	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3100	AckNum: 3000	WindowSize = 5	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3115	AckNum: 3015	WindowSize = 6	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3130	AckNum: 3030	WindowSize = 7	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3145	AckNum: 3045	WindowSize = 8	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3160	AckNum: 3060	WindowSize = 9	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3175	AckNum: 3075	WindowSize = 10	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3190	AckNum: 3090	WindowSize = 11	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3205	AckNum: 3105	WindowSize = 12	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3220	AckNum: 3120	WindowSize = 13	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3235	AckNum: 3135	WindowSize = 14	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3250	AckNum: 3150	WindowSize = 15	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2940	AckNum: 3265	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2955	AckNum: 3280	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2970	AckNum: 3295	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 2985	AckNum: 3310	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3000	AckNum: 3325	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3015	AckNum: 3340	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3030	AckNum: 3355	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3045	AckNum: 3370	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3060	AckNum: 3385	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3075	AckNum: 3400	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3090	AckNum: 3415	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3105	AckNum: 3430	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3120	AckNum: 3445	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3135	AckNum: 3460	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3150	AckNum: 3475	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3040	AckNum: 2940	WindowSize = 1	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3265	AckNum: 3165	WindowSize = 1	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3280	AckNum: 3180	WindowSize = 2	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3295	AckNum: 3195	WindowSize = 3	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3310	AckNum: 3210	WindowSize = 4	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3325	AckNum: 3225	WindowSize = 5	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3340	AckNum: 3240	WindowSize = 6	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3355	AckNum: 3255	WindowSize = 7	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3370	AckNum: 3270	WindowSize = 8	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3385	AckNum: 3285	WindowSize = 9	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3400	AckNum: 3300	WindowSize = 10	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3415	AckNum: 3315	WindowSize = 11	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3430	AckNum: 3330	WindowSize = 12	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3445	AckNum: 3345	WindowSize = 13	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3460	AckNum: 3360	WindowSize = 14	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3475	AckNum: 3375	WindowSize = 15	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3165	AckNum: 3490	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3180	AckNum: 3505	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3195	AckNum: 3520	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3210	AckNum: 3535	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3225	AckNum: 3550	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3240	AckNum: 3565	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3255	AckNum: 3580	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3270	AckNum: 3595	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3285	AckNum: 3610	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3300	AckNum: 3625	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3315	AckNum: 3640	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3330	AckNum: 3655	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3345	AckNum: 3670	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3360	AckNum: 3685	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3375	AckNum: 3700	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3265	AckNum: 3165	WindowSize = 1	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3280	AckNum: 3180	WindowSize = 2	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3490	AckNum: 3390	WindowSize = 1	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3505	AckNum: 3405	WindowSize = 2	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3520	AckNum: 3420	WindowSize = 3	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3535	AckNum: 3435	WindowSize = 4	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3550	AckNum: 3450	WindowSize = 5	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3565	AckNum: 3465	WindowSize = 6	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3580	AckNum: 3480	WindowSize = 7	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3595	AckNum: 3495	WindowSize = 8	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3610	AckNum: 3510	WindowSize = 9	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3625	AckNum: 3525	WindowSize = 10	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3640	AckNum: 3540	WindowSize = 11	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3655	AckNum: 3555	WindowSize = 12	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3670	AckNum: 3570	WindowSize = 13	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3685	AckNum: 3585	WindowSize = 14	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3700	AckNum: 3600	WindowSize = 15	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3390	AckNum: 3715	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3405	AckNum: 3730	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3420	AckNum: 3745	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3435	AckNum: 3760	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3450	AckNum: 3775	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3465	AckNum: 3790	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3480	AckNum: 3805	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3495	AckNum: 3820	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3510	AckNum: 3835	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3525	AckNum: 3850	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3540	AckNum: 3865	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3555	AckNum: 3880	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3570	AckNum: 3895	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3585	AckNum: 3910	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3600	AckNum: 3925	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3715	AckNum: 3615	WindowSize = 1	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3730	AckNum: 3630	WindowSize = 2	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3745	AckNum: 3645	WindowSize = 3	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3760	AckNum: 3660	WindowSize = 4	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3775	AckNum: 3675	WindowSize = 5	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3790	AckNum: 3690	WindowSize = 6	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3805	AckNum: 3705	WindowSize = 7	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3820	AckNum: 3720	WindowSize = 8	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3835	AckNum: 3735	WindowSize = 9	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3850	AckNum: 3750	WindowSize = 10	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3865	AckNum: 3765	WindowSize = 11	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3880	AckNum: 3780	WindowSize = 12	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3895	AckNum: 3795	WindowSize = 13	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3910	AckNum: 3810	WindowSize = 14	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3925	AckNum: 3825	WindowSize = 15	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3615	AckNum: 3940	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3630	AckNum: 3955	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3645	AckNum: 3970	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3660	AckNum: 3985	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3675	AckNum: 4000	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3690	AckNum: 4015	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3705	AckNum: 4030	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3720	AckNum: 4045	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3735	AckNum: 4060	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3750	AckNum: 4075	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3765	AckNum: 4090	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3780	AckNum: 4105	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3795	AckNum: 4120	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3810	AckNum: 4135	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3825	AckNum: 4150	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3715	AckNum: 3615	WindowSize = 1	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3940	AckNum: 3840	WindowSize = 1	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3955	AckNum: 3855	WindowSize = 2	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3970	AckNum: 3870	WindowSize = 3	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3985	AckNum: 3885	WindowSize = 4	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4000	AckNum: 3900	WindowSize = 5	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4015	AckNum: 3915	WindowSize = 6	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4030	AckNum: 3930	WindowSize = 7	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4045	AckNum: 3945	WindowSize = 8	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4060	AckNum: 3960	WindowSize = 9	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4075	AckNum: 3975	WindowSize = 10	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4090	AckNum: 3990	WindowSize = 11	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4105	AckNum: 4005	WindowSize = 12	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4120	AckNum: 4020	WindowSize = 13	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4135	AckNum: 4035	WindowSize = 14	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4150	AckNum: 4050	WindowSize = 15	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3840	AckNum: 4165	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3855	AckNum: 4180	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3870	AckNum: 4195	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3885	AckNum: 4210	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3900	AckNum: 4225	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3915	AckNum: 4240	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3930	AckNum: 4255	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3945	AckNum: 4270	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3960	AckNum: 4285	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3975	AckNum: 4300	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 3990	AckNum: 4315	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4005	AckNum: 4330	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4020	AckNum: 4345	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4035	AckNum: 4360	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4050	AckNum: 4375	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3940	AckNum: 3840	WindowSize = 1	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3955	AckNum: 3855	WindowSize = 2	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3970	AckNum: 3870	WindowSize = 3	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4165	AckNum: 4065	WindowSize = 1	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4180	AckNum: 4080	WindowSize = 2	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4195	AckNum: 4095	WindowSize = 3	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4210	AckNum: 4110	WindowSize = 4	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4225	AckNum: 4125	WindowSize = 5	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4240	AckNum: 4140	WindowSize = 6	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4255	AckNum: 4155	WindowSize = 7	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4270	AckNum: 4170	WindowSize = 8	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4285	AckNum: 4185	WindowSize = 9	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4300	AckNum: 4200	WindowSize = 10	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4315	AckNum: 4215	WindowSize = 11	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4330	AckNum: 4230	WindowSize = 12	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4345	AckNum: 4245	WindowSize = 13	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4360	AckNum: 4260	WindowSize = 14	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4375	AckNum: 4275	WindowSize = 15	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4065	AckNum: 4390	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4080	AckNum: 4405	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4095	AckNum: 4420	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4110	AckNum: 4435	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4125	AckNum: 4450	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4140	AckNum: 4465	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4155	AckNum: 4480	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4170	AckNum: 4495	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4185	AckNum: 4510	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4200	AckNum: 4525	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4215	AckNum: 4540	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4230	AckNum: 4555	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4245	AckNum: 4570	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4260	AckNum: 4585	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4275	AckNum: 4600	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4390	AckNum: 4290	WindowSize = 1	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4405	AckNum: 4305	WindowSize = 2	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4420	AckNum: 4320	WindowSize = 3	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4435	AckNum: 4335	WindowSize = 4	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4450	AckNum: 4350	WindowSize = 5	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4465	AckNum: 4365	WindowSize = 6	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4480	AckNum: 4380	WindowSize = 7	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4495	AckNum: 4395	WindowSize = 8	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4510	AckNum: 4410	WindowSize = 9	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4525	AckNum: 4425	WindowSize = 10	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4540	AckNum: 4440	WindowSize = 11	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4555	AckNum: 4455	WindowSize = 12	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4570	AckNum: 4470	WindowSize = 13	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4585	AckNum: 4485	WindowSize = 14	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4600	AckNum: 4500	WindowSize = 15	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4290	AckNum: 4615	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4305	AckNum: 4630	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4320	AckNum: 4645	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4335	AckNum: 4660	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4350	AckNum: 4675	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4365	AckNum: 4690	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4380	AckNum: 4705	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4395	AckNum: 4720	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4410	AckNum: 4735	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4425	AckNum: 4750	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4440	AckNum: 4765	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4455	AckNum: 4780	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4470	AckNum: 4795	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4485	AckNum: 4810	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4500	AckNum: 4825	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4390	AckNum: 4290	WindowSize = 1	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4615	AckNum: 4515	WindowSize = 1	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4630	AckNum: 4530	WindowSize = 2	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4645	AckNum: 4545	WindowSize = 3	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4660	AckNum: 4560	WindowSize = 4	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4675	AckNum: 4575	WindowSize = 5	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4690	AckNum: 4590	WindowSize = 6	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4705	AckNum: 4605	WindowSize = 7	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4720	AckNum: 4620	WindowSize = 8	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4735	AckNum: 4635	WindowSize = 9	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4750	AckNum: 4650	WindowSize = 10	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4765	AckNum: 4665	WindowSize = 11	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4780	AckNum: 4680	WindowSize = 12	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4795	AckNum: 4695	WindowSize = 13	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4810	AckNum: 4710	WindowSize = 14	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4825	AckNum: 4725	WindowSize = 15	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4515	AckNum: 4840	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4530	AckNum: 4855	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4545	AckNum: 4870	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4560	AckNum: 4885	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4575	AckNum: 4900	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4590	AckNum: 4915	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4605	AckNum: 4930	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4620	AckNum: 4945	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4635	AckNum: 4960	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4650	AckNum: 4975	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4665	AckNum: 4990	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4680	AckNum: 5005	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4695	AckNum: 5020	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4710	AckNum: 5035	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4725	AckNum: 5050	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4840	AckNum: 4740	WindowSize = 1	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4855	AckNum: 4755	WindowSize = 2	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4870	AckNum: 4770	WindowSize = 3	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4885	AckNum: 4785	WindowSize = 4	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4900	AckNum: 4800	WindowSize = 5	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4915	AckNum: 4815	WindowSize = 6	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4930	AckNum: 4830	WindowSize = 7	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4945	AckNum: 4845	WindowSize = 8	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4960	AckNum: 4860	WindowSize = 9	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4975	AckNum: 4875	WindowSize = 10	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4990	AckNum: 4890	WindowSize = 11	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5005	AckNum: 4905	WindowSize = 12	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5020	AckNum: 4920	WindowSize = 13	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5035	AckNum: 4935	WindowSize = 14	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5050	AckNum: 4950	WindowSize = 15	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4740	AckNum: 5065	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4755	AckNum: 5080	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4770	AckNum: 5095	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4785	AckNum: 5110	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4800	AckNum: 5125	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4815	AckNum: 5140	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4830	AckNum: 5155	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4845	AckNum: 5170	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4860	AckNum: 5185	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4875	AckNum: 5200	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4890	AckNum: 5215	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4905	AckNum: 5230	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4920	AckNum: 5245	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4935	AckNum: 5260	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4950	AckNum: 5275	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4840	AckNum: 4740	WindowSize = 1	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4855	AckNum: 4755	WindowSize = 2	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4870	AckNum: 4770	WindowSize = 3	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4885	AckNum: 4785	WindowSize = 4	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5065	AckNum: 4965	WindowSize = 1	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5080	AckNum: 4980	WindowSize = 2	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5095	AckNum: 4995	WindowSize = 3	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5110	AckNum: 5010	WindowSize = 4	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5125	AckNum: 5025	WindowSize = 5	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5140	AckNum: 5040	WindowSize = 6	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5155	AckNum: 5055	WindowSize = 7	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5170	AckNum: 5070	WindowSize = 8	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5185	AckNum: 5085	WindowSize = 9	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5200	AckNum: 5100	WindowSize = 10	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5215	AckNum: 5115	WindowSize = 11	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5230	AckNum: 5130	WindowSize = 12	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5245	AckNum: 5145	WindowSize = 13	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5260	AckNum: 5160	WindowSize = 14	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5275	AckNum: 5175	WindowSize = 15	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4965	AckNum: 5290	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4980	AckNum: 5305	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 4995	AckNum: 5320	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5010	AckNum: 5335	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5025	AckNum: 5350	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5040	AckNum: 5365	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5055	AckNum: 5380	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5070	AckNum: 5395	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5085	AckNum: 5410	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5100	AckNum: 5425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5115	AckNum: 5440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5130	AckNum: 5455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5145	AckNum: 5470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5160	AckNum: 5485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5175	AckNum: 5500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5290	AckNum: 5190	WindowSize = 1	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5305	AckNum: 5205	WindowSize = 2	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5320	AckNum: 5220	WindowSize = 3	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5335	AckNum: 5235	WindowSize = 4	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5350	AckNum: 5250	WindowSize = 5	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5365	AckNum: 5265	WindowSize = 6	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5380	AckNum: 5280	WindowSize = 7	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5395	AckNum: 5295	WindowSize = 8	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5410	AckNum: 5310	WindowSize = 9	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5425	AckNum: 5325	WindowSize = 10	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5440	AckNum: 5340	WindowSize = 11	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5455	AckNum: 5355	WindowSize = 12	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5470	AckNum: 5370	WindowSize = 13	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5485	AckNum: 5385	WindowSize = 14	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5500	AckNum: 5400	WindowSize = 15	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5190	AckNum: 5515	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5205	AckNum: 5530	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5220	AckNum: 5545	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5235	AckNum: 5560	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5250	AckNum: 5575	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5265	AckNum: 5590	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5280	AckNum: 5605	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5295	AckNum: 5620	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5310	AckNum: 5635	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5325	AckNum: 5650	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5340	AckNum: 5665	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5355	AckNum: 5680	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5370	AckNum: 5695	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5385	AckNum: 5710	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5400	AckNum: 5725	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5290	AckNum: 5190	WindowSize = 1	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5305	AckNum: 5205	WindowSize = 2	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5515	AckNum: 5415	WindowSize = 1	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5530	AckNum: 5430	WindowSize = 2	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5545	AckNum: 5445	WindowSize = 3	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5560	AckNum: 5460	WindowSize = 4	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5575	AckNum: 5475	WindowSize = 5	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5590	AckNum: 5490	WindowSize = 6	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5605	AckNum: 5505	WindowSize = 7	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5620	AckNum: 5520	WindowSize = 8	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5635	AckNum: 5535	WindowSize = 9	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5650	AckNum: 5550	WindowSize = 10	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5665	AckNum: 5565	WindowSize = 11	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5680	AckNum: 5580	WindowSize = 12	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5695	AckNum: 5595	WindowSize = 13	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5710	AckNum: 5610	WindowSize = 14	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5725	AckNum: 5625	WindowSize = 15	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5415	AckNum: 5740	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5430	AckNum: 5755	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5445	AckNum: 5770	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5460	AckNum: 5785	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5475	AckNum: 5800	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5490	AckNum: 5815	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5505	AckNum: 5830	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5520	AckNum: 5845	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5535	AckNum: 5860	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5550	AckNum: 5875	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5565	AckNum: 5890	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5580	AckNum: 5905	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5595	AckNum: 5920	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5610	AckNum: 5935	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5625	AckNum: 5950	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5515	AckNum: 5415	WindowSize = 1	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5740	AckNum: 5640	WindowSize = 1	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5755	AckNum: 5655	WindowSize = 2	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5770	AckNum: 5670	WindowSize = 3	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5785	AckNum: 5685	WindowSize = 4	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5800	AckNum: 5700	WindowSize = 5	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5815	AckNum: 5715	WindowSize = 6	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5830	AckNum: 5730	WindowSize = 7	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5845	AckNum: 5745	WindowSize = 8	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5860	AckNum: 5760	WindowSize = 9	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5875	AckNum: 5775	WindowSize = 10	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5890	AckNum: 5790	WindowSize = 11	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5905	AckNum: 5805	WindowSize = 12	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5920	AckNum: 5820	WindowSize = 13	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5935	AckNum: 5835	WindowSize = 14	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5950	AckNum: 5850	WindowSize = 15	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5640	AckNum: 5965	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5655	AckNum: 5980	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5670	AckNum: 5995	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5685	AckNum: 6010	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5700	AckNum: 6025	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5715	AckNum: 6040	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5730	AckNum: 6055	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5745	AckNum: 6070	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5760	AckNum: 6085	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5775	AckNum: 6100	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5790	AckNum: 6115	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5805	AckNum: 6130	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5820	AckNum: 6145	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5835	AckNum: 6160	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5850	AckNum: 6175	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5740	AckNum: 5640	WindowSize = 1	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5755	AckNum: 5655	WindowSize = 2	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5770	AckNum: 5670	WindowSize = 3	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5965	AckNum: 5865	WindowSize = 1	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5980	AckNum: 5880	WindowSize = 2	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5995	AckNum: 5895	WindowSize = 3	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6010	AckNum: 5910	WindowSize = 4	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6025	AckNum: 5925	WindowSize = 5	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6040	AckNum: 5940	WindowSize = 6	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6055	AckNum: 5955	WindowSize = 7	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6070	AckNum: 5970	WindowSize = 8	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6085	AckNum: 5985	WindowSize = 9	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6100	AckNum: 6000	WindowSize = 10	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6115	AckNum: 6015	WindowSize = 11	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6130	AckNum: 6030	WindowSize = 12	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6145	AckNum: 6045	WindowSize = 13	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6160	AckNum: 6060	WindowSize = 14	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6175	AckNum: 6075	WindowSize = 15	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5865	AckNum: 6190	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5880	AckNum: 6205	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5895	AckNum: 6220	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5910	AckNum: 6235	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5925	AckNum: 6250	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5940	AckNum: 6265	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5955	AckNum: 6280	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5970	AckNum: 6295	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 5985	AckNum: 6310	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6000	AckNum: 6325	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6015	AckNum: 6340	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6030	AckNum: 6355	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6045	AckNum: 6370	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6060	AckNum: 6385	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6075	AckNum: 6400	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6190	AckNum: 6090	WindowSize = 1	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6205	AckNum: 6105	WindowSize = 2	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6220	AckNum: 6120	WindowSize = 3	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6235	AckNum: 6135	WindowSize = 4	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6250	AckNum: 6150	WindowSize = 5	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6265	AckNum: 6165	WindowSize = 6	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6280	AckNum: 6180	WindowSize = 7	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6295	AckNum: 6195	WindowSize = 8	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6310	AckNum: 6210	WindowSize = 9	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6325	AckNum: 6225	WindowSize = 10	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6340	AckNum: 6240	WindowSize = 11	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6355	AckNum: 6255	WindowSize = 12	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6370	AckNum: 6270	WindowSize = 13	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6385	AckNum: 6285	WindowSize = 14	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6400	AckNum: 6300	WindowSize = 15	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6090	AckNum: 6415	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6105	AckNum: 6430	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6120	AckNum: 6445	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6135	AckNum: 6460	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6150	AckNum: 6475	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6165	AckNum: 6490	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6180	AckNum: 6505	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6195	AckNum: 6520	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6210	AckNum: 6535	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6225	AckNum: 6550	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6240	AckNum: 6565	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6255	AckNum: 6580	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6270	AckNum: 6595	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6285	AckNum: 6610	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6300	AckNum: 6625	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6190	AckNum: 6090	WindowSize = 1	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6205	AckNum: 6105	WindowSize = 2	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6220	AckNum: 6120	WindowSize = 3	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6235	AckNum: 6135	WindowSize = 4	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6250	AckNum: 6150	WindowSize = 5	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6265	AckNum: 6165	WindowSize = 6	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6280	AckNum: 6180	WindowSize = 7	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6295	AckNum: 6195	WindowSize = 8	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6415	AckNum: 6315	WindowSize = 1	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6430	AckNum: 6330	WindowSize = 2	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6445	AckNum: 6345	WindowSize = 3	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6460	AckNum: 6360	WindowSize = 4	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6475	AckNum: 6375	WindowSize = 5	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6490	AckNum: 6390	WindowSize = 6	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6505	AckNum: 6405	WindowSize = 7	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6520	AckNum: 6420	WindowSize = 8	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6535	AckNum: 6435	WindowSize = 9	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6550	AckNum: 6450	WindowSize = 10	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6565	AckNum: 6465	WindowSize = 11	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6580	AckNum: 6480	WindowSize = 12	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6595	AckNum: 6495	WindowSize = 13	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6610	AckNum: 6510	WindowSize = 14	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6625	AckNum: 6525	WindowSize = 15	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6315	AckNum: 6640	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6330	AckNum: 6655	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6345	AckNum: 6670	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6360	AckNum: 6685	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6375	AckNum: 6700	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6390	AckNum: 6715	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6405	AckNum: 6730	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6420	AckNum: 6745	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6435	AckNum: 6760	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6450	AckNum: 6775	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6465	AckNum: 6790	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6480	AckNum: 6805	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6495	AckNum: 6820	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6510	AckNum: 6835	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6525	AckNum: 6850	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6415	AckNum: 6315	WindowSize = 1	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6430	AckNum: 6330	WindowSize = 2	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6445	AckNum: 6345	WindowSize = 3	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6460	AckNum: 6360	WindowSize = 4	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6475	AckNum: 6375	WindowSize = 5	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6640	AckNum: 6540	WindowSize = 1	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6655	AckNum: 6555	WindowSize = 2	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6670	AckNum: 6570	WindowSize = 3	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6685	AckNum: 6585	WindowSize = 4	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6700	AckNum: 6600	WindowSize = 5	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6715	AckNum: 6615	WindowSize = 6	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6730	AckNum: 6630	WindowSize = 7	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6745	AckNum: 6645	WindowSize = 8	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6760	AckNum: 6660	WindowSize = 9	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6775	AckNum: 6675	WindowSize = 10	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6790	AckNum: 6690	WindowSize = 11	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6805	AckNum: 6705	WindowSize = 12	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6820	AckNum: 6720	WindowSize = 13	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6835	AckNum: 6735	WindowSize = 14	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6850	AckNum: 6750	WindowSize = 15	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6540	AckNum: 6865	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6555	AckNum: 6880	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6570	AckNum: 6895	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6585	AckNum: 6910	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6600	AckNum: 6925	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6615	AckNum: 6940	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6630	AckNum: 6955	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6645	AckNum: 6970	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6660	AckNum: 6985	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6675	AckNum: 7000	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6690	AckNum: 7015	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6705	AckNum: 7030	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6720	AckNum: 7045	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6735	AckNum: 7060	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6750	AckNum: 7075	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6640	AckNum: 6540	WindowSize = 1	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6865	AckNum: 6765	WindowSize = 1	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6880	AckNum: 6780	WindowSize = 2	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6895	AckNum: 6795	WindowSize = 3	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6910	AckNum: 6810	WindowSize = 4	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6925	AckNum: 6825	WindowSize = 5	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6940	AckNum: 6840	WindowSize = 6	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6955	AckNum: 6855	WindowSize = 7	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6970	AckNum: 6870	WindowSize = 8	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6985	AckNum: 6885	WindowSize = 9	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7000	AckNum: 6900	WindowSize = 10	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7015	AckNum: 6915	WindowSize = 11	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7030	AckNum: 6930	WindowSize = 12	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7045	AckNum: 6945	WindowSize = 13	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7060	AckNum: 6960	WindowSize = 14	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7075	AckNum: 6975	WindowSize = 15	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6765	AckNum: 7090	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6780	AckNum: 7105	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6795	AckNum: 7120	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6810	AckNum: 7135	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6825	AckNum: 7150	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6840	AckNum: 7165	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6855	AckNum: 7180	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6870	AckNum: 7195	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6885	AckNum: 7210	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6900	AckNum: 7225	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6915	AckNum: 7240	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6930	AckNum: 7255	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6945	AckNum: 7270	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6960	AckNum: 7285	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6975	AckNum: 7300	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6865	AckNum: 6765	WindowSize = 1	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6880	AckNum: 6780	WindowSize = 2	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7090	AckNum: 6990	WindowSize = 1	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7105	AckNum: 7005	WindowSize = 2	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7120	AckNum: 7020	WindowSize = 3	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7135	AckNum: 7035	WindowSize = 4	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7150	AckNum: 7050	WindowSize = 5	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7165	AckNum: 7065	WindowSize = 6	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7180	AckNum: 7080	WindowSize = 7	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7195	AckNum: 7095	WindowSize = 8	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7210	AckNum: 7110	WindowSize = 9	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7225	AckNum: 7125	WindowSize = 10	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7240	AckNum: 7140	WindowSize = 11	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7255	AckNum: 7155	WindowSize = 12	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7270	AckNum: 7170	WindowSize = 13	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7285	AckNum: 7185	WindowSize = 14	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7300	AckNum: 7200	WindowSize = 15	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 6990	AckNum: 7315	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7005	AckNum: 7330	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7020	AckNum: 7345	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7035	AckNum: 7360	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7050	AckNum: 7375	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7065	AckNum: 7390	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7080	AckNum: 7405	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7095	AckNum: 7420	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7110	AckNum: 7435	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7125	AckNum: 7450	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7140	AckNum: 7465	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7155	AckNum: 7480	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7170	AckNum: 7495	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7185	AckNum: 7510	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7200	AckNum: 7525	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7315	AckNum: 7215	WindowSize = 1	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7330	AckNum: 7230	WindowSize = 2	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7345	AckNum: 7245	WindowSize = 3	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7360	AckNum: 7260	WindowSize = 4	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7375	AckNum: 7275	WindowSize = 5	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7390	AckNum: 7290	WindowSize = 6	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7405	AckNum: 7305	WindowSize = 7	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7420	AckNum: 7320	WindowSize = 8	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7435	AckNum: 7335	WindowSize = 9	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7450	AckNum: 7350	WindowSize = 10	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7465	AckNum: 7365	WindowSize = 11	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7480	AckNum: 7380	WindowSize = 12	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7495	AckNum: 7395	WindowSize = 13	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7510	AckNum: 7410	WindowSize = 14	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7525	AckNum: 7425	WindowSize = 15	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7215	AckNum: 7540	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7230	AckNum: 7555	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7245	AckNum: 7570	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7260	AckNum: 7585	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7275	AckNum: 7600	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7290	AckNum: 7615	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7305	AckNum: 7630	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7320	AckNum: 7645	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7335	AckNum: 7660	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7350	AckNum: 7675	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7365	AckNum: 7690	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7380	AckNum: 7705	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7395	AckNum: 7720	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7410	AckNum: 7735	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7425	AckNum: 7750	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7540	AckNum: 7440	WindowSize = 1	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7555	AckNum: 7455	WindowSize = 2	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7570	AckNum: 7470	WindowSize = 3	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7585	AckNum: 7485	WindowSize = 4	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7600	AckNum: 7500	WindowSize = 5	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7615	AckNum: 7515	WindowSize = 6	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7630	AckNum: 7530	WindowSize = 7	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7645	AckNum: 7545	WindowSize = 8	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7660	AckNum: 7560	WindowSize = 9	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7675	AckNum: 7575	WindowSize = 10	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7690	AckNum: 7590	WindowSize = 11	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7705	AckNum: 7605	WindowSize = 12	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7720	AckNum: 7620	WindowSize = 13	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7735	AckNum: 7635	WindowSize = 14	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7750	AckNum: 7650	WindowSize = 15	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7440	AckNum: 7765	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7455	AckNum: 7780	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7470	AckNum: 7795	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7485	AckNum: 7810	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7500	AckNum: 7825	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7515	AckNum: 7840	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7530	AckNum: 7855	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7545	AckNum: 7870	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7560	AckNum: 7885	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7575	AckNum: 7900	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7590	AckNum: 7915	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7605	AckNum: 7930	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7620	AckNum: 7945	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7635	AckNum: 7960	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7650	AckNum: 7975	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7540	AckNum: 7440	WindowSize = 1	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7555	AckNum: 7455	WindowSize = 2	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7570	AckNum: 7470	WindowSize = 3	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7765	AckNum: 7665	WindowSize = 1	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7780	AckNum: 7680	WindowSize = 2	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7795	AckNum: 7695	WindowSize = 3	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7810	AckNum: 7710	WindowSize = 4	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7825	AckNum: 7725	WindowSize = 5	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7840	AckNum: 7740	WindowSize = 6	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7855	AckNum: 7755	WindowSize = 7	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7870	AckNum: 7770	WindowSize = 8	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7885	AckNum: 7785	WindowSize = 9	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7900	AckNum: 7800	WindowSize = 10	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7915	AckNum: 7815	WindowSize = 11	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7930	AckNum: 7830	WindowSize = 12	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7945	AckNum: 7845	WindowSize = 13	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7960	AckNum: 7860	WindowSize = 14	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7975	AckNum: 7875	WindowSize = 15	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7665	AckNum: 7990	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7680	AckNum: 8005	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7695	AckNum: 8020	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7710	AckNum: 8035	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7725	AckNum: 8050	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7740	AckNum: 8065	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7755	AckNum: 8080	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7770	AckNum: 8095	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7785	AckNum: 8110	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7800	AckNum: 8125	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7815	AckNum: 8140	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7830	AckNum: 8155	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7845	AckNum: 8170	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7860	AckNum: 8185	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7875	AckNum: 8200	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7990	AckNum: 7890	WindowSize = 1	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8005	AckNum: 7905	WindowSize = 2	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8020	AckNum: 7920	WindowSize = 3	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8035	AckNum: 7935	WindowSize = 4	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8050	AckNum: 7950	WindowSize = 5	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8065	AckNum: 7965	WindowSize = 6	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8080	AckNum: 7980	WindowSize = 7	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8095	AckNum: 7995	WindowSize = 8	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8110	AckNum: 8010	WindowSize = 9	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8125	AckNum: 8025	WindowSize = 10	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8140	AckNum: 8040	WindowSize = 11	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8155	AckNum: 8055	WindowSize = 12	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8170	AckNum: 8070	WindowSize = 13	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8185	AckNum: 8085	WindowSize = 14	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8200	AckNum: 8100	WindowSize = 15	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7890	AckNum: 8215	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7905	AckNum: 8230	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7920	AckNum: 8245	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7935	AckNum: 8260	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7950	AckNum: 8275	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7965	AckNum: 8290	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7980	AckNum: 8305	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 7995	AckNum: 8320	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8010	AckNum: 8335	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8025	AckNum: 8350	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8040	AckNum: 8365	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8055	AckNum: 8380	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8070	AckNum: 8395	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8085	AckNum: 8410	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8100	AckNum: 8425	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7990	AckNum: 7890	WindowSize = 1	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8215	AckNum: 8115	WindowSize = 1	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8230	AckNum: 8130	WindowSize = 2	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8245	AckNum: 8145	WindowSize = 3	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8260	AckNum: 8160	WindowSize = 4	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8275	AckNum: 8175	WindowSize = 5	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8290	AckNum: 8190	WindowSize = 6	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8305	AckNum: 8205	WindowSize = 7	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8320	AckNum: 8220	WindowSize = 8	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8335	AckNum: 8235	WindowSize = 9	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8350	AckNum: 8250	WindowSize = 10	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8365	AckNum: 8265	WindowSize = 11	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8380	AckNum: 8280	WindowSize = 12	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8395	AckNum: 8295	WindowSize = 13	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8410	AckNum: 8310	WindowSize = 14	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8425	AckNum: 8325	WindowSize = 15	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8115	AckNum: 8440	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8130	AckNum: 8455	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8145	AckNum: 8470	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8160	AckNum: 8485	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8175	AckNum: 8500	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8190	AckNum: 8515	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8205	AckNum: 8530	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8220	AckNum: 8545	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8235	AckNum: 8560	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8250	AckNum: 8575	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8265	AckNum: 8590	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8280	AckNum: 8605	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8295	AckNum: 8620	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8310	AckNum: 8635	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8325	AckNum: 8650	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8440	AckNum: 8340	WindowSize = 1	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8455	AckNum: 8355	WindowSize = 2	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8470	AckNum: 8370	WindowSize = 3	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8485	AckNum: 8385	WindowSize = 4	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8500	AckNum: 8400	WindowSize = 5	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8515	AckNum: 8415	WindowSize = 6	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8530	AckNum: 8430	WindowSize = 7	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8545	AckNum: 8445	WindowSize = 8	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8560	AckNum: 8460	WindowSize = 9	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8575	AckNum: 8475	WindowSize = 10	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8590	AckNum: 8490	WindowSize = 11	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8605	AckNum: 8505	WindowSize = 12	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8620	AckNum: 8520	WindowSize = 13	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8635	AckNum: 8535	WindowSize = 14	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8650	AckNum: 8550	WindowSize = 15	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8340	AckNum: 8665	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8355	AckNum: 8680	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8370	AckNum: 8695	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8385	AckNum: 8710	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8400	AckNum: 8725	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8415	AckNum: 8740	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8430	AckNum: 8755	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8445	AckNum: 8770	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8460	AckNum: 8785	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8475	AckNum: 8800	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8490	AckNum: 8815	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8505	AckNum: 8830	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8520	AckNum: 8845	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8535	AckNum: 8860	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8550	AckNum: 8875	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8440	AckNum: 8340	WindowSize = 1	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8665	AckNum: 8565	WindowSize = 1	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8680	AckNum: 8580	WindowSize = 2	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8695	AckNum: 8595	WindowSize = 3	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8710	AckNum: 8610	WindowSize = 4	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8725	AckNum: 8625	WindowSize = 5	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8740	AckNum: 8640	WindowSize = 6	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8755	AckNum: 8655	WindowSize = 7	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8770	AckNum: 8670	WindowSize = 8	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8785	AckNum: 8685	WindowSize = 9	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8800	AckNum: 8700	WindowSize = 10	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8815	AckNum: 8715	WindowSize = 11	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8830	AckNum: 8730	WindowSize = 12	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8845	AckNum: 8745	WindowSize = 13	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8860	AckNum: 8760	WindowSize = 14	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8875	AckNum: 8775	WindowSize = 15	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8565	AckNum: 8890	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8580	AckNum: 8905	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8595	AckNum: 8920	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8610	AckNum: 8935	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8625	AckNum: 8950	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8640	AckNum: 8965	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8655	AckNum: 8980	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8670	AckNum: 8995	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8685	AckNum: 9010	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8700	AckNum: 9025	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8715	AckNum: 9040	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8730	AckNum: 9055	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8745	AckNum: 9070	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8760	AckNum: 9085	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8775	AckNum: 9100	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8665	AckNum: 8565	WindowSize = 1	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8680	AckNum: 8580	WindowSize = 2	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8695	AckNum: 8595	WindowSize = 3	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8890	AckNum: 8790	WindowSize = 1	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8905	AckNum: 8805	WindowSize = 2	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8920	AckNum: 8820	WindowSize = 3	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8935	AckNum: 8835	WindowSize = 4	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8950	AckNum: 8850	WindowSize = 5	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8965	AckNum: 8865	WindowSize = 6	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8980	AckNum: 8880	WindowSize = 7	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8995	AckNum: 8895	WindowSize = 8	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9010	AckNum: 8910	WindowSize = 9	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9025	AckNum: 8925	WindowSize = 10	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9040	AckNum: 8940	WindowSize = 11	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9055	AckNum: 8955	WindowSize = 12	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9070	AckNum: 8970	WindowSize = 13	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9085	AckNum: 8985	WindowSize = 14	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9100	AckNum: 9000	WindowSize = 15	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8790	AckNum: 9115	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8805	AckNum: 9130	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8820	AckNum: 9145	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8835	AckNum: 9160	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8850	AckNum: 9175	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8865	AckNum: 9190	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8880	AckNum: 9205	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8895	AckNum: 9220	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8910	AckNum: 9235	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8925	AckNum: 9250	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8940	AckNum: 9265	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8955	AckNum: 9280	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8970	AckNum: 9295	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 8985	AckNum: 9310	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9000	AckNum: 9325	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8890	AckNum: 8790	WindowSize = 1	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8905	AckNum: 8805	WindowSize = 2	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8920	AckNum: 8820	WindowSize = 3	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8935	AckNum: 8835	WindowSize = 4	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8950	AckNum: 8850	WindowSize = 5	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8965	AckNum: 8865	WindowSize = 6	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9115	AckNum: 9015	WindowSize = 1	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9130	AckNum: 9030	WindowSize = 2	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9145	AckNum: 9045	WindowSize = 3	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9160	AckNum: 9060	WindowSize = 4	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9175	AckNum: 9075	WindowSize = 5	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9190	AckNum: 9090	WindowSize = 6	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9205	AckNum: 9105	WindowSize = 7	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9220	AckNum: 9120	WindowSize = 8	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9235	AckNum: 9135	WindowSize = 9	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9250	AckNum: 9150	WindowSize = 10	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9265	AckNum: 9165	WindowSize = 11	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9280	AckNum: 9180	WindowSize = 12	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9295	AckNum: 9195	WindowSize = 13	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9310	AckNum: 9210	WindowSize = 14	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9325	AckNum: 9225	WindowSize = 15	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9015	AckNum: 9340	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9030	AckNum: 9355	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9045	AckNum: 9370	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9060	AckNum: 9385	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9075	AckNum: 9400	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9090	AckNum: 9415	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9105	AckNum: 9430	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9120	AckNum: 9445	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9135	AckNum: 9460	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9150	AckNum: 9475	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9165	AckNum: 9490	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9180	AckNum: 9505	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9195	AckNum: 9520	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9210	AckNum: 9535	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9225	AckNum: 9550	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9115	AckNum: 9015	WindowSize = 1	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9340	AckNum: 9240	WindowSize = 1	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9355	AckNum: 9255	WindowSize = 2	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9370	AckNum: 9270	WindowSize = 3	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9385	AckNum: 9285	WindowSize = 4	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9400	AckNum: 9300	WindowSize = 5	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9415	AckNum: 9315	WindowSize = 6	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9430	AckNum: 9330	WindowSize = 7	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9445	AckNum: 9345	WindowSize = 8	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9460	AckNum: 9360	WindowSize = 9	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9475	AckNum: 9375	WindowSize = 10	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9490	AckNum: 9390	WindowSize = 11	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9505	AckNum: 9405	WindowSize = 12	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9520	AckNum: 9420	WindowSize = 13	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9535	AckNum: 9435	WindowSize = 14	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9550	AckNum: 9450	WindowSize = 15	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9240	AckNum: 9565	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9255	AckNum: 9580	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9270	AckNum: 9595	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9285	AckNum: 9610	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9300	AckNum: 9625	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9315	AckNum: 9640	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9330	AckNum: 9655	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9345	AckNum: 9670	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9360	AckNum: 9685	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9375	AckNum: 9700	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9390	AckNum: 9715	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9405	AckNum: 9730	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9420	AckNum: 9745	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9435	AckNum: 9760	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9450	AckNum: 9775	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9340	AckNum: 9240	WindowSize = 1	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9355	AckNum: 9255	WindowSize = 2	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9370	AckNum: 9270	WindowSize = 3	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9385	AckNum: 9285	WindowSize = 4	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9400	AckNum: 9300	WindowSize = 5	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9565	AckNum: 9465	WindowSize = 1	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9580	AckNum: 9480	WindowSize = 2	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9595	AckNum: 9495	WindowSize = 3	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9610	AckNum: 9510	WindowSize = 4	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9625	AckNum: 9525	WindowSize = 5	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9640	AckNum: 9540	WindowSize = 6	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9655	AckNum: 9555	WindowSize = 7	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9670	AckNum: 9570	WindowSize = 8	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9685	AckNum: 9585	WindowSize = 9	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9700	AckNum: 9600	WindowSize = 10	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9715	AckNum: 9615	WindowSize = 11	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9730	AckNum: 9630	WindowSize = 12	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9745	AckNum: 9645	WindowSize = 13	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9760	AckNum: 9660	WindowSize = 14	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9775	AckNum: 9675	WindowSize = 15	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9465	AckNum: 9790	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9480	AckNum: 9805	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9495	AckNum: 9820	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9510	AckNum: 9835	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9525	AckNum: 9850	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9540	AckNum: 9865	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9555	AckNum: 9880	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9570	AckNum: 9895	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9585	AckNum: 9910	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9600	AckNum: 9925	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9615	AckNum: 9940	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9630	AckNum: 9955	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9645	AckNum: 9970	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9660	AckNum: 9985	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9675	AckNum: 10000	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9790	AckNum: 9690	WindowSize = 1	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9805	AckNum: 9705	WindowSize = 2	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9820	AckNum: 9720	WindowSize = 3	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9835	AckNum: 9735	WindowSize = 4	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9850	AckNum: 9750	WindowSize = 5	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9865	AckNum: 9765	WindowSize = 6	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9880	AckNum: 9780	WindowSize = 7	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9895	AckNum: 9795	WindowSize = 8	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9910	AckNum: 9810	WindowSize = 9	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9925	AckNum: 9825	WindowSize = 10	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9940	AckNum: 9840	WindowSize = 11	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9955	AckNum: 9855	WindowSize = 12	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9970	AckNum: 9870	WindowSize = 13	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9985	AckNum: 9885	WindowSize = 14	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10000	AckNum: 9900	WindowSize = 15	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9690	AckNum: 10015	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9705	AckNum: 10030	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9720	AckNum: 10045	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9735	AckNum: 10060	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9750	AckNum: 10075	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9765	AckNum: 10090	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9780	AckNum: 10105	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9795	AckNum: 10120	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9810	AckNum: 10135	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9825	AckNum: 10150	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9840	AckNum: 10165	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9855	AckNum: 10180	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9870	AckNum: 10195	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9885	AckNum: 10210	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9900	AckNum: 10225	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9790	AckNum: 9690	WindowSize = 1	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10015	AckNum: 9915	WindowSize = 1	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10030	AckNum: 9930	WindowSize = 2	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10045	AckNum: 9945	WindowSize = 3	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10060	AckNum: 9960	WindowSize = 4	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10075	AckNum: 9975	WindowSize = 5	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10090	AckNum: 9990	WindowSize = 6	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10105	AckNum: 10005	WindowSize = 7	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10120	AckNum: 10020	WindowSize = 8	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10135	AckNum: 10035	WindowSize = 9	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10150	AckNum: 10050	WindowSize = 10	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10165	AckNum: 10065	WindowSize = 11	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10180	AckNum: 10080	WindowSize = 12	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10195	AckNum: 10095	WindowSize = 13	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10210	AckNum: 10110	WindowSize = 14	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10225	AckNum: 10125	WindowSize = 15	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9915	AckNum: 10240	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9930	AckNum: 10255	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9945	AckNum: 10270	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9960	AckNum: 10285	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9975	AckNum: 10300	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 9990	AckNum: 10315	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10005	AckNum: 10330	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10020	AckNum: 10345	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10035	AckNum: 10360	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10050	AckNum: 10375	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10065	AckNum: 10390	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10080	AckNum: 10405	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10095	AckNum: 10420	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10110	AckNum: 10435	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10125	AckNum: 10450	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10015	AckNum: 9915	WindowSize = 1	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10030	AckNum: 9930	WindowSize = 2	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10240	AckNum: 10140	WindowSize = 1	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10255	AckNum: 10155	WindowSize = 2	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10270	AckNum: 10170	WindowSize = 3	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10285	AckNum: 10185	WindowSize = 4	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10300	AckNum: 10200	WindowSize = 5	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10315	AckNum: 10215	WindowSize = 6	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10330	AckNum: 10230	WindowSize = 7	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10345	AckNum: 10245	WindowSize = 8	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10360	AckNum: 10260	WindowSize = 9	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10375	AckNum: 10275	WindowSize = 10	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10390	AckNum: 10290	WindowSize = 11	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10405	AckNum: 10305	WindowSize = 12	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10420	AckNum: 10320	WindowSize = 13	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10435	AckNum: 10335	WindowSize = 14	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10450	AckNum: 10350	WindowSize = 15	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10140	AckNum: 10465	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10155	AckNum: 10480	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10170	AckNum: 10495	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10185	AckNum: 10510	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10200	AckNum: 10525	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10215	AckNum: 10540	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10230	AckNum: 10555	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10245	AckNum: 10570	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10260	AckNum: 10585	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10275	AckNum: 10600	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10290	AckNum: 10615	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10305	AckNum: 10630	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10320	AckNum: 10645	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10335	AckNum: 10660	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10350	AckNum: 10675	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10465	AckNum: 10365	WindowSize = 1	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10480	AckNum: 10380	WindowSize = 2	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10495	AckNum: 10395	WindowSize = 3	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10510	AckNum: 10410	WindowSize = 4	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10525	AckNum: 10425	WindowSize = 5	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10540	AckNum: 10440	WindowSize = 6	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10555	AckNum: 10455	WindowSize = 7	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10570	AckNum: 10470	WindowSize = 8	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10585	AckNum: 10485	WindowSize = 9	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10600	AckNum: 10500	WindowSize = 10	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10615	AckNum: 10515	WindowSize = 11	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10630	AckNum: 10530	WindowSize = 12	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10645	AckNum: 10545	WindowSize = 13	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10660	AckNum: 10560	WindowSize = 14	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10675	AckNum: 10575	WindowSize = 15	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10365	AckNum: 10690	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10380	AckNum: 10705	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10395	AckNum: 10720	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10410	AckNum: 10735	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10425	AckNum: 10750	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10440	AckNum: 10765	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10455	AckNum: 10780	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10470	AckNum: 10795	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10485	AckNum: 10810	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10500	AckNum: 10825	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10515	AckNum: 10840	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10530	AckNum: 10855	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10545	AckNum: 10870	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10560	AckNum: 10885	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10575	AckNum: 10900	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10690	AckNum: 10590	WindowSize = 1	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10705	AckNum: 10605	WindowSize = 2	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10720	AckNum: 10620	WindowSize = 3	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10735	AckNum: 10635	WindowSize = 4	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10750	AckNum: 10650	WindowSize = 5	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10765	AckNum: 10665	WindowSize = 6	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10780	AckNum: 10680	WindowSize = 7	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10795	AckNum: 10695	WindowSize = 8	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10810	AckNum: 10710	WindowSize = 9	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10825	AckNum: 10725	WindowSize = 10	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10840	AckNum: 10740	WindowSize = 11	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10855	AckNum: 10755	WindowSize = 12	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10870	AckNum: 10770	WindowSize = 13	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10885	AckNum: 10785	WindowSize = 14	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10900	AckNum: 10800	WindowSize = 15	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10590	AckNum: 10915	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10605	AckNum: 10930	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10620	AckNum: 10945	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10635	AckNum: 10960	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10650	AckNum: 10975	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10665	AckNum: 10990	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10680	AckNum: 11005	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10695	AckNum: 11020	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10710	AckNum: 11035	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10725	AckNum: 11050	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10740	AckNum: 11065	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10755	AckNum: 11080	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10770	AckNum: 11095	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10785	AckNum: 11110	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10800	AckNum: 11125	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10915	AckNum: 10815	WindowSize = 1	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10930	AckNum: 10830	WindowSize = 2	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10945	AckNum: 10845	WindowSize = 3	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10960	AckNum: 10860	WindowSize = 4	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10975	AckNum: 10875	WindowSize = 5	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10990	AckNum: 10890	WindowSize = 6	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11005	AckNum: 10905	WindowSize = 7	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11020	AckNum: 10920	WindowSize = 8	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11035	AckNum: 10935	WindowSize = 9	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11050	AckNum: 10950	WindowSize = 10	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11065	AckNum: 10965	WindowSize = 11	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11080	AckNum: 10980	WindowSize = 12	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11095	AckNum: 10995	WindowSize = 13	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11110	AckNum: 11010	WindowSize = 14	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11125	AckNum: 11025	WindowSize = 15	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10815	AckNum: 11140	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10830	AckNum: 11155	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10845	AckNum: 11170	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10860	AckNum: 11185	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10875	AckNum: 11200	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10890	AckNum: 11215	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10905	AckNum: 11230	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10920	AckNum: 11245	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10935	AckNum: 11260	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10950	AckNum: 11275	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10965	AckNum: 11290	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10980	AckNum: 11305	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 10995	AckNum: 11320	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11010	AckNum: 11335	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11025	AckNum: 11350	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10915	AckNum: 10815	WindowSize = 1	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10930	AckNum: 10830	WindowSize = 2	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10945	AckNum: 10845	WindowSize = 3	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10960	AckNum: 10860	WindowSize = 4	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11140	AckNum: 11040	WindowSize = 1	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11155	AckNum: 11055	WindowSize = 2	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11170	AckNum: 11070	WindowSize = 3	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11185	AckNum: 11085	WindowSize = 4	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11200	AckNum: 11100	WindowSize = 5	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11215	AckNum: 11115	WindowSize = 6	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11230	AckNum: 11130	WindowSize = 7	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11245	AckNum: 11145	WindowSize = 8	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11260	AckNum: 11160	WindowSize = 9	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11275	AckNum: 11175	WindowSize = 10	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11290	AckNum: 11190	WindowSize = 11	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11305	AckNum: 11205	WindowSize = 12	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11320	AckNum: 11220	WindowSize = 13	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11335	AckNum: 11235	WindowSize = 14	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11350	AckNum: 11250	WindowSize = 15	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11040	AckNum: 11365	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11055	AckNum: 11380	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11070	AckNum: 11395	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11085	AckNum: 11410	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11100	AckNum: 11425	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11115	AckNum: 11440	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11130	AckNum: 11455	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11145	AckNum: 11470	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11160	AckNum: 11485	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11175	AckNum: 11500	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11190	AckNum: 11515	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11205	AckNum: 11530	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11220	AckNum: 11545	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11235	AckNum: 11560	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11250	AckNum: 11575	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11140	AckNum: 11040	WindowSize = 1	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11155	AckNum: 11055	WindowSize = 2	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11170	AckNum: 11070	WindowSize = 3	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11185	AckNum: 11085	WindowSize = 4	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11200	AckNum: 11100	WindowSize = 5	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11215	AckNum: 11115	WindowSize = 6	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11230	AckNum: 11130	WindowSize = 7	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11245	AckNum: 11145	WindowSize = 8	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11260	AckNum: 11160	WindowSize = 9	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11275	AckNum: 11175	WindowSize = 10	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11290	AckNum: 11190	WindowSize = 11	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11365	AckNum: 11265	WindowSize = 1	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11380	AckNum: 11280	WindowSize = 2	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11395	AckNum: 11295	WindowSize = 3	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11410	AckNum: 11310	WindowSize = 4	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11425	AckNum: 11325	WindowSize = 5	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11440	AckNum: 11340	WindowSize = 6	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11455	AckNum: 11355	WindowSize = 7	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11470	AckNum: 11370	WindowSize = 8	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11485	AckNum: 11385	WindowSize = 9	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11500	AckNum: 11400	WindowSize = 10	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11515	AckNum: 11415	WindowSize = 11	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11530	AckNum: 11430	WindowSize = 12	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11545	AckNum: 11445	WindowSize = 13	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11560	AckNum: 11460	WindowSize = 14	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11575	AckNum: 11475	WindowSize = 15	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11265	AckNum: 11590	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11280	AckNum: 11605	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11295	AckNum: 11620	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11310	AckNum: 11635	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11325	AckNum: 11650	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11340	AckNum: 11665	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11355	AckNum: 11680	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11370	AckNum: 11695	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11385	AckNum: 11710	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11400	AckNum: 11725	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11415	AckNum: 11740	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11430	AckNum: 11755	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11445	AckNum: 11770	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11460	AckNum: 11785	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11475	AckNum: 11800	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11365	AckNum: 11265	WindowSize = 1	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11380	AckNum: 11280	WindowSize = 2	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11395	AckNum: 11295	WindowSize = 3	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11410	AckNum: 11310	WindowSize = 4	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11590	AckNum: 11490	WindowSize = 1	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11605	AckNum: 11505	WindowSize = 2	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11620	AckNum: 11520	WindowSize = 3	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11635	AckNum: 11535	WindowSize = 4	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11650	AckNum: 11550	WindowSize = 5	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11665	AckNum: 11565	WindowSize = 6	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11680	AckNum: 11580	WindowSize = 7	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11695	AckNum: 11595	WindowSize = 8	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11710	AckNum: 11610	WindowSize = 9	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11725	AckNum: 11625	WindowSize = 10	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11740	AckNum: 11640	WindowSize = 11	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11755	AckNum: 11655	WindowSize = 12	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11770	AckNum: 11670	WindowSize = 13	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11785	AckNum: 11685	WindowSize = 14	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11800	AckNum: 11700	WindowSize = 15	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11490	AckNum: 11815	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11505	AckNum: 11830	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11520	AckNum: 11845	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11535	AckNum: 11860	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11550	AckNum: 11875	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11565	AckNum: 11890	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11580	AckNum: 11905	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11595	AckNum: 11920	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11610	AckNum: 11935	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11625	AckNum: 11950	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11640	AckNum: 11965	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11655	AckNum: 11980	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11670	AckNum: 11995	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11685	AckNum: 12010	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11700	AckNum: 12025	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11815	AckNum: 11715	WindowSize = 1	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11830	AckNum: 11730	WindowSize = 2	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11845	AckNum: 11745	WindowSize = 3	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11860	AckNum: 11760	WindowSize = 4	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11875	AckNum: 11775	WindowSize = 5	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11890	AckNum: 11790	WindowSize = 6	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11905	AckNum: 11805	WindowSize = 7	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11920	AckNum: 11820	WindowSize = 8	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11935	AckNum: 11835	WindowSize = 9	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11950	AckNum: 11850	WindowSize = 10	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11965	AckNum: 11865	WindowSize = 11	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11980	AckNum: 11880	WindowSize = 12	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11995	AckNum: 11895	WindowSize = 13	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12010	AckNum: 11910	WindowSize = 14	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12025	AckNum: 11925	WindowSize = 15	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11715	AckNum: 12040	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11730	AckNum: 12055	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11745	AckNum: 12070	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11760	AckNum: 12085	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11775	AckNum: 12100	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11790	AckNum: 12115	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11805	AckNum: 12130	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11820	AckNum: 12145	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11835	AckNum: 12160	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11850	AckNum: 12175	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11865	AckNum: 12190	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11880	AckNum: 12205	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11895	AckNum: 12220	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11910	AckNum: 12235	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11925	AckNum: 12250	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12040	AckNum: 11940	WindowSize = 1	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12055	AckNum: 11955	WindowSize = 2	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12070	AckNum: 11970	WindowSize = 3	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12085	AckNum: 11985	WindowSize = 4	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12100	AckNum: 12000	WindowSize = 5	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12115	AckNum: 12015	WindowSize = 6	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12130	AckNum: 12030	WindowSize = 7	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12145	AckNum: 12045	WindowSize = 8	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12160	AckNum: 12060	WindowSize = 9	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12175	AckNum: 12075	WindowSize = 10	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12190	AckNum: 12090	WindowSize = 11	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12205	AckNum: 12105	WindowSize = 12	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12220	AckNum: 12120	WindowSize = 13	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12235	AckNum: 12135	WindowSize = 14	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12250	AckNum: 12150	WindowSize = 15	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11940	AckNum: 12265	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11955	AckNum: 12280	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11970	AckNum: 12295	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 11985	AckNum: 12310	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12000	AckNum: 12325	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12015	AckNum: 12340	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12030	AckNum: 12355	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12045	AckNum: 12370	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12060	AckNum: 12385	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12075	AckNum: 12400	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12090	AckNum: 12415	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12105	AckNum: 12430	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12120	AckNum: 12445	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12135	AckNum: 12460	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12150	AckNum: 12475	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12040	AckNum: 11940	WindowSize = 1	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12055	AckNum: 11955	WindowSize = 2	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12070	AckNum: 11970	WindowSize = 3	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12265	AckNum: 12165	WindowSize = 1	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12280	AckNum: 12180	WindowSize = 2	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12295	AckNum: 12195	WindowSize = 3	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12310	AckNum: 12210	WindowSize = 4	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12325	AckNum: 12225	WindowSize = 5	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12340	AckNum: 12240	WindowSize = 6	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12355	AckNum: 12255	WindowSize = 7	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12370	AckNum: 12270	WindowSize = 8	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12385	AckNum: 12285	WindowSize = 9	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12400	AckNum: 12300	WindowSize = 10	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12415	AckNum: 12315	WindowSize = 11	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12430	AckNum: 12330	WindowSize = 12	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12445	AckNum: 12345	WindowSize = 13	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12460	AckNum: 12360	WindowSize = 14	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12475	AckNum: 12375	WindowSize = 15	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12165	AckNum: 12490	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12180	AckNum: 12505	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12195	AckNum: 12520	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12210	AckNum: 12535	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12225	AckNum: 12550	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12240	AckNum: 12565	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12255	AckNum: 12580	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12270	AckNum: 12595	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12285	AckNum: 12610	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12300	AckNum: 12625	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12315	AckNum: 12640	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12330	AckNum: 12655	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12345	AckNum: 12670	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12360	AckNum: 12685	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12375	AckNum: 12700	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12265	AckNum: 12165	WindowSize = 1	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12280	AckNum: 12180	WindowSize = 2	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12295	AckNum: 12195	WindowSize = 3	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12310	AckNum: 12210	WindowSize = 4	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12490	AckNum: 12390	WindowSize = 1	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12505	AckNum: 12405	WindowSize = 2	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12520	AckNum: 12420	WindowSize = 3	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12535	AckNum: 12435	WindowSize = 4	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12550	AckNum: 12450	WindowSize = 5	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12565	AckNum: 12465	WindowSize = 6	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12580	AckNum: 12480	WindowSize = 7	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12595	AckNum: 12495	WindowSize = 8	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12610	AckNum: 12510	WindowSize = 9	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12625	AckNum: 12525	WindowSize = 10	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12640	AckNum: 12540	WindowSize = 11	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12655	AckNum: 12555	WindowSize = 12	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12670	AckNum: 12570	WindowSize = 13	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12685	AckNum: 12585	WindowSize = 14	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12700	AckNum: 12600	WindowSize = 15	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12390	AckNum: 12715	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12405	AckNum: 12730	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12420	AckNum: 12745	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12435	AckNum: 12760	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12450	AckNum: 12775	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12465	AckNum: 12790	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12480	AckNum: 12805	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12495	AckNum: 12820	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12510	AckNum: 12835	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12525	AckNum: 12850	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12540	AckNum: 12865	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12555	AckNum: 12880	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12570	AckNum: 12895	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12585	AckNum: 12910	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12600	AckNum: 12925	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12715	AckNum: 12615	WindowSize = 1	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12730	AckNum: 12630	WindowSize = 2	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12745	AckNum: 12645	WindowSize = 3	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12760	AckNum: 12660	WindowSize = 4	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12775	AckNum: 12675	WindowSize = 5	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12790	AckNum: 12690	WindowSize = 6	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12805	AckNum: 12705	WindowSize = 7	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12820	AckNum: 12720	WindowSize = 8	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12835	AckNum: 12735	WindowSize = 9	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12850	AckNum: 12750	WindowSize = 10	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12865	AckNum: 12765	WindowSize = 11	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12880	AckNum: 12780	WindowSize = 12	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12895	AckNum: 12795	WindowSize = 13	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12910	AckNum: 12810	WindowSize = 14	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12925	AckNum: 12825	WindowSize = 15	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12615	AckNum: 12940	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12630	AckNum: 12955	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12645	AckNum: 12970	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12660	AckNum: 12985	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12675	AckNum: 13000	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12690	AckNum: 13015	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12705	AckNum: 13030	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12720	AckNum: 13045	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12735	AckNum: 13060	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12750	AckNum: 13075	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12765	AckNum: 13090	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12780	AckNum: 13105	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12795	AckNum: 13120	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12810	AckNum: 13135	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12825	AckNum: 13150	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12715	AckNum: 12615	WindowSize = 1	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12730	AckNum: 12630	WindowSize = 2	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12940	AckNum: 12840	WindowSize = 1	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12955	AckNum: 12855	WindowSize = 2	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12970	AckNum: 12870	WindowSize = 3	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12985	AckNum: 12885	WindowSize = 4	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13000	AckNum: 12900	WindowSize = 5	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13015	AckNum: 12915	WindowSize = 6	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13030	AckNum: 12930	WindowSize = 7	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13045	AckNum: 12945	WindowSize = 8	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13060	AckNum: 12960	WindowSize = 9	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13075	AckNum: 12975	WindowSize = 10	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13090	AckNum: 12990	WindowSize = 11	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13105	AckNum: 13005	WindowSize = 12	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13120	AckNum: 13020	WindowSize = 13	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13135	AckNum: 13035	WindowSize = 14	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13150	AckNum: 13050	WindowSize = 15	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12840	AckNum: 13165	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12855	AckNum: 13180	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12870	AckNum: 13195	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12885	AckNum: 13210	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12900	AckNum: 13225	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12915	AckNum: 13240	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12930	AckNum: 13255	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12945	AckNum: 13270	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12960	AckNum: 13285	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12975	AckNum: 13300	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 12990	AckNum: 13315	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13005	AckNum: 13330	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13020	AckNum: 13345	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13035	AckNum: 13360	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13050	AckNum: 13375	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13165	AckNum: 13065	WindowSize = 1	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13180	AckNum: 13080	WindowSize = 2	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13195	AckNum: 13095	WindowSize = 3	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13210	AckNum: 13110	WindowSize = 4	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13225	AckNum: 13125	WindowSize = 5	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13240	AckNum: 13140	WindowSize = 6	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13255	AckNum: 13155	WindowSize = 7	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13270	AckNum: 13170	WindowSize = 8	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13285	AckNum: 13185	WindowSize = 9	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13300	AckNum: 13200	WindowSize = 10	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13315	AckNum: 13215	WindowSize = 11	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13330	AckNum: 13230	WindowSize = 12	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13345	AckNum: 13245	WindowSize = 13	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13360	AckNum: 13260	WindowSize = 14	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13375	AckNum: 13275	WindowSize = 15	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13065	AckNum: 13390	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13080	AckNum: 13405	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13095	AckNum: 13420	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13110	AckNum: 13435	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13125	AckNum: 13450	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13140	AckNum: 13465	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13155	AckNum: 13480	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13170	AckNum: 13495	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13185	AckNum: 13510	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13200	AckNum: 13525	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13215	AckNum: 13540	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13230	AckNum: 13555	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13245	AckNum: 13570	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13260	AckNum: 13585	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13275	AckNum: 13600	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13165	AckNum: 13065	WindowSize = 1	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13390	AckNum: 13290	WindowSize = 1	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13405	AckNum: 13305	WindowSize = 2	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13420	AckNum: 13320	WindowSize = 3	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13435	AckNum: 13335	WindowSize = 4	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13450	AckNum: 13350	WindowSize = 5	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13465	AckNum: 13365	WindowSize = 6	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13480	AckNum: 13380	WindowSize = 7	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13495	AckNum: 13395	WindowSize = 8	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13510	AckNum: 13410	WindowSize = 9	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13525	AckNum: 13425	WindowSize = 10	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13540	AckNum: 13440	WindowSize = 11	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13555	AckNum: 13455	WindowSize = 12	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13570	AckNum: 13470	WindowSize = 13	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13585	AckNum: 13485	WindowSize = 14	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13600	AckNum: 13500	WindowSize = 15	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13290	AckNum: 13615	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13305	AckNum: 13630	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13320	AckNum: 13645	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13335	AckNum: 13660	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13350	AckNum: 13675	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13365	AckNum: 13690	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13380	AckNum: 13705	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13395	AckNum: 13720	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13410	AckNum: 13735	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13425	AckNum: 13750	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13440	AckNum: 13765	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13455	AckNum: 13780	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13470	AckNum: 13795	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13485	AckNum: 13810	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13500	AckNum: 13825	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13615	AckNum: 13515	WindowSize = 1	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13630	AckNum: 13530	WindowSize = 2	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13645	AckNum: 13545	WindowSize = 3	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13660	AckNum: 13560	WindowSize = 4	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13675	AckNum: 13575	WindowSize = 5	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13690	AckNum: 13590	WindowSize = 6	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13705	AckNum: 13605	WindowSize = 7	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13720	AckNum: 13620	WindowSize = 8	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13735	AckNum: 13635	WindowSize = 9	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13750	AckNum: 13650	WindowSize = 10	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13765	AckNum: 13665	WindowSize = 11	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13780	AckNum: 13680	WindowSize = 12	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13795	AckNum: 13695	WindowSize = 13	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13810	AckNum: 13710	WindowSize = 14	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13825	AckNum: 13725	WindowSize = 15	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13515	AckNum: 13840	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13530	AckNum: 13855	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13545	AckNum: 13870	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13560	AckNum: 13885	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13575	AckNum: 13900	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13590	AckNum: 13915	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13605	AckNum: 13930	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13620	AckNum: 13945	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13635	AckNum: 13960	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13650	AckNum: 13975	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13665	AckNum: 13990	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13680	AckNum: 14005	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13695	AckNum: 14020	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13710	AckNum: 14035	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13725	AckNum: 14050	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13615	AckNum: 13515	WindowSize = 1	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13840	AckNum: 13740	WindowSize = 1	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13855	AckNum: 13755	WindowSize = 2	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13870	AckNum: 13770	WindowSize = 3	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13885	AckNum: 13785	WindowSize = 4	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13900	AckNum: 13800	WindowSize = 5	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13915	AckNum: 13815	WindowSize = 6	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13930	AckNum: 13830	WindowSize = 7	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13945	AckNum: 13845	WindowSize = 8	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13960	AckNum: 13860	WindowSize = 9	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13975	AckNum: 13875	WindowSize = 10	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13990	AckNum: 13890	WindowSize = 11	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14005	AckNum: 13905	WindowSize = 12	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14020	AckNum: 13920	WindowSize = 13	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14035	AckNum: 13935	WindowSize = 14	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14050	AckNum: 13950	WindowSize = 15	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13740	AckNum: 14065	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13755	AckNum: 14080	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13770	AckNum: 14095	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13785	AckNum: 14110	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13800	AckNum: 14125	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13815	AckNum: 14140	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13830	AckNum: 14155	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13845	AckNum: 14170	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13860	AckNum: 14185	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13875	AckNum: 14200	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13890	AckNum: 14215	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13905	AckNum: 14230	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13920	AckNum: 14245	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13935	AckNum: 14260	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13950	AckNum: 14275	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14065	AckNum: 13965	WindowSize = 1	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14080	AckNum: 13980	WindowSize = 2	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14095	AckNum: 13995	WindowSize = 3	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14110	AckNum: 14010	WindowSize = 4	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14125	AckNum: 14025	WindowSize = 5	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14140	AckNum: 14040	WindowSize = 6	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14155	AckNum: 14055	WindowSize = 7	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14170	AckNum: 14070	WindowSize = 8	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14185	AckNum: 14085	WindowSize = 9	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14200	AckNum: 14100	WindowSize = 10	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14215	AckNum: 14115	WindowSize = 11	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14230	AckNum: 14130	WindowSize = 12	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14245	AckNum: 14145	WindowSize = 13	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14260	AckNum: 14160	WindowSize = 14	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14275	AckNum: 14175	WindowSize = 15	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13965	AckNum: 14290	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13980	AckNum: 14305	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 13995	AckNum: 14320	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14010	AckNum: 14335	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14025	AckNum: 14350	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14040	AckNum: 14365	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14055	AckNum: 14380	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14070	AckNum: 14395	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14085	AckNum: 14410	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14100	AckNum: 14425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14115	AckNum: 14440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14130	AckNum: 14455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14145	AckNum: 14470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14160	AckNum: 14485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14175	AckNum: 14500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14065	AckNum: 13965	WindowSize = 1	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14080	AckNum: 13980	WindowSize = 2	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14290	AckNum: 14190	WindowSize = 1	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14305	AckNum: 14205	WindowSize = 2	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14320	AckNum: 14220	WindowSize = 3	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14335	AckNum: 14235	WindowSize = 4	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14350	AckNum: 14250	WindowSize = 5	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14365	AckNum: 14265	WindowSize = 6	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14380	AckNum: 14280	WindowSize = 7	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14395	AckNum: 14295	WindowSize = 8	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14410	AckNum: 14310	WindowSize = 9	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14425	AckNum: 14325	WindowSize = 10	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14440	AckNum: 14340	WindowSize = 11	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14455	AckNum: 14355	WindowSize = 12	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14470	AckNum: 14370	WindowSize = 13	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14485	AckNum: 14385	WindowSize = 14	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14500	AckNum: 14400	WindowSize = 15	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14190	AckNum: 14515	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14205	AckNum: 14530	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14220	AckNum: 14545	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14235	AckNum: 14560	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14250	AckNum: 14575	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14265	AckNum: 14590	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14280	AckNum: 14605	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14295	AckNum: 14620	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14310	AckNum: 14635	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14325	AckNum: 14650	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14340	AckNum: 14665	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14355	AckNum: 14680	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14370	AckNum: 14695	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14385	AckNum: 14710	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14400	AckNum: 14725	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14515	AckNum: 14415	WindowSize = 1	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14530	AckNum: 14430	WindowSize = 2	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14545	AckNum: 14445	WindowSize = 3	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14560	AckNum: 14460	WindowSize = 4	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14575	AckNum: 14475	WindowSize = 5	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14590	AckNum: 14490	WindowSize = 6	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14605	AckNum: 14505	WindowSize = 7	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14620	AckNum: 14520	WindowSize = 8	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14635	AckNum: 14535	WindowSize = 9	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14650	AckNum: 14550	WindowSize = 10	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14665	AckNum: 14565	WindowSize = 11	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14680	AckNum: 14580	WindowSize = 12	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14695	AckNum: 14595	WindowSize = 13	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14710	AckNum: 14610	WindowSize = 14	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14725	AckNum: 14625	WindowSize = 15	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14415	AckNum: 14740	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14430	AckNum: 14755	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14445	AckNum: 14770	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14460	AckNum: 14785	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14475	AckNum: 14800	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14490	AckNum: 14815	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14505	AckNum: 14830	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14520	AckNum: 14845	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14535	AckNum: 14860	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14550	AckNum: 14875	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14565	AckNum: 14890	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14580	AckNum: 14905	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14595	AckNum: 14920	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14610	AckNum: 14935	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14625	AckNum: 14950	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14515	AckNum: 14415	WindowSize = 1	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14530	AckNum: 14430	WindowSize = 2	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14545	AckNum: 14445	WindowSize = 3	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14560	AckNum: 14460	WindowSize = 4	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14575	AckNum: 14475	WindowSize = 5	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14740	AckNum: 14640	WindowSize = 1	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14755	AckNum: 14655	WindowSize = 2	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14770	AckNum: 14670	WindowSize = 3	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14785	AckNum: 14685	WindowSize = 4	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14800	AckNum: 14700	WindowSize = 5	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14815	AckNum: 14715	WindowSize = 6	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14830	AckNum: 14730	WindowSize = 7	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14845	AckNum: 14745	WindowSize = 8	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14860	AckNum: 14760	WindowSize = 9	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14875	AckNum: 14775	WindowSize = 10	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14890	AckNum: 14790	WindowSize = 11	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14905	AckNum: 14805	WindowSize = 12	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14920	AckNum: 14820	WindowSize = 13	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14935	AckNum: 14835	WindowSize = 14	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14950	AckNum: 14850	WindowSize = 15	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14640	AckNum: 14965	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14655	AckNum: 14980	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14670	AckNum: 14995	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14685	AckNum: 15010	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14700	AckNum: 15025	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14715	AckNum: 15040	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14730	AckNum: 15055	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14745	AckNum: 15070	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14760	AckNum: 15085	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14775	AckNum: 15100	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14790	AckNum: 15115	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14805	AckNum: 15130	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14820	AckNum: 15145	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14835	AckNum: 15160	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14850	AckNum: 15175	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14965	AckNum: 14865	WindowSize = 1	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14980	AckNum: 14880	WindowSize = 2	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14995	AckNum: 14895	WindowSize = 3	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15010	AckNum: 14910	WindowSize = 4	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15025	AckNum: 14925	WindowSize = 5	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15040	AckNum: 14940	WindowSize = 6	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15055	AckNum: 14955	WindowSize = 7	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15070	AckNum: 14970	WindowSize = 8	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15085	AckNum: 14985	WindowSize = 9	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15100	AckNum: 15000	WindowSize = 10	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15115	AckNum: 15015	WindowSize = 11	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15130	AckNum: 15030	WindowSize = 12	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15145	AckNum: 15045	WindowSize = 13	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15160	AckNum: 15060	WindowSize = 14	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15175	AckNum: 15075	WindowSize = 15	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14865	AckNum: 15190	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14880	AckNum: 15205	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14895	AckNum: 15220	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14910	AckNum: 15235	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14925	AckNum: 15250	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14940	AckNum: 15265	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14955	AckNum: 15280	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14970	AckNum: 15295	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 14985	AckNum: 15310	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15000	AckNum: 15325	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15015	AckNum: 15340	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15030	AckNum: 15355	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15045	AckNum: 15370	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15060	AckNum: 15385	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15075	AckNum: 15400	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14965	AckNum: 14865	WindowSize = 1	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14980	AckNum: 14880	WindowSize = 2	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15190	AckNum: 15090	WindowSize = 1	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15205	AckNum: 15105	WindowSize = 2	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15220	AckNum: 15120	WindowSize = 3	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15235	AckNum: 15135	WindowSize = 4	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15250	AckNum: 15150	WindowSize = 5	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15265	AckNum: 15165	WindowSize = 6	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15280	AckNum: 15180	WindowSize = 7	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15295	AckNum: 15195	WindowSize = 8	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15310	AckNum: 15210	WindowSize = 9	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15325	AckNum: 15225	WindowSize = 10	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15340	AckNum: 15240	WindowSize = 11	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15355	AckNum: 15255	WindowSize = 12	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15370	AckNum: 15270	WindowSize = 13	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15385	AckNum: 15285	WindowSize = 14	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15400	AckNum: 15300	WindowSize = 15	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15090	AckNum: 15415	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15105	AckNum: 15430	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15120	AckNum: 15445	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15135	AckNum: 15460	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15150	AckNum: 15475	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15165	AckNum: 15490	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15180	AckNum: 15505	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15195	AckNum: 15520	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15210	AckNum: 15535	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15225	AckNum: 15550	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15240	AckNum: 15565	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15255	AckNum: 15580	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15270	AckNum: 15595	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15285	AckNum: 15610	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15300	AckNum: 15625	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15415	AckNum: 15315	WindowSize = 1	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15430	AckNum: 15330	WindowSize = 2	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15445	AckNum: 15345	WindowSize = 3	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15460	AckNum: 15360	WindowSize = 4	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15475	AckNum: 15375	WindowSize = 5	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15490	AckNum: 15390	WindowSize = 6	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15505	AckNum: 15405	WindowSize = 7	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15520	AckNum: 15420	WindowSize = 8	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15535	AckNum: 15435	WindowSize = 9	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15550	AckNum: 15450	WindowSize = 10	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15565	AckNum: 15465	WindowSize = 11	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15580	AckNum: 15480	WindowSize = 12	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15595	AckNum: 15495	WindowSize = 13	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15610	AckNum: 15510	WindowSize = 14	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15625	AckNum: 15525	WindowSize = 15	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15315	AckNum: 15640	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15330	AckNum: 15655	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15345	AckNum: 15670	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15360	AckNum: 15685	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15375	AckNum: 15700	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15390	AckNum: 15715	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15405	AckNum: 15730	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15420	AckNum: 15745	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15435	AckNum: 15760	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15450	AckNum: 15775	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15465	AckNum: 15790	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15480	AckNum: 15805	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15495	AckNum: 15820	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15510	AckNum: 15835	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15525	AckNum: 15850	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15415	AckNum: 15315	WindowSize = 1	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15640	AckNum: 15540	WindowSize = 1	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15655	AckNum: 15555	WindowSize = 2	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15670	AckNum: 15570	WindowSize = 3	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15685	AckNum: 15585	WindowSize = 4	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15700	AckNum: 15600	WindowSize = 5	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15715	AckNum: 15615	WindowSize = 6	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15730	AckNum: 15630	WindowSize = 7	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15745	AckNum: 15645	WindowSize = 8	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15760	AckNum: 15660	WindowSize = 9	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15775	AckNum: 15675	WindowSize = 10	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15790	AckNum: 15690	WindowSize = 11	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15805	AckNum: 15705	WindowSize = 12	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15820	AckNum: 15720	WindowSize = 13	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15835	AckNum: 15735	WindowSize = 14	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15850	AckNum: 15750	WindowSize = 15	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15540	AckNum: 15865	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15555	AckNum: 15880	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15570	AckNum: 15895	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15585	AckNum: 15910	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15600	AckNum: 15925	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15615	AckNum: 15940	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15630	AckNum: 15955	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15645	AckNum: 15970	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15660	AckNum: 15985	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15675	AckNum: 16000	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15690	AckNum: 16015	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15705	AckNum: 16030	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15720	AckNum: 16045	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15735	AckNum: 16060	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15750	AckNum: 16075	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15640	AckNum: 15540	WindowSize = 1	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15655	AckNum: 15555	WindowSize = 2	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15670	AckNum: 15570	WindowSize = 3	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15865	AckNum: 15765	WindowSize = 1	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15880	AckNum: 15780	WindowSize = 2	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15895	AckNum: 15795	WindowSize = 3	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15910	AckNum: 15810	WindowSize = 4	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15925	AckNum: 15825	WindowSize = 5	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15940	AckNum: 15840	WindowSize = 6	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15955	AckNum: 15855	WindowSize = 7	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15970	AckNum: 15870	WindowSize = 8	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15985	AckNum: 15885	WindowSize = 9	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16000	AckNum: 15900	WindowSize = 10	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16015	AckNum: 15915	WindowSize = 11	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16030	AckNum: 15930	WindowSize = 12	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16045	AckNum: 15945	WindowSize = 13	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16060	AckNum: 15960	WindowSize = 14	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16075	AckNum: 15975	WindowSize = 15	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15765	AckNum: 16090	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15780	AckNum: 16105	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15795	AckNum: 16120	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15810	AckNum: 16135	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15825	AckNum: 16150	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15840	AckNum: 16165	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15855	AckNum: 16180	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15870	AckNum: 16195	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15885	AckNum: 16210	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15900	AckNum: 16225	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15915	AckNum: 16240	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15930	AckNum: 16255	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15945	AckNum: 16270	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15960	AckNum: 16285	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15975	AckNum: 16300	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16090	AckNum: 15990	WindowSize = 1	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16105	AckNum: 16005	WindowSize = 2	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16120	AckNum: 16020	WindowSize = 3	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16135	AckNum: 16035	WindowSize = 4	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16150	AckNum: 16050	WindowSize = 5	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16165	AckNum: 16065	WindowSize = 6	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16180	AckNum: 16080	WindowSize = 7	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16195	AckNum: 16095	WindowSize = 8	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16210	AckNum: 16110	WindowSize = 9	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16225	AckNum: 16125	WindowSize = 10	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16240	AckNum: 16140	WindowSize = 11	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16255	AckNum: 16155	WindowSize = 12	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16270	AckNum: 16170	WindowSize = 13	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16285	AckNum: 16185	WindowSize = 14	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16300	AckNum: 16200	WindowSize = 15	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 15990	AckNum: 16315	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16005	AckNum: 16330	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16020	AckNum: 16345	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16035	AckNum: 16360	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16050	AckNum: 16375	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16065	AckNum: 16390	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16080	AckNum: 16405	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16095	AckNum: 16420	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16110	AckNum: 16435	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16125	AckNum: 16450	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16140	AckNum: 16465	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16155	AckNum: 16480	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16170	AckNum: 16495	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16185	AckNum: 16510	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16200	AckNum: 16525	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16315	AckNum: 16215	WindowSize = 1	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16330	AckNum: 16230	WindowSize = 2	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16345	AckNum: 16245	WindowSize = 3	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16360	AckNum: 16260	WindowSize = 4	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16375	AckNum: 16275	WindowSize = 5	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16390	AckNum: 16290	WindowSize = 6	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16405	AckNum: 16305	WindowSize = 7	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16420	AckNum: 16320	WindowSize = 8	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16435	AckNum: 16335	WindowSize = 9	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16450	AckNum: 16350	WindowSize = 10	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16465	AckNum: 16365	WindowSize = 11	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16480	AckNum: 16380	WindowSize = 12	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16495	AckNum: 16395	WindowSize = 13	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16510	AckNum: 16410	WindowSize = 14	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16525	AckNum: 16425	WindowSize = 15	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16215	AckNum: 16540	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16230	AckNum: 16555	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16245	AckNum: 16570	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16260	AckNum: 16585	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16275	AckNum: 16600	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16290	AckNum: 16615	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16305	AckNum: 16630	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16320	AckNum: 16645	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16335	AckNum: 16660	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16350	AckNum: 16675	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16365	AckNum: 16690	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16380	AckNum: 16705	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16395	AckNum: 16720	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16410	AckNum: 16735	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16425	AckNum: 16750	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16315	AckNum: 16215	WindowSize = 1	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16330	AckNum: 16230	WindowSize = 2	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16345	AckNum: 16245	WindowSize = 3	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16360	AckNum: 16260	WindowSize = 4	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16375	AckNum: 16275	WindowSize = 5	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16390	AckNum: 16290	WindowSize = 6	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16540	AckNum: 16440	WindowSize = 1	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16555	AckNum: 16455	WindowSize = 2	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16570	AckNum: 16470	WindowSize = 3	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16585	AckNum: 16485	WindowSize = 4	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16600	AckNum: 16500	WindowSize = 5	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16615	AckNum: 16515	WindowSize = 6	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16630	AckNum: 16530	WindowSize = 7	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16645	AckNum: 16545	WindowSize = 8	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16660	AckNum: 16560	WindowSize = 9	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16675	AckNum: 16575	WindowSize = 10	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16690	AckNum: 16590	WindowSize = 11	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16705	AckNum: 16605	WindowSize = 12	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16720	AckNum: 16620	WindowSize = 13	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16735	AckNum: 16635	WindowSize = 14	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16750	AckNum: 16650	WindowSize = 15	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16440	AckNum: 16765	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16455	AckNum: 16780	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16470	AckNum: 16795	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16485	AckNum: 16810	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16500	AckNum: 16825	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16515	AckNum: 16840	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16530	AckNum: 16855	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16545	AckNum: 16870	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16560	AckNum: 16885	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16575	AckNum: 16900	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16590	AckNum: 16915	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16605	AckNum: 16930	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16620	AckNum: 16945	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16635	AckNum: 16960	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16650	AckNum: 16975	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16765	AckNum: 16665	WindowSize = 1	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16780	AckNum: 16680	WindowSize = 2	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16795	AckNum: 16695	WindowSize = 3	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16810	AckNum: 16710	WindowSize = 4	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16825	AckNum: 16725	WindowSize = 5	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16840	AckNum: 16740	WindowSize = 6	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16855	AckNum: 16755	WindowSize = 7	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16870	AckNum: 16770	WindowSize = 8	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16885	AckNum: 16785	WindowSize = 9	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16900	AckNum: 16800	WindowSize = 10	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16915	AckNum: 16815	WindowSize = 11	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16930	AckNum: 16830	WindowSize = 12	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16945	AckNum: 16845	WindowSize = 13	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16960	AckNum: 16860	WindowSize = 14	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16975	AckNum: 16875	WindowSize = 15	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16665	AckNum: 16990	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16680	AckNum: 17005	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16695	AckNum: 17020	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16710	AckNum: 17035	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16725	AckNum: 17050	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16740	AckNum: 17065	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16755	AckNum: 17080	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16770	AckNum: 17095	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16785	AckNum: 17110	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16800	AckNum: 17125	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16815	AckNum: 17140	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16830	AckNum: 17155	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16845	AckNum: 17170	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16860	AckNum: 17185	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16875	AckNum: 17200	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16765	AckNum: 16665	WindowSize = 1	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16780	AckNum: 16680	WindowSize = 2	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16795	AckNum: 16695	WindowSize = 3	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16810	AckNum: 16710	WindowSize = 4	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16990	AckNum: 16890	WindowSize = 1	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17005	AckNum: 16905	WindowSize = 2	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17020	AckNum: 16920	WindowSize = 3	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17035	AckNum: 16935	WindowSize = 4	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17050	AckNum: 16950	WindowSize = 5	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17065	AckNum: 16965	WindowSize = 6	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17080	AckNum: 16980	WindowSize = 7	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17095	AckNum: 16995	WindowSize = 8	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17110	AckNum: 17010	WindowSize = 9	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17125	AckNum: 17025	WindowSize = 10	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17140	AckNum: 17040	WindowSize = 11	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17155	AckNum: 17055	WindowSize = 12	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17170	AckNum: 17070	WindowSize = 13	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17185	AckNum: 17085	WindowSize = 14	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17200	AckNum: 17100	WindowSize = 15	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16890	AckNum: 17215	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16905	AckNum: 17230	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16920	AckNum: 17245	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16935	AckNum: 17260	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16950	AckNum: 17275	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16965	AckNum: 17290	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16980	AckNum: 17305	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 16995	AckNum: 17320	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17010	AckNum: 17335	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17025	AckNum: 17350	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17040	AckNum: 17365	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17055	AckNum: 17380	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17070	AckNum: 17395	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17085	AckNum: 17410	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17100	AckNum: 17425	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16990	AckNum: 16890	WindowSize = 1	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17215	AckNum: 17115	WindowSize = 1	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17230	AckNum: 17130	WindowSize = 2	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17245	AckNum: 17145	WindowSize = 3	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17260	AckNum: 17160	WindowSize = 4	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17275	AckNum: 17175	WindowSize = 5	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17290	AckNum: 17190	WindowSize = 6	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17305	AckNum: 17205	WindowSize = 7	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17320	AckNum: 17220	WindowSize = 8	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17335	AckNum: 17235	WindowSize = 9	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17350	AckNum: 17250	WindowSize = 10	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17365	AckNum: 17265	WindowSize = 11	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17380	AckNum: 17280	WindowSize = 12	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17395	AckNum: 17295	WindowSize = 13	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17410	AckNum: 17310	WindowSize = 14	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17425	AckNum: 17325	WindowSize = 15	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17115	AckNum: 17440	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17130	AckNum: 17455	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17145	AckNum: 17470	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17160	AckNum: 17485	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17175	AckNum: 17500	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17190	AckNum: 17515	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17205	AckNum: 17530	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17220	AckNum: 17545	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17235	AckNum: 17560	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17250	AckNum: 17575	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17265	AckNum: 17590	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17280	AckNum: 17605	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17295	AckNum: 17620	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17310	AckNum: 17635	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17325	AckNum: 17650	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17215	AckNum: 17115	WindowSize = 1	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17440	AckNum: 17340	WindowSize = 1	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17455	AckNum: 17355	WindowSize = 2	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17470	AckNum: 17370	WindowSize = 3	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17485	AckNum: 17385	WindowSize = 4	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17500	AckNum: 17400	WindowSize = 5	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17515	AckNum: 17415	WindowSize = 6	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17530	AckNum: 17430	WindowSize = 7	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17545	AckNum: 17445	WindowSize = 8	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17560	AckNum: 17460	WindowSize = 9	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17575	AckNum: 17475	WindowSize = 10	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17590	AckNum: 17490	WindowSize = 11	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17605	AckNum: 17505	WindowSize = 12	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17620	AckNum: 17520	WindowSize = 13	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17635	AckNum: 17535	WindowSize = 14	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17650	AckNum: 17550	WindowSize = 15	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17340	AckNum: 17665	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17355	AckNum: 17680	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17370	AckNum: 17695	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17385	AckNum: 17710	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17400	AckNum: 17725	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17415	AckNum: 17740	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17430	AckNum: 17755	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17445	AckNum: 17770	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17460	AckNum: 17785	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17475	AckNum: 17800	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17490	AckNum: 17815	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17505	AckNum: 17830	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17520	AckNum: 17845	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17535	AckNum: 17860	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17550	AckNum: 17875	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17665	AckNum: 17565	WindowSize = 1	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17680	AckNum: 17580	WindowSize = 2	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17695	AckNum: 17595	WindowSize = 3	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17710	AckNum: 17610	WindowSize = 4	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17725	AckNum: 17625	WindowSize = 5	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17740	AckNum: 17640	WindowSize = 6	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17755	AckNum: 17655	WindowSize = 7	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17770	AckNum: 17670	WindowSize = 8	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17785	AckNum: 17685	WindowSize = 9	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17800	AckNum: 17700	WindowSize = 10	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17815	AckNum: 17715	WindowSize = 11	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17830	AckNum: 17730	WindowSize = 12	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17845	AckNum: 17745	WindowSize = 13	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17860	AckNum: 17760	WindowSize = 14	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17875	AckNum: 17775	WindowSize = 15	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17565	AckNum: 17890	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17580	AckNum: 17905	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17595	AckNum: 17920	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17610	AckNum: 17935	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17625	AckNum: 17950	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17640	AckNum: 17965	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17655	AckNum: 17980	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17670	AckNum: 17995	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17685	AckNum: 18010	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17700	AckNum: 18025	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17715	AckNum: 18040	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17730	AckNum: 18055	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17745	AckNum: 18070	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17760	AckNum: 18085	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17775	AckNum: 18100	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17890	AckNum: 17790	WindowSize = 1	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17905	AckNum: 17805	WindowSize = 2	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17920	AckNum: 17820	WindowSize = 3	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17935	AckNum: 17835	WindowSize = 4	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17950	AckNum: 17850	WindowSize = 5	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17965	AckNum: 17865	WindowSize = 6	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17980	AckNum: 17880	WindowSize = 7	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17995	AckNum: 17895	WindowSize = 8	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18010	AckNum: 17910	WindowSize = 9	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18025	AckNum: 17925	WindowSize = 10	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18040	AckNum: 17940	WindowSize = 11	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18055	AckNum: 17955	WindowSize = 12	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18070	AckNum: 17970	WindowSize = 13	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18085	AckNum: 17985	WindowSize = 14	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18100	AckNum: 18000	WindowSize = 15	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17790	AckNum: 18115	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17805	AckNum: 18130	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17820	AckNum: 18145	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17835	AckNum: 18160	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17850	AckNum: 18175	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17865	AckNum: 18190	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17880	AckNum: 18205	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17895	AckNum: 18220	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17910	AckNum: 18235	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17925	AckNum: 18250	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17940	AckNum: 18265	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17955	AckNum: 18280	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17970	AckNum: 18295	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 17985	AckNum: 18310	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18000	AckNum: 18325	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17890	AckNum: 17790	WindowSize = 1	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18115	AckNum: 18015	WindowSize = 1	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18130	AckNum: 18030	WindowSize = 2	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18145	AckNum: 18045	WindowSize = 3	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18160	AckNum: 18060	WindowSize = 4	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18175	AckNum: 18075	WindowSize = 5	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18190	AckNum: 18090	WindowSize = 6	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18205	AckNum: 18105	WindowSize = 7	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18220	AckNum: 18120	WindowSize = 8	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18235	AckNum: 18135	WindowSize = 9	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18250	AckNum: 18150	WindowSize = 10	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18265	AckNum: 18165	WindowSize = 11	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18280	AckNum: 18180	WindowSize = 12	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18295	AckNum: 18195	WindowSize = 13	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18310	AckNum: 18210	WindowSize = 14	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18325	AckNum: 18225	WindowSize = 15	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18015	AckNum: 18340	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18030	AckNum: 18355	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18045	AckNum: 18370	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18060	AckNum: 18385	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18075	AckNum: 18400	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18090	AckNum: 18415	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18105	AckNum: 18430	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18120	AckNum: 18445	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18135	AckNum: 18460	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18150	AckNum: 18475	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18165	AckNum: 18490	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18180	AckNum: 18505	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18195	AckNum: 18520	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18210	AckNum: 18535	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18225	AckNum: 18550	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18340	AckNum: 18240	WindowSize = 1	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18355	AckNum: 18255	WindowSize = 2	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18370	AckNum: 18270	WindowSize = 3	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18385	AckNum: 18285	WindowSize = 4	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18400	AckNum: 18300	WindowSize = 5	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18415	AckNum: 18315	WindowSize = 6	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18430	AckNum: 18330	WindowSize = 7	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18445	AckNum: 18345	WindowSize = 8	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18460	AckNum: 18360	WindowSize = 9	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18475	AckNum: 18375	WindowSize = 10	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18490	AckNum: 18390	WindowSize = 11	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18505	AckNum: 18405	WindowSize = 12	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18520	AckNum: 18420	WindowSize = 13	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18535	AckNum: 18435	WindowSize = 14	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18550	AckNum: 18450	WindowSize = 15	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18240	AckNum: 18565	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18255	AckNum: 18580	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18270	AckNum: 18595	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18285	AckNum: 18610	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18300	AckNum: 18625	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18315	AckNum: 18640	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18330	AckNum: 18655	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18345	AckNum: 18670	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18360	AckNum: 18685	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18375	AckNum: 18700	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18390	AckNum: 18715	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18405	AckNum: 18730	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18420	AckNum: 18745	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18435	AckNum: 18760	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18450	AckNum: 18775	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18340	AckNum: 18240	WindowSize = 1	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18355	AckNum: 18255	WindowSize = 2	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18370	AckNum: 18270	WindowSize = 3	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18385	AckNum: 18285	WindowSize = 4	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18400	AckNum: 18300	WindowSize = 5	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18565	AckNum: 18465	WindowSize = 1	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18580	AckNum: 18480	WindowSize = 2	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18595	AckNum: 18495	WindowSize = 3	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18610	AckNum: 18510	WindowSize = 4	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18625	AckNum: 18525	WindowSize = 5	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18640	AckNum: 18540	WindowSize = 6	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18655	AckNum: 18555	WindowSize = 7	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18670	AckNum: 18570	WindowSize = 8	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18685	AckNum: 18585	WindowSize = 9	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18700	AckNum: 18600	WindowSize = 10	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18715	AckNum: 18615	WindowSize = 11	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18730	AckNum: 18630	WindowSize = 12	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18745	AckNum: 18645	WindowSize = 13	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18760	AckNum: 18660	WindowSize = 14	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18775	AckNum: 18675	WindowSize = 15	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18465	AckNum: 18790	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18480	AckNum: 18805	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18495	AckNum: 18820	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18510	AckNum: 18835	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18525	AckNum: 18850	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18540	AckNum: 18865	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18555	AckNum: 18880	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18570	AckNum: 18895	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18585	AckNum: 18910	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18600	AckNum: 18925	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18615	AckNum: 18940	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18630	AckNum: 18955	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18645	AckNum: 18970	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18660	AckNum: 18985	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18675	AckNum: 19000	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18565	AckNum: 18465	WindowSize = 1	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18580	AckNum: 18480	WindowSize = 2	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18790	AckNum: 18690	WindowSize = 1	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18805	AckNum: 18705	WindowSize = 2	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18820	AckNum: 18720	WindowSize = 3	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18835	AckNum: 18735	WindowSize = 4	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18850	AckNum: 18750	WindowSize = 5	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18865	AckNum: 18765	WindowSize = 6	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18880	AckNum: 18780	WindowSize = 7	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18895	AckNum: 18795	WindowSize = 8	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18910	AckNum: 18810	WindowSize = 9	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18925	AckNum: 18825	WindowSize = 10	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18940	AckNum: 18840	WindowSize = 11	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18955	AckNum: 18855	WindowSize = 12	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18970	AckNum: 18870	WindowSize = 13	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18985	AckNum: 18885	WindowSize = 14	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19000	AckNum: 18900	WindowSize = 15	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18690	AckNum: 19015	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18705	AckNum: 19030	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18720	AckNum: 19045	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18735	AckNum: 19060	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18750	AckNum: 19075	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18765	AckNum: 19090	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18780	AckNum: 19105	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18795	AckNum: 19120	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18810	AckNum: 19135	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18825	AckNum: 19150	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18840	AckNum: 19165	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18855	AckNum: 19180	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18870	AckNum: 19195	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18885	AckNum: 19210	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18900	AckNum: 19225	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18790	AckNum: 18690	WindowSize = 1	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19015	AckNum: 18915	WindowSize = 1	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19030	AckNum: 18930	WindowSize = 2	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19045	AckNum: 18945	WindowSize = 3	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19060	AckNum: 18960	WindowSize = 4	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19075	AckNum: 18975	WindowSize = 5	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19090	AckNum: 18990	WindowSize = 6	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19105	AckNum: 19005	WindowSize = 7	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19120	AckNum: 19020	WindowSize = 8	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19135	AckNum: 19035	WindowSize = 9	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19150	AckNum: 19050	WindowSize = 10	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19165	AckNum: 19065	WindowSize = 11	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19180	AckNum: 19080	WindowSize = 12	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19195	AckNum: 19095	WindowSize = 13	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19210	AckNum: 19110	WindowSize = 14	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19225	AckNum: 19125	WindowSize = 15	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18915	AckNum: 19240	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18930	AckNum: 19255	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18945	AckNum: 19270	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18960	AckNum: 19285	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18975	AckNum: 19300	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 18990	AckNum: 19315	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19005	AckNum: 19330	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19020	AckNum: 19345	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19035	AckNum: 19360	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19050	AckNum: 19375	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19065	AckNum: 19390	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19080	AckNum: 19405	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19095	AckNum: 19420	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19110	AckNum: 19435	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19125	AckNum: 19450	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19015	AckNum: 18915	WindowSize = 1	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19240	AckNum: 19140	WindowSize = 1	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19255	AckNum: 19155	WindowSize = 2	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19270	AckNum: 19170	WindowSize = 3	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19285	AckNum: 19185	WindowSize = 4	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19300	AckNum: 19200	WindowSize = 5	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19315	AckNum: 19215	WindowSize = 6	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19330	AckNum: 19230	WindowSize = 7	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19345	AckNum: 19245	WindowSize = 8	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19360	AckNum: 19260	WindowSize = 9	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19375	AckNum: 19275	WindowSize = 10	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19390	AckNum: 19290	WindowSize = 11	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19405	AckNum: 19305	WindowSize = 12	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19420	AckNum: 19320	WindowSize = 13	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19435	AckNum: 19335	WindowSize = 14	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19450	AckNum: 19350	WindowSize = 15	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19140	AckNum: 19465	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19155	AckNum: 19480	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19170	AckNum: 19495	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19185	AckNum: 19510	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19200	AckNum: 19525	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19215	AckNum: 19540	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19230	AckNum: 19555	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19245	AckNum: 19570	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19260	AckNum: 19585	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19275	AckNum: 19600	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19290	AckNum: 19615	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19305	AckNum: 19630	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19320	AckNum: 19645	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19335	AckNum: 19660	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19350	AckNum: 19675	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19240	AckNum: 19140	WindowSize = 1	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19465	AckNum: 19365	WindowSize = 1	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19480	AckNum: 19380	WindowSize = 2	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19495	AckNum: 19395	WindowSize = 3	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19510	AckNum: 19410	WindowSize = 4	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19525	AckNum: 19425	WindowSize = 5	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19540	AckNum: 19440	WindowSize = 6	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19555	AckNum: 19455	WindowSize = 7	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19570	AckNum: 19470	WindowSize = 8	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19585	AckNum: 19485	WindowSize = 9	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19600	AckNum: 19500	WindowSize = 10	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19615	AckNum: 19515	WindowSize = 11	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19630	AckNum: 19530	WindowSize = 12	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19645	AckNum: 19545	WindowSize = 13	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19660	AckNum: 19560	WindowSize = 14	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19675	AckNum: 19575	WindowSize = 15	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19365	AckNum: 19690	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19380	AckNum: 19705	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19395	AckNum: 19720	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19410	AckNum: 19735	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19425	AckNum: 19750	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19440	AckNum: 19765	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19455	AckNum: 19780	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19470	AckNum: 19795	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19485	AckNum: 19810	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19500	AckNum: 19825	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19515	AckNum: 19840	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19530	AckNum: 19855	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19545	AckNum: 19870	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19560	AckNum: 19885	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19575	AckNum: 19900	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19690	AckNum: 19590	WindowSize = 1	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19705	AckNum: 19605	WindowSize = 2	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19720	AckNum: 19620	WindowSize = 3	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19735	AckNum: 19635	WindowSize = 4	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19750	AckNum: 19650	WindowSize = 5	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19765	AckNum: 19665	WindowSize = 6	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19780	AckNum: 19680	WindowSize = 7	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19795	AckNum: 19695	WindowSize = 8	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19810	AckNum: 19710	WindowSize = 9	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19825	AckNum: 19725	WindowSize = 10	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19840	AckNum: 19740	WindowSize = 11	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19855	AckNum: 19755	WindowSize = 12	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19870	AckNum: 19770	WindowSize = 13	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19885	AckNum: 19785	WindowSize = 14	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19900	AckNum: 19800	WindowSize = 15	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19590	AckNum: 19915	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19605	AckNum: 19930	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19620	AckNum: 19945	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19635	AckNum: 19960	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19650	AckNum: 19975	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19665	AckNum: 19990	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19680	AckNum: 20005	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19695	AckNum: 20020	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19710	AckNum: 20035	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19725	AckNum: 20050	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19740	AckNum: 20065	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19755	AckNum: 20080	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19770	AckNum: 20095	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19785	AckNum: 20110	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19800	AckNum: 20125	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19690	AckNum: 19590	WindowSize = 1	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19705	AckNum: 19605	WindowSize = 2	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19720	AckNum: 19620	WindowSize = 3	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19735	AckNum: 19635	WindowSize = 4	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19915	AckNum: 19815	WindowSize = 1	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19930	AckNum: 19830	WindowSize = 2	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19945	AckNum: 19845	WindowSize = 3	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19960	AckNum: 19860	WindowSize = 4	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19975	AckNum: 19875	WindowSize = 5	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19990	AckNum: 19890	WindowSize = 6	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20005	AckNum: 19905	WindowSize = 7	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20020	AckNum: 19920	WindowSize = 8	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20035	AckNum: 19935	WindowSize = 9	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20050	AckNum: 19950	WindowSize = 10	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20065	AckNum: 19965	WindowSize = 11	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20080	AckNum: 19980	WindowSize = 12	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20095	AckNum: 19995	WindowSize = 13	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20110	AckNum: 20010	WindowSize = 14	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20125	AckNum: 20025	WindowSize = 15	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19815	AckNum: 20140	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19830	AckNum: 20155	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19845	AckNum: 20170	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19860	AckNum: 20185	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19875	AckNum: 20200	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19890	AckNum: 20215	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19905	AckNum: 20230	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19920	AckNum: 20245	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19935	AckNum: 20260	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19950	AckNum: 20275	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19965	AckNum: 20290	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19980	AckNum: 20305	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 19995	AckNum: 20320	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20010	AckNum: 20335	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20025	AckNum: 20350	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19915	AckNum: 19815	WindowSize = 1	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20140	AckNum: 20040	WindowSize = 1	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20155	AckNum: 20055	WindowSize = 2	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20170	AckNum: 20070	WindowSize = 3	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20185	AckNum: 20085	WindowSize = 4	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20200	AckNum: 20100	WindowSize = 5	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20215	AckNum: 20115	WindowSize = 6	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20230	AckNum: 20130	WindowSize = 7	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20245	AckNum: 20145	WindowSize = 8	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20260	AckNum: 20160	WindowSize = 9	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20275	AckNum: 20175	WindowSize = 10	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20290	AckNum: 20190	WindowSize = 11	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20305	AckNum: 20205	WindowSize = 12	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20320	AckNum: 20220	WindowSize = 13	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20335	AckNum: 20235	WindowSize = 14	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20350	AckNum: 20250	WindowSize = 15	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20040	AckNum: 20365	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20055	AckNum: 20380	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20070	AckNum: 20395	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20085	AckNum: 20410	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20100	AckNum: 20425	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20115	AckNum: 20440	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20130	AckNum: 20455	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20145	AckNum: 20470	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20160	AckNum: 20485	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20175	AckNum: 20500	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20190	AckNum: 20515	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20205	AckNum: 20530	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20220	AckNum: 20545	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20235	AckNum: 20560	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20250	AckNum: 20575	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20140	AckNum: 20040	WindowSize = 1	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20155	AckNum: 20055	WindowSize = 2	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20365	AckNum: 20265	WindowSize = 1	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20380	AckNum: 20280	WindowSize = 2	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20395	AckNum: 20295	WindowSize = 3	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20410	AckNum: 20310	WindowSize = 4	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20425	AckNum: 20325	WindowSize = 5	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20440	AckNum: 20340	WindowSize = 6	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20455	AckNum: 20355	WindowSize = 7	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20470	AckNum: 20370	WindowSize = 8	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20485	AckNum: 20385	WindowSize = 9	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20500	AckNum: 20400	WindowSize = 10	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20515	AckNum: 20415	WindowSize = 11	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20530	AckNum: 20430	WindowSize = 12	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20545	AckNum: 20445	WindowSize = 13	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20560	AckNum: 20460	WindowSize = 14	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20575	AckNum: 20475	WindowSize = 15	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20265	AckNum: 20590	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20280	AckNum: 20605	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20295	AckNum: 20620	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20310	AckNum: 20635	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20325	AckNum: 20650	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20340	AckNum: 20665	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20355	AckNum: 20680	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20370	AckNum: 20695	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20385	AckNum: 20710	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20400	AckNum: 20725	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20415	AckNum: 20740	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20430	AckNum: 20755	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20445	AckNum: 20770	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20460	AckNum: 20785	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20475	AckNum: 20800	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20365	AckNum: 20265	WindowSize = 1	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20590	AckNum: 20490	WindowSize = 1	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20605	AckNum: 20505	WindowSize = 2	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20620	AckNum: 20520	WindowSize = 3	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20635	AckNum: 20535	WindowSize = 4	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20650	AckNum: 20550	WindowSize = 5	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20665	AckNum: 20565	WindowSize = 6	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20680	AckNum: 20580	WindowSize = 7	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20695	AckNum: 20595	WindowSize = 8	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20710	AckNum: 20610	WindowSize = 9	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20725	AckNum: 20625	WindowSize = 10	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20740	AckNum: 20640	WindowSize = 11	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20755	AckNum: 20655	WindowSize = 12	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20770	AckNum: 20670	WindowSize = 13	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20785	AckNum: 20685	WindowSize = 14	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20800	AckNum: 20700	WindowSize = 15	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20490	AckNum: 20815	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20505	AckNum: 20830	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20520	AckNum: 20845	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20535	AckNum: 20860	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20550	AckNum: 20875	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20565	AckNum: 20890	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20580	AckNum: 20905	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20595	AckNum: 20920	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20610	AckNum: 20935	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20625	AckNum: 20950	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20640	AckNum: 20965	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20655	AckNum: 20980	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20670	AckNum: 20995	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20685	AckNum: 21010	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20700	AckNum: 21025	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20590	AckNum: 20490	WindowSize = 1	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20815	AckNum: 20715	WindowSize = 1	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20830	AckNum: 20730	WindowSize = 2	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20845	AckNum: 20745	WindowSize = 3	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20860	AckNum: 20760	WindowSize = 4	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20875	AckNum: 20775	WindowSize = 5	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20890	AckNum: 20790	WindowSize = 6	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20905	AckNum: 20805	WindowSize = 7	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20920	AckNum: 20820	WindowSize = 8	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20935	AckNum: 20835	WindowSize = 9	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20950	AckNum: 20850	WindowSize = 10	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20965	AckNum: 20865	WindowSize = 11	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20980	AckNum: 20880	WindowSize = 12	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20995	AckNum: 20895	WindowSize = 13	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21010	AckNum: 20910	WindowSize = 14	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21025	AckNum: 20925	WindowSize = 15	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20715	AckNum: 21040	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20730	AckNum: 21055	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20745	AckNum: 21070	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20760	AckNum: 21085	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20775	AckNum: 21100	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20790	AckNum: 21115	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20805	AckNum: 21130	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20820	AckNum: 21145	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20835	AckNum: 21160	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20850	AckNum: 21175	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20865	AckNum: 21190	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20880	AckNum: 21205	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20895	AckNum: 21220	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20910	AckNum: 21235	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20925	AckNum: 21250	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20815	AckNum: 20715	WindowSize = 1	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20830	AckNum: 20730	WindowSize = 2	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21040	AckNum: 20940	WindowSize = 1	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21055	AckNum: 20955	WindowSize = 2	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21070	AckNum: 20970	WindowSize = 3	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21085	AckNum: 20985	WindowSize = 4	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21100	AckNum: 21000	WindowSize = 5	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21115	AckNum: 21015	WindowSize = 6	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21130	AckNum: 21030	WindowSize = 7	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21145	AckNum: 21045	WindowSize = 8	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21160	AckNum: 21060	WindowSize = 9	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21175	AckNum: 21075	WindowSize = 10	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21190	AckNum: 21090	WindowSize = 11	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21205	AckNum: 21105	WindowSize = 12	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21220	AckNum: 21120	WindowSize = 13	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21235	AckNum: 21135	WindowSize = 14	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21250	AckNum: 21150	WindowSize = 15	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20940	AckNum: 21265	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20955	AckNum: 21280	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20970	AckNum: 21295	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 20985	AckNum: 21310	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21000	AckNum: 21325	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21015	AckNum: 21340	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21030	AckNum: 21355	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21045	AckNum: 21370	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21060	AckNum: 21385	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21075	AckNum: 21400	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21090	AckNum: 21415	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21105	AckNum: 21430	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21120	AckNum: 21445	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21135	AckNum: 21460	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21150	AckNum: 21475	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21265	AckNum: 21165	WindowSize = 1	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21280	AckNum: 21180	WindowSize = 2	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21295	AckNum: 21195	WindowSize = 3	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21310	AckNum: 21210	WindowSize = 4	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21325	AckNum: 21225	WindowSize = 5	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21340	AckNum: 21240	WindowSize = 6	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21355	AckNum: 21255	WindowSize = 7	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21370	AckNum: 21270	WindowSize = 8	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21385	AckNum: 21285	WindowSize = 9	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21400	AckNum: 21300	WindowSize = 10	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21415	AckNum: 21315	WindowSize = 11	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21430	AckNum: 21330	WindowSize = 12	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21445	AckNum: 21345	WindowSize = 13	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21460	AckNum: 21360	WindowSize = 14	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21475	AckNum: 21375	WindowSize = 15	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21165	AckNum: 21490	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21180	AckNum: 21505	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21195	AckNum: 21520	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21210	AckNum: 21535	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21225	AckNum: 21550	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21240	AckNum: 21565	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21255	AckNum: 21580	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21270	AckNum: 21595	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21285	AckNum: 21610	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21300	AckNum: 21625	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21315	AckNum: 21640	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21330	AckNum: 21655	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21345	AckNum: 21670	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21360	AckNum: 21685	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21375	AckNum: 21700	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21490	AckNum: 21390	WindowSize = 1	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21505	AckNum: 21405	WindowSize = 2	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21520	AckNum: 21420	WindowSize = 3	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21535	AckNum: 21435	WindowSize = 4	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21550	AckNum: 21450	WindowSize = 5	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21565	AckNum: 21465	WindowSize = 6	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21580	AckNum: 21480	WindowSize = 7	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21595	AckNum: 21495	WindowSize = 8	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21610	AckNum: 21510	WindowSize = 9	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21625	AckNum: 21525	WindowSize = 10	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21640	AckNum: 21540	WindowSize = 11	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21655	AckNum: 21555	WindowSize = 12	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21670	AckNum: 21570	WindowSize = 13	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21685	AckNum: 21585	WindowSize = 14	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21700	AckNum: 21600	WindowSize = 15	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21390	AckNum: 21715	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21405	AckNum: 21730	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21420	AckNum: 21745	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21435	AckNum: 21760	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21450	AckNum: 21775	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21465	AckNum: 21790	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21480	AckNum: 21805	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21495	AckNum: 21820	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21510	AckNum: 21835	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21525	AckNum: 21850	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21540	AckNum: 21865	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21555	AckNum: 21880	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21570	AckNum: 21895	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21585	AckNum: 21910	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21600	AckNum: 21925	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21490	AckNum: 21390	WindowSize = 1	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21505	AckNum: 21405	WindowSize = 2	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21520	AckNum: 21420	WindowSize = 3	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21715	AckNum: 21615	WindowSize = 1	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21730	AckNum: 21630	WindowSize = 2	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21745	AckNum: 21645	WindowSize = 3	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21760	AckNum: 21660	WindowSize = 4	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21775	AckNum: 21675	WindowSize = 5	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21790	AckNum: 21690	WindowSize = 6	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21805	AckNum: 21705	WindowSize = 7	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21820	AckNum: 21720	WindowSize = 8	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21835	AckNum: 21735	WindowSize = 9	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21850	AckNum: 21750	WindowSize = 10	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21865	AckNum: 21765	WindowSize = 11	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21880	AckNum: 21780	WindowSize = 12	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21895	AckNum: 21795	WindowSize = 13	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21910	AckNum: 21810	WindowSize = 14	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21925	AckNum: 21825	WindowSize = 15	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21615	AckNum: 21940	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21630	AckNum: 21955	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21645	AckNum: 21970	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21660	AckNum: 21985	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21675	AckNum: 22000	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21690	AckNum: 22015	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21705	AckNum: 22030	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21720	AckNum: 22045	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21735	AckNum: 22060	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21750	AckNum: 22075	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21765	AckNum: 22090	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21780	AckNum: 22105	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21795	AckNum: 22120	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21810	AckNum: 22135	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21825	AckNum: 22150	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21715	AckNum: 21615	WindowSize = 1	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21940	AckNum: 21840	WindowSize = 1	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21955	AckNum: 21855	WindowSize = 2	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21970	AckNum: 21870	WindowSize = 3	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21985	AckNum: 21885	WindowSize = 4	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22000	AckNum: 21900	WindowSize = 5	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22015	AckNum: 21915	WindowSize = 6	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22030	AckNum: 21930	WindowSize = 7	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22045	AckNum: 21945	WindowSize = 8	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22060	AckNum: 21960	WindowSize = 9	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22075	AckNum: 21975	WindowSize = 10	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22090	AckNum: 21990	WindowSize = 11	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22105	AckNum: 22005	WindowSize = 12	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22120	AckNum: 22020	WindowSize = 13	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22135	AckNum: 22035	WindowSize = 14	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22150	AckNum: 22050	WindowSize = 15	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21840	AckNum: 22165	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21855	AckNum: 22180	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21870	AckNum: 22195	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21885	AckNum: 22210	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21900	AckNum: 22225	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21915	AckNum: 22240	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21930	AckNum: 22255	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21945	AckNum: 22270	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21960	AckNum: 22285	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21975	AckNum: 22300	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 21990	AckNum: 22315	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22005	AckNum: 22330	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22020	AckNum: 22345	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22035	AckNum: 22360	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22050	AckNum: 22375	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21940	AckNum: 21840	WindowSize = 1	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21955	AckNum: 21855	WindowSize = 2	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22165	AckNum: 22065	WindowSize = 1	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22180	AckNum: 22080	WindowSize = 2	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22195	AckNum: 22095	WindowSize = 3	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22210	AckNum: 22110	WindowSize = 4	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22225	AckNum: 22125	WindowSize = 5	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22240	AckNum: 22140	WindowSize = 6	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22255	AckNum: 22155	WindowSize = 7	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22270	AckNum: 22170	WindowSize = 8	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22285	AckNum: 22185	WindowSize = 9	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22300	AckNum: 22200	WindowSize = 10	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22315	AckNum: 22215	WindowSize = 11	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22330	AckNum: 22230	WindowSize = 12	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22345	AckNum: 22245	WindowSize = 13	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22360	AckNum: 22260	WindowSize = 14	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22375	AckNum: 22275	WindowSize = 15	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22065	AckNum: 22390	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22080	AckNum: 22405	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22095	AckNum: 22420	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22110	AckNum: 22435	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22125	AckNum: 22450	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22140	AckNum: 22465	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22155	AckNum: 22480	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22170	AckNum: 22495	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22185	AckNum: 22510	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22200	AckNum: 22525	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22215	AckNum: 22540	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22230	AckNum: 22555	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22245	AckNum: 22570	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22260	AckNum: 22585	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22275	AckNum: 22600	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22390	AckNum: 22290	WindowSize = 1	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22405	AckNum: 22305	WindowSize = 2	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22420	AckNum: 22320	WindowSize = 3	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22435	AckNum: 22335	WindowSize = 4	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22450	AckNum: 22350	WindowSize = 5	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22465	AckNum: 22365	WindowSize = 6	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22480	AckNum: 22380	WindowSize = 7	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22495	AckNum: 22395	WindowSize = 8	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22510	AckNum: 22410	WindowSize = 9	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22525	AckNum: 22425	WindowSize = 10	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22540	AckNum: 22440	WindowSize = 11	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22555	AckNum: 22455	WindowSize = 12	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22570	AckNum: 22470	WindowSize = 13	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22585	AckNum: 22485	WindowSize = 14	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22600	AckNum: 22500	WindowSize = 15	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22290	AckNum: 22615	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22305	AckNum: 22630	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22320	AckNum: 22645	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22335	AckNum: 22660	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22350	AckNum: 22675	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22365	AckNum: 22690	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22380	AckNum: 22705	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22395	AckNum: 22720	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22410	AckNum: 22735	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22425	AckNum: 22750	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22440	AckNum: 22765	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22455	AckNum: 22780	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22470	AckNum: 22795	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22485	AckNum: 22810	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22500	AckNum: 22825	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22390	AckNum: 22290	WindowSize = 1	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22615	AckNum: 22515	WindowSize = 1	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22630	AckNum: 22530	WindowSize = 2	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22645	AckNum: 22545	WindowSize = 3	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22660	AckNum: 22560	WindowSize = 4	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22675	AckNum: 22575	WindowSize = 5	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22690	AckNum: 22590	WindowSize = 6	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22705	AckNum: 22605	WindowSize = 7	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22720	AckNum: 22620	WindowSize = 8	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22735	AckNum: 22635	WindowSize = 9	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22750	AckNum: 22650	WindowSize = 10	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22765	AckNum: 22665	WindowSize = 11	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22780	AckNum: 22680	WindowSize = 12	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22795	AckNum: 22695	WindowSize = 13	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22810	AckNum: 22710	WindowSize = 14	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22825	AckNum: 22725	WindowSize = 15	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22515	AckNum: 22840	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22530	AckNum: 22855	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22545	AckNum: 22870	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22560	AckNum: 22885	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22575	AckNum: 22900	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22590	AckNum: 22915	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22605	AckNum: 22930	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22620	AckNum: 22945	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22635	AckNum: 22960	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22650	AckNum: 22975	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22665	AckNum: 22990	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22680	AckNum: 23005	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22695	AckNum: 23020	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22710	AckNum: 23035	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22725	AckNum: 23050	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22615	AckNum: 22515	WindowSize = 1	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22840	AckNum: 22740	WindowSize = 1	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22855	AckNum: 22755	WindowSize = 2	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22870	AckNum: 22770	WindowSize = 3	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22885	AckNum: 22785	WindowSize = 4	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22900	AckNum: 22800	WindowSize = 5	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22915	AckNum: 22815	WindowSize = 6	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22930	AckNum: 22830	WindowSize = 7	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22945	AckNum: 22845	WindowSize = 8	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22960	AckNum: 22860	WindowSize = 9	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22975	AckNum: 22875	WindowSize = 10	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22990	AckNum: 22890	WindowSize = 11	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23005	AckNum: 22905	WindowSize = 12	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23020	AckNum: 22920	WindowSize = 13	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23035	AckNum: 22935	WindowSize = 14	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23050	AckNum: 22950	WindowSize = 15	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22740	AckNum: 23065	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22755	AckNum: 23080	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22770	AckNum: 23095	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22785	AckNum: 23110	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22800	AckNum: 23125	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22815	AckNum: 23140	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22830	AckNum: 23155	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22845	AckNum: 23170	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22860	AckNum: 23185	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22875	AckNum: 23200	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22890	AckNum: 23215	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22905	AckNum: 23230	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22920	AckNum: 23245	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22935	AckNum: 23260	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22950	AckNum: 23275	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23065	AckNum: 22965	WindowSize = 1	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23080	AckNum: 22980	WindowSize = 2	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23095	AckNum: 22995	WindowSize = 3	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23110	AckNum: 23010	WindowSize = 4	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23125	AckNum: 23025	WindowSize = 5	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23140	AckNum: 23040	WindowSize = 6	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23155	AckNum: 23055	WindowSize = 7	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23170	AckNum: 23070	WindowSize = 8	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23185	AckNum: 23085	WindowSize = 9	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23200	AckNum: 23100	WindowSize = 10	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23215	AckNum: 23115	WindowSize = 11	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23230	AckNum: 23130	WindowSize = 12	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23245	AckNum: 23145	WindowSize = 13	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23260	AckNum: 23160	WindowSize = 14	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23275	AckNum: 23175	WindowSize = 15	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22965	AckNum: 23290	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22980	AckNum: 23305	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 22995	AckNum: 23320	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23010	AckNum: 23335	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23025	AckNum: 23350	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23040	AckNum: 23365	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23055	AckNum: 23380	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23070	AckNum: 23395	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23085	AckNum: 23410	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23100	AckNum: 23425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23115	AckNum: 23440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23130	AckNum: 23455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23145	AckNum: 23470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23160	AckNum: 23485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23175	AckNum: 23500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23065	AckNum: 22965	WindowSize = 1	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23080	AckNum: 22980	WindowSize = 2	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23095	AckNum: 22995	WindowSize = 3	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23110	AckNum: 23010	WindowSize = 4	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23290	AckNum: 23190	WindowSize = 1	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23305	AckNum: 23205	WindowSize = 2	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23320	AckNum: 23220	WindowSize = 3	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23335	AckNum: 23235	WindowSize = 4	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23350	AckNum: 23250	WindowSize = 5	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23365	AckNum: 23265	WindowSize = 6	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23380	AckNum: 23280	WindowSize = 7	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23395	AckNum: 23295	WindowSize = 8	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23410	AckNum: 23310	WindowSize = 9	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23425	AckNum: 23325	WindowSize = 10	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23440	AckNum: 23340	WindowSize = 11	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23455	AckNum: 23355	WindowSize = 12	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23470	AckNum: 23370	WindowSize = 13	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23485	AckNum: 23385	WindowSize = 14	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23500	AckNum: 23400	WindowSize = 15	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23190	AckNum: 23515	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23205	AckNum: 23530	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23220	AckNum: 23545	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23235	AckNum: 23560	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23250	AckNum: 23575	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23265	AckNum: 23590	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23280	AckNum: 23605	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23295	AckNum: 23620	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23310	AckNum: 23635	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23325	AckNum: 23650	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23340	AckNum: 23665	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23355	AckNum: 23680	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23370	AckNum: 23695	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23385	AckNum: 23710	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23400	AckNum: 23725	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23515	AckNum: 23415	WindowSize = 1	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23530	AckNum: 23430	WindowSize = 2	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23545	AckNum: 23445	WindowSize = 3	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23560	AckNum: 23460	WindowSize = 4	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23575	AckNum: 23475	WindowSize = 5	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23590	AckNum: 23490	WindowSize = 6	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23605	AckNum: 23505	WindowSize = 7	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23620	AckNum: 23520	WindowSize = 8	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23635	AckNum: 23535	WindowSize = 9	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23650	AckNum: 23550	WindowSize = 10	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23665	AckNum: 23565	WindowSize = 11	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23680	AckNum: 23580	WindowSize = 12	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23695	AckNum: 23595	WindowSize = 13	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23710	AckNum: 23610	WindowSize = 14	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23725	AckNum: 23625	WindowSize = 15	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23415	AckNum: 23740	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23430	AckNum: 23755	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23445	AckNum: 23770	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23460	AckNum: 23785	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23475	AckNum: 23800	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23490	AckNum: 23815	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23505	AckNum: 23830	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23520	AckNum: 23845	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23535	AckNum: 23860	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23550	AckNum: 23875	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23565	AckNum: 23890	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23580	AckNum: 23905	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23595	AckNum: 23920	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23610	AckNum: 23935	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23625	AckNum: 23950	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23740	AckNum: 23640	WindowSize = 1	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23755	AckNum: 23655	WindowSize = 2	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23770	AckNum: 23670	WindowSize = 3	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23785	AckNum: 23685	WindowSize = 4	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23800	AckNum: 23700	WindowSize = 5	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23815	AckNum: 23715	WindowSize = 6	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23830	AckNum: 23730	WindowSize = 7	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23845	AckNum: 23745	WindowSize = 8	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23860	AckNum: 23760	WindowSize = 9	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23875	AckNum: 23775	WindowSize = 10	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23890	AckNum: 23790	WindowSize = 11	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23905	AckNum: 23805	WindowSize = 12	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23920	AckNum: 23820	WindowSize = 13	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23935	AckNum: 23835	WindowSize = 14	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23950	AckNum: 23850	WindowSize = 15	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23640	AckNum: 23965	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23655	AckNum: 23980	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23670	AckNum: 23995	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23685	AckNum: 24010	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23700	AckNum: 24025	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23715	AckNum: 24040	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23730	AckNum: 24055	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23745	AckNum: 24070	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23760	AckNum: 24085	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23775	AckNum: 24100	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23790	AckNum: 24115	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23805	AckNum: 24130	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23820	AckNum: 24145	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23835	AckNum: 24160	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23850	AckNum: 24175	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23965	AckNum: 23865	WindowSize = 1	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23980	AckNum: 23880	WindowSize = 2	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23995	AckNum: 23895	WindowSize = 3	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24010	AckNum: 23910	WindowSize = 4	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24025	AckNum: 23925	WindowSize = 5	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24040	AckNum: 23940	WindowSize = 6	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24055	AckNum: 23955	WindowSize = 7	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24070	AckNum: 23970	WindowSize = 8	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24085	AckNum: 23985	WindowSize = 9	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24100	AckNum: 24000	WindowSize = 10	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24115	AckNum: 24015	WindowSize = 11	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24130	AckNum: 24030	WindowSize = 12	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24145	AckNum: 24045	WindowSize = 13	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24160	AckNum: 24060	WindowSize = 14	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24175	AckNum: 24075	WindowSize = 15	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23865	AckNum: 24190	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23880	AckNum: 24205	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23895	AckNum: 24220	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23910	AckNum: 24235	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23925	AckNum: 24250	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23940	AckNum: 24265	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23955	AckNum: 24280	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23970	AckNum: 24295	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 23985	AckNum: 24310	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24000	AckNum: 24325	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24015	AckNum: 24340	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24030	AckNum: 24355	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24045	AckNum: 24370	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24060	AckNum: 24385	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24075	AckNum: 24400	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23965	AckNum: 23865	WindowSize = 1	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23980	AckNum: 23880	WindowSize = 2	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24190	AckNum: 24090	WindowSize = 1	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24205	AckNum: 24105	WindowSize = 2	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24220	AckNum: 24120	WindowSize = 3	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24235	AckNum: 24135	WindowSize = 4	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24250	AckNum: 24150	WindowSize = 5	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24265	AckNum: 24165	WindowSize = 6	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24280	AckNum: 24180	WindowSize = 7	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24295	AckNum: 24195	WindowSize = 8	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24310	AckNum: 24210	WindowSize = 9	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24325	AckNum: 24225	WindowSize = 10	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24340	AckNum: 24240	WindowSize = 11	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24355	AckNum: 24255	WindowSize = 12	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24370	AckNum: 24270	WindowSize = 13	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24385	AckNum: 24285	WindowSize = 14	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24400	AckNum: 24300	WindowSize = 15	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24090	AckNum: 24415	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24105	AckNum: 24430	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24120	AckNum: 24445	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24135	AckNum: 24460	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24150	AckNum: 24475	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24165	AckNum: 24490	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24180	AckNum: 24505	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24195	AckNum: 24520	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24210	AckNum: 24535	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24225	AckNum: 24550	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24240	AckNum: 24565	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24255	AckNum: 24580	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24270	AckNum: 24595	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24285	AckNum: 24610	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24300	AckNum: 24625	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24190	AckNum: 24090	WindowSize = 1	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24205	AckNum: 24105	WindowSize = 2	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24415	AckNum: 24315	WindowSize = 1	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24430	AckNum: 24330	WindowSize = 2	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24445	AckNum: 24345	WindowSize = 3	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24460	AckNum: 24360	WindowSize = 4	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24475	AckNum: 24375	WindowSize = 5	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24490	AckNum: 24390	WindowSize = 6	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24505	AckNum: 24405	WindowSize = 7	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24520	AckNum: 24420	WindowSize = 8	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24535	AckNum: 24435	WindowSize = 9	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24550	AckNum: 24450	WindowSize = 10	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24565	AckNum: 24465	WindowSize = 11	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24580	AckNum: 24480	WindowSize = 12	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24595	AckNum: 24495	WindowSize = 13	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24610	AckNum: 24510	WindowSize = 14	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24625	AckNum: 24525	WindowSize = 15	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24315	AckNum: 24640	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24330	AckNum: 24655	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24345	AckNum: 24670	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24360	AckNum: 24685	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24375	AckNum: 24700	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24390	AckNum: 24715	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24405	AckNum: 24730	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24420	AckNum: 24745	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24435	AckNum: 24760	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24450	AckNum: 24775	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24465	AckNum: 24790	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24480	AckNum: 24805	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24495	AckNum: 24820	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24510	AckNum: 24835	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24525	AckNum: 24850	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24415	AckNum: 24315	WindowSize = 1	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24640	AckNum: 24540	WindowSize = 1	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24655	AckNum: 24555	WindowSize = 2	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24670	AckNum: 24570	WindowSize = 3	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24685	AckNum: 24585	WindowSize = 4	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24700	AckNum: 24600	WindowSize = 5	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24715	AckNum: 24615	WindowSize = 6	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24730	AckNum: 24630	WindowSize = 7	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24745	AckNum: 24645	WindowSize = 8	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24760	AckNum: 24660	WindowSize = 9	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24775	AckNum: 24675	WindowSize = 10	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24790	AckNum: 24690	WindowSize = 11	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24805	AckNum: 24705	WindowSize = 12	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24820	AckNum: 24720	WindowSize = 13	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24835	AckNum: 24735	WindowSize = 14	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24850	AckNum: 24750	WindowSize = 15	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24540	AckNum: 24865	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24555	AckNum: 24880	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24570	AckNum: 24895	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24585	AckNum: 24910	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24600	AckNum: 24925	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24615	AckNum: 24940	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24630	AckNum: 24955	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24645	AckNum: 24970	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24660	AckNum: 24985	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24675	AckNum: 25000	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24690	AckNum: 25015	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24705	AckNum: 25030	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24720	AckNum: 25045	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24735	AckNum: 25060	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24750	AckNum: 25075	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24865	AckNum: 24765	WindowSize = 1	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24880	AckNum: 24780	WindowSize = 2	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24895	AckNum: 24795	WindowSize = 3	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24910	AckNum: 24810	WindowSize = 4	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24925	AckNum: 24825	WindowSize = 5	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24940	AckNum: 24840	WindowSize = 6	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24955	AckNum: 24855	WindowSize = 7	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24970	AckNum: 24870	WindowSize = 8	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24985	AckNum: 24885	WindowSize = 9	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25000	AckNum: 24900	WindowSize = 10	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25015	AckNum: 24915	WindowSize = 11	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25030	AckNum: 24930	WindowSize = 12	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25045	AckNum: 24945	WindowSize = 13	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25060	AckNum: 24960	WindowSize = 14	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25075	AckNum: 24975	WindowSize = 15	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24765	AckNum: 25090	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24780	AckNum: 25105	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24795	AckNum: 25120	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24810	AckNum: 25135	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24825	AckNum: 25150	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24840	AckNum: 25165	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24855	AckNum: 25180	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24870	AckNum: 25195	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24885	AckNum: 25210	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24900	AckNum: 25225	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24915	AckNum: 25240	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24930	AckNum: 25255	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24945	AckNum: 25270	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24960	AckNum: 25285	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24975	AckNum: 25300	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24865	AckNum: 24765	WindowSize = 1	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24880	AckNum: 24780	WindowSize = 2	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24895	AckNum: 24795	WindowSize = 3	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25090	AckNum: 24990	WindowSize = 1	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25105	AckNum: 25005	WindowSize = 2	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25120	AckNum: 25020	WindowSize = 3	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25135	AckNum: 25035	WindowSize = 4	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25150	AckNum: 25050	WindowSize = 5	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25165	AckNum: 25065	WindowSize = 6	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25180	AckNum: 25080	WindowSize = 7	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25195	AckNum: 25095	WindowSize = 8	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25210	AckNum: 25110	WindowSize = 9	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25225	AckNum: 25125	WindowSize = 10	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25240	AckNum: 25140	WindowSize = 11	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25255	AckNum: 25155	WindowSize = 12	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25270	AckNum: 25170	WindowSize = 13	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25285	AckNum: 25185	WindowSize = 14	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25300	AckNum: 25200	WindowSize = 15	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 24990	AckNum: 25315	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25005	AckNum: 25330	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25020	AckNum: 25345	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25035	AckNum: 25360	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25050	AckNum: 25375	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25065	AckNum: 25390	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25080	AckNum: 25405	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25095	AckNum: 25420	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25110	AckNum: 25435	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25125	AckNum: 25450	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25140	AckNum: 25465	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25155	AckNum: 25480	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25170	AckNum: 25495	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25185	AckNum: 25510	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25200	AckNum: 25525	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25090	AckNum: 24990	WindowSize = 1	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25315	AckNum: 25215	WindowSize = 1	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25330	AckNum: 25230	WindowSize = 2	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25345	AckNum: 25245	WindowSize = 3	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25360	AckNum: 25260	WindowSize = 4	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25375	AckNum: 25275	WindowSize = 5	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25390	AckNum: 25290	WindowSize = 6	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25405	AckNum: 25305	WindowSize = 7	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25420	AckNum: 25320	WindowSize = 8	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25435	AckNum: 25335	WindowSize = 9	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25450	AckNum: 25350	WindowSize = 10	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25465	AckNum: 25365	WindowSize = 11	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25480	AckNum: 25380	WindowSize = 12	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25495	AckNum: 25395	WindowSize = 13	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25510	AckNum: 25410	WindowSize = 14	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25525	AckNum: 25425	WindowSize = 15	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25215	AckNum: 25540	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25230	AckNum: 25555	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25245	AckNum: 25570	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25260	AckNum: 25585	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25275	AckNum: 25600	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25290	AckNum: 25615	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25305	AckNum: 25630	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25320	AckNum: 25645	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25335	AckNum: 25660	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25350	AckNum: 25675	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25365	AckNum: 25690	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25380	AckNum: 25705	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25395	AckNum: 25720	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25410	AckNum: 25735	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25425	AckNum: 25750	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25315	AckNum: 25215	WindowSize = 1	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25330	AckNum: 25230	WindowSize = 2	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25540	AckNum: 25440	WindowSize = 1	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25555	AckNum: 25455	WindowSize = 2	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25570	AckNum: 25470	WindowSize = 3	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25585	AckNum: 25485	WindowSize = 4	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25600	AckNum: 25500	WindowSize = 5	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25615	AckNum: 25515	WindowSize = 6	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25630	AckNum: 25530	WindowSize = 7	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25645	AckNum: 25545	WindowSize = 8	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25660	AckNum: 25560	WindowSize = 9	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25675	AckNum: 25575	WindowSize = 10	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25690	AckNum: 25590	WindowSize = 11	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25705	AckNum: 25605	WindowSize = 12	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25720	AckNum: 25620	WindowSize = 13	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25735	AckNum: 25635	WindowSize = 14	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25750	AckNum: 25650	WindowSize = 15	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25440	AckNum: 25765	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25455	AckNum: 25780	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25470	AckNum: 25795	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25485	AckNum: 25810	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25500	AckNum: 25825	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25515	AckNum: 25840	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25530	AckNum: 25855	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25545	AckNum: 25870	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25560	AckNum: 25885	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25575	AckNum: 25900	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25590	AckNum: 25915	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25605	AckNum: 25930	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25620	AckNum: 25945	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25635	AckNum: 25960	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25650	AckNum: 25975	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25765	AckNum: 25665	WindowSize = 1	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25780	AckNum: 25680	WindowSize = 2	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25795	AckNum: 25695	WindowSize = 3	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25810	AckNum: 25710	WindowSize = 4	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25825	AckNum: 25725	WindowSize = 5	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25840	AckNum: 25740	WindowSize = 6	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25855	AckNum: 25755	WindowSize = 7	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25870	AckNum: 25770	WindowSize = 8	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25885	AckNum: 25785	WindowSize = 9	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25900	AckNum: 25800	WindowSize = 10	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25915	AckNum: 25815	WindowSize = 11	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25930	AckNum: 25830	WindowSize = 12	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25945	AckNum: 25845	WindowSize = 13	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25960	AckNum: 25860	WindowSize = 14	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25975	AckNum: 25875	WindowSize = 15	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25665	AckNum: 25990	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25680	AckNum: 26005	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25695	AckNum: 26020	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25710	AckNum: 26035	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25725	AckNum: 26050	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25740	AckNum: 26065	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25755	AckNum: 26080	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25770	AckNum: 26095	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25785	AckNum: 26110	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25800	AckNum: 26125	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25815	AckNum: 26140	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25830	AckNum: 26155	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25845	AckNum: 26170	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25860	AckNum: 26185	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25875	AckNum: 26200	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25990	AckNum: 25890	WindowSize = 1	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26005	AckNum: 25905	WindowSize = 2	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26020	AckNum: 25920	WindowSize = 3	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26035	AckNum: 25935	WindowSize = 4	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26050	AckNum: 25950	WindowSize = 5	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26065	AckNum: 25965	WindowSize = 6	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26080	AckNum: 25980	WindowSize = 7	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26095	AckNum: 25995	WindowSize = 8	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26110	AckNum: 26010	WindowSize = 9	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26125	AckNum: 26025	WindowSize = 10	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26140	AckNum: 26040	WindowSize = 11	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26155	AckNum: 26055	WindowSize = 12	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26170	AckNum: 26070	WindowSize = 13	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26185	AckNum: 26085	WindowSize = 14	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26200	AckNum: 26100	WindowSize = 15	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25890	AckNum: 26215	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25905	AckNum: 26230	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25920	AckNum: 26245	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25935	AckNum: 26260	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25950	AckNum: 26275	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25965	AckNum: 26290	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25980	AckNum: 26305	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 25995	AckNum: 26320	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26010	AckNum: 26335	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26025	AckNum: 26350	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26040	AckNum: 26365	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26055	AckNum: 26380	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26070	AckNum: 26395	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26085	AckNum: 26410	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26100	AckNum: 26425	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25990	AckNum: 25890	WindowSize = 1	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26215	AckNum: 26115	WindowSize = 1	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26230	AckNum: 26130	WindowSize = 2	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26245	AckNum: 26145	WindowSize = 3	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26260	AckNum: 26160	WindowSize = 4	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26275	AckNum: 26175	WindowSize = 5	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26290	AckNum: 26190	WindowSize = 6	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26305	AckNum: 26205	WindowSize = 7	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26320	AckNum: 26220	WindowSize = 8	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26335	AckNum: 26235	WindowSize = 9	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26350	AckNum: 26250	WindowSize = 10	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26365	AckNum: 26265	WindowSize = 11	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26380	AckNum: 26280	WindowSize = 12	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26395	AckNum: 26295	WindowSize = 13	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26410	AckNum: 26310	WindowSize = 14	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26425	AckNum: 26325	WindowSize = 15	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26115	AckNum: 26440	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26130	AckNum: 26455	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26145	AckNum: 26470	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26160	AckNum: 26485	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26175	AckNum: 26500	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26190	AckNum: 26515	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26205	AckNum: 26530	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26220	AckNum: 26545	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26235	AckNum: 26560	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26250	AckNum: 26575	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26265	AckNum: 26590	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26280	AckNum: 26605	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26295	AckNum: 26620	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26310	AckNum: 26635	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26325	AckNum: 26650	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26215	AckNum: 26115	WindowSize = 1	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26230	AckNum: 26130	WindowSize = 2	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26440	AckNum: 26340	WindowSize = 1	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26455	AckNum: 26355	WindowSize = 2	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26470	AckNum: 26370	WindowSize = 3	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26485	AckNum: 26385	WindowSize = 4	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26500	AckNum: 26400	WindowSize = 5	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26515	AckNum: 26415	WindowSize = 6	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26530	AckNum: 26430	WindowSize = 7	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26545	AckNum: 26445	WindowSize = 8	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26560	AckNum: 26460	WindowSize = 9	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26575	AckNum: 26475	WindowSize = 10	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26590	AckNum: 26490	WindowSize = 11	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26605	AckNum: 26505	WindowSize = 12	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26620	AckNum: 26520	WindowSize = 13	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26635	AckNum: 26535	WindowSize = 14	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26650	AckNum: 26550	WindowSize = 15	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26340	AckNum: 26665	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26355	AckNum: 26680	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26370	AckNum: 26695	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26385	AckNum: 26710	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26400	AckNum: 26725	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26415	AckNum: 26740	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26430	AckNum: 26755	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26445	AckNum: 26770	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26460	AckNum: 26785	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26475	AckNum: 26800	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26490	AckNum: 26815	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26505	AckNum: 26830	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26520	AckNum: 26845	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26535	AckNum: 26860	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26550	AckNum: 26875	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26665	AckNum: 26565	WindowSize = 1	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26680	AckNum: 26580	WindowSize = 2	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26695	AckNum: 26595	WindowSize = 3	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26710	AckNum: 26610	WindowSize = 4	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26725	AckNum: 26625	WindowSize = 5	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26740	AckNum: 26640	WindowSize = 6	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26755	AckNum: 26655	WindowSize = 7	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26770	AckNum: 26670	WindowSize = 8	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26785	AckNum: 26685	WindowSize = 9	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26800	AckNum: 26700	WindowSize = 10	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26815	AckNum: 26715	WindowSize = 11	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26830	AckNum: 26730	WindowSize = 12	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26845	AckNum: 26745	WindowSize = 13	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26860	AckNum: 26760	WindowSize = 14	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26875	AckNum: 26775	WindowSize = 15	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26565	AckNum: 26890	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26580	AckNum: 26905	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26595	AckNum: 26920	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26610	AckNum: 26935	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26625	AckNum: 26950	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26640	AckNum: 26965	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26655	AckNum: 26980	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26670	AckNum: 26995	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26685	AckNum: 27010	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26700	AckNum: 27025	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26715	AckNum: 27040	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26730	AckNum: 27055	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26745	AckNum: 27070	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26760	AckNum: 27085	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26775	AckNum: 27100	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26665	AckNum: 26565	WindowSize = 1	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26680	AckNum: 26580	WindowSize = 2	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26890	AckNum: 26790	WindowSize = 1	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26905	AckNum: 26805	WindowSize = 2	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26920	AckNum: 26820	WindowSize = 3	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26935	AckNum: 26835	WindowSize = 4	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26950	AckNum: 26850	WindowSize = 5	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26965	AckNum: 26865	WindowSize = 6	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26980	AckNum: 26880	WindowSize = 7	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26995	AckNum: 26895	WindowSize = 8	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27010	AckNum: 26910	WindowSize = 9	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27025	AckNum: 26925	WindowSize = 10	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27040	AckNum: 26940	WindowSize = 11	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27055	AckNum: 26955	WindowSize = 12	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27070	AckNum: 26970	WindowSize = 13	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27085	AckNum: 26985	WindowSize = 14	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27100	AckNum: 27000	WindowSize = 15	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26790	AckNum: 27115	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26805	AckNum: 27130	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26820	AckNum: 27145	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26835	AckNum: 27160	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26850	AckNum: 27175	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26865	AckNum: 27190	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26880	AckNum: 27205	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26895	AckNum: 27220	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26910	AckNum: 27235	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26925	AckNum: 27250	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26940	AckNum: 27265	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26955	AckNum: 27280	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26970	AckNum: 27295	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 26985	AckNum: 27310	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27000	AckNum: 27325	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26890	AckNum: 26790	WindowSize = 1	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26905	AckNum: 26805	WindowSize = 2	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26920	AckNum: 26820	WindowSize = 3	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26935	AckNum: 26835	WindowSize = 4	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27115	AckNum: 27015	WindowSize = 1	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27130	AckNum: 27030	WindowSize = 2	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27145	AckNum: 27045	WindowSize = 3	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27160	AckNum: 27060	WindowSize = 4	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27175	AckNum: 27075	WindowSize = 5	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27190	AckNum: 27090	WindowSize = 6	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27205	AckNum: 27105	WindowSize = 7	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27220	AckNum: 27120	WindowSize = 8	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27235	AckNum: 27135	WindowSize = 9	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27250	AckNum: 27150	WindowSize = 10	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27265	AckNum: 27165	WindowSize = 11	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27280	AckNum: 27180	WindowSize = 12	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27295	AckNum: 27195	WindowSize = 13	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27310	AckNum: 27210	WindowSize = 14	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27325	AckNum: 27225	WindowSize = 15	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27015	AckNum: 27340	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27030	AckNum: 27355	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27045	AckNum: 27370	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27060	AckNum: 27385	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27075	AckNum: 27400	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27090	AckNum: 27415	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27105	AckNum: 27430	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27120	AckNum: 27445	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27135	AckNum: 27460	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27150	AckNum: 27475	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27165	AckNum: 27490	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27180	AckNum: 27505	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27195	AckNum: 27520	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27210	AckNum: 27535	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27225	AckNum: 27550	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27340	AckNum: 27240	WindowSize = 1	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27355	AckNum: 27255	WindowSize = 2	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27370	AckNum: 27270	WindowSize = 3	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27385	AckNum: 27285	WindowSize = 4	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27400	AckNum: 27300	WindowSize = 5	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27415	AckNum: 27315	WindowSize = 6	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27430	AckNum: 27330	WindowSize = 7	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27445	AckNum: 27345	WindowSize = 8	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27460	AckNum: 27360	WindowSize = 9	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27475	AckNum: 27375	WindowSize = 10	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27490	AckNum: 27390	WindowSize = 11	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27505	AckNum: 27405	WindowSize = 12	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27520	AckNum: 27420	WindowSize = 13	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27535	AckNum: 27435	WindowSize = 14	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27550	AckNum: 27450	WindowSize = 15	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27240	AckNum: 27565	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27255	AckNum: 27580	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27270	AckNum: 27595	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27285	AckNum: 27610	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27300	AckNum: 27625	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27315	AckNum: 27640	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27330	AckNum: 27655	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27345	AckNum: 27670	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27360	AckNum: 27685	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27375	AckNum: 27700	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27390	AckNum: 27715	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27405	AckNum: 27730	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27420	AckNum: 27745	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27435	AckNum: 27760	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27450	AckNum: 27775	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27565	AckNum: 27465	WindowSize = 1	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27580	AckNum: 27480	WindowSize = 2	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27595	AckNum: 27495	WindowSize = 3	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27610	AckNum: 27510	WindowSize = 4	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27625	AckNum: 27525	WindowSize = 5	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27640	AckNum: 27540	WindowSize = 6	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27655	AckNum: 27555	WindowSize = 7	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27670	AckNum: 27570	WindowSize = 8	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27685	AckNum: 27585	WindowSize = 9	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27700	AckNum: 27600	WindowSize = 10	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27715	AckNum: 27615	WindowSize = 11	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27730	AckNum: 27630	WindowSize = 12	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27745	AckNum: 27645	WindowSize = 13	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27760	AckNum: 27660	WindowSize = 14	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27775	AckNum: 27675	WindowSize = 15	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27465	AckNum: 27790	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27480	AckNum: 27805	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27495	AckNum: 27820	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27510	AckNum: 27835	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27525	AckNum: 27850	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27540	AckNum: 27865	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27555	AckNum: 27880	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27570	AckNum: 27895	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27585	AckNum: 27910	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27600	AckNum: 27925	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27615	AckNum: 27940	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27630	AckNum: 27955	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27645	AckNum: 27970	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27660	AckNum: 27985	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27675	AckNum: 28000	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27565	AckNum: 27465	WindowSize = 1	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27580	AckNum: 27480	WindowSize = 2	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27595	AckNum: 27495	WindowSize = 3	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27610	AckNum: 27510	WindowSize = 4	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27625	AckNum: 27525	WindowSize = 5	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27640	AckNum: 27540	WindowSize = 6	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27655	AckNum: 27555	WindowSize = 7	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27670	AckNum: 27570	WindowSize = 8	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27685	AckNum: 27585	WindowSize = 9	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27790	AckNum: 27690	WindowSize = 1	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27805	AckNum: 27705	WindowSize = 2	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27820	AckNum: 27720	WindowSize = 3	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27835	AckNum: 27735	WindowSize = 4	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27850	AckNum: 27750	WindowSize = 5	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27865	AckNum: 27765	WindowSize = 6	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27880	AckNum: 27780	WindowSize = 7	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27895	AckNum: 27795	WindowSize = 8	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27910	AckNum: 27810	WindowSize = 9	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27925	AckNum: 27825	WindowSize = 10	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27940	AckNum: 27840	WindowSize = 11	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27955	AckNum: 27855	WindowSize = 12	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27970	AckNum: 27870	WindowSize = 13	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27985	AckNum: 27885	WindowSize = 14	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28000	AckNum: 27900	WindowSize = 15	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27690	AckNum: 28015	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27705	AckNum: 28030	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27720	AckNum: 28045	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27735	AckNum: 28060	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27750	AckNum: 28075	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27765	AckNum: 28090	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27780	AckNum: 28105	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27795	AckNum: 28120	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27810	AckNum: 28135	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27825	AckNum: 28150	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27840	AckNum: 28165	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27855	AckNum: 28180	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27870	AckNum: 28195	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27885	AckNum: 28210	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27900	AckNum: 28225	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27790	AckNum: 27690	WindowSize = 1	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28015	AckNum: 27915	WindowSize = 1	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28030	AckNum: 27930	WindowSize = 2	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28045	AckNum: 27945	WindowSize = 3	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28060	AckNum: 27960	WindowSize = 4	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28075	AckNum: 27975	WindowSize = 5	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28090	AckNum: 27990	WindowSize = 6	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28105	AckNum: 28005	WindowSize = 7	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28120	AckNum: 28020	WindowSize = 8	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28135	AckNum: 28035	WindowSize = 9	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28150	AckNum: 28050	WindowSize = 10	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28165	AckNum: 28065	WindowSize = 11	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28180	AckNum: 28080	WindowSize = 12	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28195	AckNum: 28095	WindowSize = 13	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28210	AckNum: 28110	WindowSize = 14	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28225	AckNum: 28125	WindowSize = 15	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27915	AckNum: 28240	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27930	AckNum: 28255	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27945	AckNum: 28270	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27960	AckNum: 28285	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27975	AckNum: 28300	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 27990	AckNum: 28315	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28005	AckNum: 28330	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28020	AckNum: 28345	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28035	AckNum: 28360	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28050	AckNum: 28375	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28065	AckNum: 28390	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28080	AckNum: 28405	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28095	AckNum: 28420	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28110	AckNum: 28435	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28125	AckNum: 28450	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28015	AckNum: 27915	WindowSize = 1	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28030	AckNum: 27930	WindowSize = 2	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28240	AckNum: 28140	WindowSize = 1	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28255	AckNum: 28155	WindowSize = 2	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28270	AckNum: 28170	WindowSize = 3	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28285	AckNum: 28185	WindowSize = 4	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28300	AckNum: 28200	WindowSize = 5	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28315	AckNum: 28215	WindowSize = 6	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28330	AckNum: 28230	WindowSize = 7	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28345	AckNum: 28245	WindowSize = 8	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28360	AckNum: 28260	WindowSize = 9	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28375	AckNum: 28275	WindowSize = 10	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28390	AckNum: 28290	WindowSize = 11	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28405	AckNum: 28305	WindowSize = 12	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28420	AckNum: 28320	WindowSize = 13	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28435	AckNum: 28335	WindowSize = 14	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28450	AckNum: 28350	WindowSize = 15	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28140	AckNum: 28465	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28155	AckNum: 28480	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28170	AckNum: 28495	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28185	AckNum: 28510	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28200	AckNum: 28525	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28215	AckNum: 28540	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28230	AckNum: 28555	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28245	AckNum: 28570	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28260	AckNum: 28585	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28275	AckNum: 28600	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28290	AckNum: 28615	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28305	AckNum: 28630	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28320	AckNum: 28645	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28335	AckNum: 28660	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28350	AckNum: 28675	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28240	AckNum: 28140	WindowSize = 1	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28465	AckNum: 28365	WindowSize = 1	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28480	AckNum: 28380	WindowSize = 2	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28495	AckNum: 28395	WindowSize = 3	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28510	AckNum: 28410	WindowSize = 4	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28525	AckNum: 28425	WindowSize = 5	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28540	AckNum: 28440	WindowSize = 6	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28555	AckNum: 28455	WindowSize = 7	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28570	AckNum: 28470	WindowSize = 8	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28585	AckNum: 28485	WindowSize = 9	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28600	AckNum: 28500	WindowSize = 10	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28615	AckNum: 28515	WindowSize = 11	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28630	AckNum: 28530	WindowSize = 12	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28645	AckNum: 28545	WindowSize = 13	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28660	AckNum: 28560	WindowSize = 14	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28675	AckNum: 28575	WindowSize = 15	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28365	AckNum: 28690	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28380	AckNum: 28705	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28395	AckNum: 28720	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28410	AckNum: 28735	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28425	AckNum: 28750	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28440	AckNum: 28765	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28455	AckNum: 28780	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28470	AckNum: 28795	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28485	AckNum: 28810	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28500	AckNum: 28825	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28515	AckNum: 28840	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28530	AckNum: 28855	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28545	AckNum: 28870	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28560	AckNum: 28885	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28575	AckNum: 28900	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28465	AckNum: 28365	WindowSize = 1	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28480	AckNum: 28380	WindowSize = 2	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28690	AckNum: 28590	WindowSize = 1	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28705	AckNum: 28605	WindowSize = 2	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28720	AckNum: 28620	WindowSize = 3	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28735	AckNum: 28635	WindowSize = 4	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28750	AckNum: 28650	WindowSize = 5	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28765	AckNum: 28665	WindowSize = 6	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28780	AckNum: 28680	WindowSize = 7	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28795	AckNum: 28695	WindowSize = 8	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28810	AckNum: 28710	WindowSize = 9	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28825	AckNum: 28725	WindowSize = 10	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28840	AckNum: 28740	WindowSize = 11	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28855	AckNum: 28755	WindowSize = 12	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28870	AckNum: 28770	WindowSize = 13	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28885	AckNum: 28785	WindowSize = 14	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28900	AckNum: 28800	WindowSize = 15	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28590	AckNum: 28915	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28605	AckNum: 28930	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28620	AckNum: 28945	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28635	AckNum: 28960	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28650	AckNum: 28975	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28665	AckNum: 28990	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28680	AckNum: 29005	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28695	AckNum: 29020	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28710	AckNum: 29035	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28725	AckNum: 29050	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28740	AckNum: 29065	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28755	AckNum: 29080	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28770	AckNum: 29095	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28785	AckNum: 29110	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28800	AckNum: 29125	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28690	AckNum: 28590	WindowSize = 1	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28705	AckNum: 28605	WindowSize = 2	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28720	AckNum: 28620	WindowSize = 3	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28735	AckNum: 28635	WindowSize = 4	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28915	AckNum: 28815	WindowSize = 1	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28930	AckNum: 28830	WindowSize = 2	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28945	AckNum: 28845	WindowSize = 3	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28960	AckNum: 28860	WindowSize = 4	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28975	AckNum: 28875	WindowSize = 5	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28990	AckNum: 28890	WindowSize = 6	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29005	AckNum: 28905	WindowSize = 7	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29020	AckNum: 28920	WindowSize = 8	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29035	AckNum: 28935	WindowSize = 9	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29050	AckNum: 28950	WindowSize = 10	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29065	AckNum: 28965	WindowSize = 11	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29080	AckNum: 28980	WindowSize = 12	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29095	AckNum: 28995	WindowSize = 13	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29110	AckNum: 29010	WindowSize = 14	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29125	AckNum: 29025	WindowSize = 15	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28815	AckNum: 29140	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28830	AckNum: 29155	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28845	AckNum: 29170	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28860	AckNum: 29185	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28875	AckNum: 29200	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28890	AckNum: 29215	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28905	AckNum: 29230	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28920	AckNum: 29245	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28935	AckNum: 29260	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28950	AckNum: 29275	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28965	AckNum: 29290	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28980	AckNum: 29305	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 28995	AckNum: 29320	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29010	AckNum: 29335	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29025	AckNum: 29350	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29140	AckNum: 29040	WindowSize = 1	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29155	AckNum: 29055	WindowSize = 2	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29170	AckNum: 29070	WindowSize = 3	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29185	AckNum: 29085	WindowSize = 4	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29200	AckNum: 29100	WindowSize = 5	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29215	AckNum: 29115	WindowSize = 6	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29230	AckNum: 29130	WindowSize = 7	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29245	AckNum: 29145	WindowSize = 8	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29260	AckNum: 29160	WindowSize = 9	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29275	AckNum: 29175	WindowSize = 10	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29290	AckNum: 29190	WindowSize = 11	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29305	AckNum: 29205	WindowSize = 12	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29320	AckNum: 29220	WindowSize = 13	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29335	AckNum: 29235	WindowSize = 14	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29350	AckNum: 29250	WindowSize = 15	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29040	AckNum: 29365	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29055	AckNum: 29380	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29070	AckNum: 29395	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29085	AckNum: 29410	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29100	AckNum: 29425	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29115	AckNum: 29440	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29130	AckNum: 29455	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29145	AckNum: 29470	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29160	AckNum: 29485	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29175	AckNum: 29500	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29190	AckNum: 29515	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29205	AckNum: 29530	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29220	AckNum: 29545	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29235	AckNum: 29560	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29250	AckNum: 29575	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29140	AckNum: 29040	WindowSize = 1	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29365	AckNum: 29265	WindowSize = 1	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29380	AckNum: 29280	WindowSize = 2	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29395	AckNum: 29295	WindowSize = 3	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29410	AckNum: 29310	WindowSize = 4	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29425	AckNum: 29325	WindowSize = 5	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29440	AckNum: 29340	WindowSize = 6	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29455	AckNum: 29355	WindowSize = 7	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29470	AckNum: 29370	WindowSize = 8	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29485	AckNum: 29385	WindowSize = 9	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29500	AckNum: 29400	WindowSize = 10	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29515	AckNum: 29415	WindowSize = 11	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29530	AckNum: 29430	WindowSize = 12	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29545	AckNum: 29445	WindowSize = 13	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29560	AckNum: 29460	WindowSize = 14	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29575	AckNum: 29475	WindowSize = 15	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29265	AckNum: 29590	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29280	AckNum: 29605	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29295	AckNum: 29620	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29310	AckNum: 29635	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29325	AckNum: 29650	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29340	AckNum: 29665	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29355	AckNum: 29680	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29370	AckNum: 29695	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29385	AckNum: 29710	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29400	AckNum: 29725	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29415	AckNum: 29740	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29430	AckNum: 29755	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29445	AckNum: 29770	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29460	AckNum: 29785	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29475	AckNum: 29800	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29590	AckNum: 29490	WindowSize = 1	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29605	AckNum: 29505	WindowSize = 2	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29620	AckNum: 29520	WindowSize = 3	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29635	AckNum: 29535	WindowSize = 4	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29650	AckNum: 29550	WindowSize = 5	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29665	AckNum: 29565	WindowSize = 6	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29680	AckNum: 29580	WindowSize = 7	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29695	AckNum: 29595	WindowSize = 8	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29710	AckNum: 29610	WindowSize = 9	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29725	AckNum: 29625	WindowSize = 10	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29740	AckNum: 29640	WindowSize = 11	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29755	AckNum: 29655	WindowSize = 12	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29770	AckNum: 29670	WindowSize = 13	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29785	AckNum: 29685	WindowSize = 14	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29800	AckNum: 29700	WindowSize = 15	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29490	AckNum: 29815	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29505	AckNum: 29830	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29520	AckNum: 29845	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29535	AckNum: 29860	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29550	AckNum: 29875	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29565	AckNum: 29890	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29580	AckNum: 29905	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29595	AckNum: 29920	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29610	AckNum: 29935	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29625	AckNum: 29950	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29640	AckNum: 29965	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29655	AckNum: 29980	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29670	AckNum: 29995	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29685	AckNum: 30010	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29700	AckNum: 30025	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29590	AckNum: 29490	WindowSize = 1	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29815	AckNum: 29715	WindowSize = 1	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29830	AckNum: 29730	WindowSize = 2	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29845	AckNum: 29745	WindowSize = 3	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29860	AckNum: 29760	WindowSize = 4	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29875	AckNum: 29775	WindowSize = 5	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29890	AckNum: 29790	WindowSize = 6	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29905	AckNum: 29805	WindowSize = 7	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29920	AckNum: 29820	WindowSize = 8	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29935	AckNum: 29835	WindowSize = 9	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29950	AckNum: 29850	WindowSize = 10	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29965	AckNum: 29865	WindowSize = 11	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29980	AckNum: 29880	WindowSize = 12	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29995	AckNum: 29895	WindowSize = 13	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30010	AckNum: 29910	WindowSize = 14	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30025	AckNum: 29925	WindowSize = 15	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29715	AckNum: 30040	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29730	AckNum: 30055	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29745	AckNum: 30070	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29760	AckNum: 30085	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29775	AckNum: 30100	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29790	AckNum: 30115	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29805	AckNum: 30130	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29820	AckNum: 30145	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29835	AckNum: 30160	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29850	AckNum: 30175	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29865	AckNum: 30190	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29880	AckNum: 30205	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29895	AckNum: 30220	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29910	AckNum: 30235	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29925	AckNum: 30250	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29815	AckNum: 29715	WindowSize = 1	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30040	AckNum: 29940	WindowSize = 1	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30055	AckNum: 29955	WindowSize = 2	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30070	AckNum: 29970	WindowSize = 3	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30085	AckNum: 29985	WindowSize = 4	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30100	AckNum: 30000	WindowSize = 5	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30115	AckNum: 30015	WindowSize = 6	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30130	AckNum: 30030	WindowSize = 7	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30145	AckNum: 30045	WindowSize = 8	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30160	AckNum: 30060	WindowSize = 9	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30175	AckNum: 30075	WindowSize = 10	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30190	AckNum: 30090	WindowSize = 11	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30205	AckNum: 30105	WindowSize = 12	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30220	AckNum: 30120	WindowSize = 13	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30235	AckNum: 30135	WindowSize = 14	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30250	AckNum: 30150	WindowSize = 15	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29940	AckNum: 30265	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29955	AckNum: 30280	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29970	AckNum: 30295	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 29985	AckNum: 30310	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30000	AckNum: 30325	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30015	AckNum: 30340	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30030	AckNum: 30355	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30045	AckNum: 30370	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30060	AckNum: 30385	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30075	AckNum: 30400	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30090	AckNum: 30415	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30105	AckNum: 30430	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30120	AckNum: 30445	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30135	AckNum: 30460	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30150	AckNum: 30475	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30265	AckNum: 30165	WindowSize = 1	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30280	AckNum: 30180	WindowSize = 2	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30295	AckNum: 30195	WindowSize = 3	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30310	AckNum: 30210	WindowSize = 4	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30325	AckNum: 30225	WindowSize = 5	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30340	AckNum: 30240	WindowSize = 6	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30355	AckNum: 30255	WindowSize = 7	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30370	AckNum: 30270	WindowSize = 8	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30385	AckNum: 30285	WindowSize = 9	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30400	AckNum: 30300	WindowSize = 10	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30415	AckNum: 30315	WindowSize = 11	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30430	AckNum: 30330	WindowSize = 12	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30445	AckNum: 30345	WindowSize = 13	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30460	AckNum: 30360	WindowSize = 14	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30475	AckNum: 30375	WindowSize = 15	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30165	AckNum: 30490	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30180	AckNum: 30505	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30195	AckNum: 30520	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30210	AckNum: 30535	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30225	AckNum: 30550	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30240	AckNum: 30565	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30255	AckNum: 30580	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30270	AckNum: 30595	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30285	AckNum: 30610	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30300	AckNum: 30625	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30315	AckNum: 30640	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30330	AckNum: 30655	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30345	AckNum: 30670	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30360	AckNum: 30685	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30375	AckNum: 30700	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30265	AckNum: 30165	WindowSize = 1	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30280	AckNum: 30180	WindowSize = 2	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30490	AckNum: 30390	WindowSize = 1	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30505	AckNum: 30405	WindowSize = 2	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30520	AckNum: 30420	WindowSize = 3	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30535	AckNum: 30435	WindowSize = 4	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30550	AckNum: 30450	WindowSize = 5	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30565	AckNum: 30465	WindowSize = 6	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30580	AckNum: 30480	WindowSize = 7	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30595	AckNum: 30495	WindowSize = 8	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30610	AckNum: 30510	WindowSize = 9	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30625	AckNum: 30525	WindowSize = 10	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30640	AckNum: 30540	WindowSize = 11	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30655	AckNum: 30555	WindowSize = 12	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30670	AckNum: 30570	WindowSize = 13	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30685	AckNum: 30585	WindowSize = 14	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30700	AckNum: 30600	WindowSize = 15	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30390	AckNum: 30715	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30405	AckNum: 30730	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30420	AckNum: 30745	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30435	AckNum: 30760	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30450	AckNum: 30775	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30465	AckNum: 30790	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30480	AckNum: 30805	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30495	AckNum: 30820	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30510	AckNum: 30835	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30525	AckNum: 30850	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30540	AckNum: 30865	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30555	AckNum: 30880	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30570	AckNum: 30895	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30585	AckNum: 30910	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30600	AckNum: 30925	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30490	AckNum: 30390	WindowSize = 1	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30715	AckNum: 30615	WindowSize = 1	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30730	AckNum: 30630	WindowSize = 2	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30745	AckNum: 30645	WindowSize = 3	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30760	AckNum: 30660	WindowSize = 4	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30775	AckNum: 30675	WindowSize = 5	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30790	AckNum: 30690	WindowSize = 6	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30805	AckNum: 30705	WindowSize = 7	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30820	AckNum: 30720	WindowSize = 8	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30835	AckNum: 30735	WindowSize = 9	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30850	AckNum: 30750	WindowSize = 10	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30865	AckNum: 30765	WindowSize = 11	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30880	AckNum: 30780	WindowSize = 12	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30895	AckNum: 30795	WindowSize = 13	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30910	AckNum: 30810	WindowSize = 14	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30925	AckNum: 30825	WindowSize = 15	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30615	AckNum: 30940	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30630	AckNum: 30955	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30645	AckNum: 30970	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30660	AckNum: 30985	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30675	AckNum: 31000	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30690	AckNum: 31015	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30705	AckNum: 31030	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30720	AckNum: 31045	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30735	AckNum: 31060	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30750	AckNum: 31075	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30765	AckNum: 31090	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30780	AckNum: 31105	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30795	AckNum: 31120	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30810	AckNum: 31135	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30825	AckNum: 31150	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30715	AckNum: 30615	WindowSize = 1	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30940	AckNum: 30840	WindowSize = 1	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30955	AckNum: 30855	WindowSize = 2	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30970	AckNum: 30870	WindowSize = 3	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30985	AckNum: 30885	WindowSize = 4	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31000	AckNum: 30900	WindowSize = 5	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31015	AckNum: 30915	WindowSize = 6	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31030	AckNum: 30930	WindowSize = 7	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31045	AckNum: 30945	WindowSize = 8	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31060	AckNum: 30960	WindowSize = 9	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31075	AckNum: 30975	WindowSize = 10	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31090	AckNum: 30990	WindowSize = 11	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31105	AckNum: 31005	WindowSize = 12	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31120	AckNum: 31020	WindowSize = 13	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31135	AckNum: 31035	WindowSize = 14	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31150	AckNum: 31050	WindowSize = 15	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30840	AckNum: 31165	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30855	AckNum: 31180	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30870	AckNum: 31195	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30885	AckNum: 31210	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30900	AckNum: 31225	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30915	AckNum: 31240	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30930	AckNum: 31255	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30945	AckNum: 31270	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30960	AckNum: 31285	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30975	AckNum: 31300	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 30990	AckNum: 31315	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31005	AckNum: 31330	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31020	AckNum: 31345	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31035	AckNum: 31360	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31050	AckNum: 31375	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30940	AckNum: 30840	WindowSize = 1	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30955	AckNum: 30855	WindowSize = 2	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30970	AckNum: 30870	WindowSize = 3	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30985	AckNum: 30885	WindowSize = 4	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31165	AckNum: 31065	WindowSize = 1	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31180	AckNum: 31080	WindowSize = 2	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31195	AckNum: 31095	WindowSize = 3	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31210	AckNum: 31110	WindowSize = 4	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31225	AckNum: 31125	WindowSize = 5	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31240	AckNum: 31140	WindowSize = 6	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31255	AckNum: 31155	WindowSize = 7	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31270	AckNum: 31170	WindowSize = 8	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31285	AckNum: 31185	WindowSize = 9	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31300	AckNum: 31200	WindowSize = 10	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31315	AckNum: 31215	WindowSize = 11	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31330	AckNum: 31230	WindowSize = 12	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31345	AckNum: 31245	WindowSize = 13	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31360	AckNum: 31260	WindowSize = 14	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31375	AckNum: 31275	WindowSize = 15	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31065	AckNum: 31390	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31080	AckNum: 31405	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31095	AckNum: 31420	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31110	AckNum: 31435	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31125	AckNum: 31450	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31140	AckNum: 31465	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31155	AckNum: 31480	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31170	AckNum: 31495	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31185	AckNum: 31510	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31200	AckNum: 31525	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31215	AckNum: 31540	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31230	AckNum: 31555	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31245	AckNum: 31570	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31260	AckNum: 31585	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31275	AckNum: 31600	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31390	AckNum: 31290	WindowSize = 1	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31405	AckNum: 31305	WindowSize = 2	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31420	AckNum: 31320	WindowSize = 3	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31435	AckNum: 31335	WindowSize = 4	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31450	AckNum: 31350	WindowSize = 5	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31465	AckNum: 31365	WindowSize = 6	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31480	AckNum: 31380	WindowSize = 7	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31495	AckNum: 31395	WindowSize = 8	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31510	AckNum: 31410	WindowSize = 9	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31525	AckNum: 31425	WindowSize = 10	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31540	AckNum: 31440	WindowSize = 11	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31555	AckNum: 31455	WindowSize = 12	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31570	AckNum: 31470	WindowSize = 13	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31585	AckNum: 31485	WindowSize = 14	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31600	AckNum: 31500	WindowSize = 15	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31290	AckNum: 31615	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31305	AckNum: 31630	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31320	AckNum: 31645	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31335	AckNum: 31660	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31350	AckNum: 31675	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31365	AckNum: 31690	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31380	AckNum: 31705	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31395	AckNum: 31720	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31410	AckNum: 31735	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31425	AckNum: 31750	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31440	AckNum: 31765	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31455	AckNum: 31780	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31470	AckNum: 31795	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31485	AckNum: 31810	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31500	AckNum: 31825	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31615	AckNum: 31515	WindowSize = 1	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31630	AckNum: 31530	WindowSize = 2	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31645	AckNum: 31545	WindowSize = 3	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31660	AckNum: 31560	WindowSize = 4	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31675	AckNum: 31575	WindowSize = 5	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31690	AckNum: 31590	WindowSize = 6	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31705	AckNum: 31605	WindowSize = 7	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31720	AckNum: 31620	WindowSize = 8	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31735	AckNum: 31635	WindowSize = 9	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31750	AckNum: 31650	WindowSize = 10	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31765	AckNum: 31665	WindowSize = 11	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31780	AckNum: 31680	WindowSize = 12	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31795	AckNum: 31695	WindowSize = 13	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31810	AckNum: 31710	WindowSize = 14	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31825	AckNum: 31725	WindowSize = 15	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31515	AckNum: 31840	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31530	AckNum: 31855	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31545	AckNum: 31870	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31560	AckNum: 31885	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31575	AckNum: 31900	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31590	AckNum: 31915	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31605	AckNum: 31930	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31620	AckNum: 31945	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31635	AckNum: 31960	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31650	AckNum: 31975	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31665	AckNum: 31990	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31680	AckNum: 32005	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31695	AckNum: 32020	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31710	AckNum: 32035	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31725	AckNum: 32050	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31615	AckNum: 31515	WindowSize = 1	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31630	AckNum: 31530	WindowSize = 2	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31840	AckNum: 31740	WindowSize = 1	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31855	AckNum: 31755	WindowSize = 2	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31870	AckNum: 31770	WindowSize = 3	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31885	AckNum: 31785	WindowSize = 4	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31900	AckNum: 31800	WindowSize = 5	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31915	AckNum: 31815	WindowSize = 6	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31930	AckNum: 31830	WindowSize = 7	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31945	AckNum: 31845	WindowSize = 8	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31960	AckNum: 31860	WindowSize = 9	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31975	AckNum: 31875	WindowSize = 10	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31990	AckNum: 31890	WindowSize = 11	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32005	AckNum: 31905	WindowSize = 12	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32020	AckNum: 31920	WindowSize = 13	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32035	AckNum: 31935	WindowSize = 14	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32050	AckNum: 31950	WindowSize = 15	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31740	AckNum: 32065	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31755	AckNum: 32080	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31770	AckNum: 32095	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31785	AckNum: 32110	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31800	AckNum: 32125	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31815	AckNum: 32140	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31830	AckNum: 32155	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31845	AckNum: 32170	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31860	AckNum: 32185	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31875	AckNum: 32200	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31890	AckNum: 32215	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31905	AckNum: 32230	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31920	AckNum: 32245	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31935	AckNum: 32260	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31950	AckNum: 32275	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32065	AckNum: 31965	WindowSize = 1	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32080	AckNum: 31980	WindowSize = 2	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32095	AckNum: 31995	WindowSize = 3	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32110	AckNum: 32010	WindowSize = 4	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32125	AckNum: 32025	WindowSize = 5	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32140	AckNum: 32040	WindowSize = 6	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32155	AckNum: 32055	WindowSize = 7	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32170	AckNum: 32070	WindowSize = 8	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32185	AckNum: 32085	WindowSize = 9	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32200	AckNum: 32100	WindowSize = 10	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32215	AckNum: 32115	WindowSize = 11	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32230	AckNum: 32130	WindowSize = 12	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32245	AckNum: 32145	WindowSize = 13	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32260	AckNum: 32160	WindowSize = 14	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32275	AckNum: 32175	WindowSize = 15	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31965	AckNum: 32290	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31980	AckNum: 32305	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 31995	AckNum: 32320	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32010	AckNum: 32335	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32025	AckNum: 32350	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32040	AckNum: 32365	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32055	AckNum: 32380	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32070	AckNum: 32395	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32085	AckNum: 32410	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32100	AckNum: 32425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32115	AckNum: 32440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32130	AckNum: 32455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32145	AckNum: 32470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32160	AckNum: 32485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32175	AckNum: 32500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32290	AckNum: 32190	WindowSize = 1	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32305	AckNum: 32205	WindowSize = 2	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32320	AckNum: 32220	WindowSize = 3	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32335	AckNum: 32235	WindowSize = 4	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32350	AckNum: 32250	WindowSize = 5	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32365	AckNum: 32265	WindowSize = 6	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32380	AckNum: 32280	WindowSize = 7	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32395	AckNum: 32295	WindowSize = 8	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32410	AckNum: 32310	WindowSize = 9	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n

 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32410	AckNum: 32310	WindowSize = 10	data: 
 Receive=>	Src = 127.0.0.1:61837		Dst = 127.0.0.1:16415		PacketType = EOT	SeqNum = 32425	AckNum: 0	WindowSize = 15	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32190	AckNum: 32515	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32205	AckNum: 32530	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32220	AckNum: 32545	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32235	AckNum: 32560	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32250	AckNum: 32575	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32265	AckNum: 32590	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32280	AckNum: 32605	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32295	AckNum: 32620	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32310	AckNum: 32635	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32100	AckNum: 32425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32115	AckNum: 32440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32130	AckNum: 32455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32145	AckNum: 32470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32160	AckNum: 32485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:61837		PacketType = ACK	SeqNum = 32175	AckNum: 32500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = SYN	SeqNum = 100	AckNum: 200	WindowSize = 2154	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = SYNACK	SeqNum = 200	AckNum: 115	WindowSize = 15	data: 
 Retransmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = SYNACK	SeqNum = 200	AckNum: 115	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 115	AckNum: 15	WindowSize = 1	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 130	AckNum: 30	WindowSize = 2	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 145	AckNum: 45	WindowSize = 3	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 160	AckNum: 60	WindowSize = 4	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 175	AckNum: 75	WindowSize = 5	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 190	AckNum: 90	WindowSize = 6	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 205	AckNum: 105	WindowSize = 7	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 220	AckNum: 120	WindowSize = 8	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 235	AckNum: 135	WindowSize = 9	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 250	AckNum: 150	WindowSize = 10	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 265	AckNum: 165	WindowSize = 11	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 280	AckNum: 180	WindowSize = 12	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 295	AckNum: 195	WindowSize = 13	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 310	AckNum: 210	WindowSize = 14	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 325	AckNum: 225	WindowSize = 15	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15	AckNum: 340	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30	AckNum: 355	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 45	AckNum: 370	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 60	AckNum: 385	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 75	AckNum: 400	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 90	AckNum: 415	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 105	AckNum: 430	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 120	AckNum: 445	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 135	AckNum: 460	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 150	AckNum: 475	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 165	AckNum: 490	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 180	AckNum: 505	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 195	AckNum: 520	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 210	AckNum: 535	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 225	AckNum: 550	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 115	AckNum: 15	WindowSize = 1	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 340	AckNum: 240	WindowSize = 1	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 355	AckNum: 255	WindowSize = 2	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 370	AckNum: 270	WindowSize = 3	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 385	AckNum: 285	WindowSize = 4	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 400	AckNum: 300	WindowSize = 5	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 415	AckNum: 315	WindowSize = 6	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 430	AckNum: 330	WindowSize = 7	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 445	AckNum: 345	WindowSize = 8	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 460	AckNum: 360	WindowSize = 9	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 475	AckNum: 375	WindowSize = 10	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 490	AckNum: 390	WindowSize = 11	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 505	AckNum: 405	WindowSize = 12	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 520	AckNum: 420	WindowSize = 13	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 535	AckNum: 435	WindowSize = 14	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 550	AckNum: 450	WindowSize = 15	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 240	AckNum: 565	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 255	AckNum: 580	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 270	AckNum: 595	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 285	AckNum: 610	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 300	AckNum: 625	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 315	AckNum: 640	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 330	AckNum: 655	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 345	AckNum: 670	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 360	AckNum: 685	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 375	AckNum: 700	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 390	AckNum: 715	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 405	AckNum: 730	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 420	AckNum: 745	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 435	AckNum: 760	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 450	AckNum: 775	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 565	AckNum: 465	WindowSize = 1	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 580	AckNum: 480	WindowSize = 2	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 595	AckNum: 495	WindowSize = 3	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 610	AckNum: 510	WindowSize = 4	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 625	AckNum: 525	WindowSize = 5	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 640	AckNum: 540	WindowSize = 6	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 655	AckNum: 555	WindowSize = 7	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 670	AckNum: 570	WindowSize = 8	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 685	AckNum: 585	WindowSize = 9	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 700	AckNum: 600	WindowSize = 10	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 715	AckNum: 615	WindowSize = 11	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 730	AckNum: 630	WindowSize = 12	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 745	AckNum: 645	WindowSize = 13	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 760	AckNum: 660	WindowSize = 14	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 775	AckNum: 675	WindowSize = 15	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 465	AckNum: 790	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 480	AckNum: 805	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 495	AckNum: 820	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 510	AckNum: 835	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 525	AckNum: 850	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 540	AckNum: 865	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 555	AckNum: 880	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 570	AckNum: 895	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 585	AckNum: 910	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 600	AckNum: 925	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 615	AckNum: 940	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 630	AckNum: 955	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 645	AckNum: 970	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 660	AckNum: 985	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 675	AckNum: 1000	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 790	AckNum: 690	WindowSize = 1	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 805	AckNum: 705	WindowSize = 2	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 820	AckNum: 720	WindowSize = 3	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 835	AckNum: 735	WindowSize = 4	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 850	AckNum: 750	WindowSize = 5	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 865	AckNum: 765	WindowSize = 6	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 880	AckNum: 780	WindowSize = 7	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 895	AckNum: 795	WindowSize = 8	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 910	AckNum: 810	WindowSize = 9	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 925	AckNum: 825	WindowSize = 10	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 940	AckNum: 840	WindowSize = 11	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 955	AckNum: 855	WindowSize = 12	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 970	AckNum: 870	WindowSize = 13	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 985	AckNum: 885	WindowSize = 14	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1000	AckNum: 900	WindowSize = 15	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 690	AckNum: 1015	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 705	AckNum: 1030	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 720	AckNum: 1045	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 735	AckNum: 1060	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 750	AckNum: 1075	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 765	AckNum: 1090	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 780	AckNum: 1105	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 795	AckNum: 1120	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 810	AckNum: 1135	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 825	AckNum: 1150	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 840	AckNum: 1165	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 855	AckNum: 1180	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 870	AckNum: 1195	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 885	AckNum: 1210	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 900	AckNum: 1225	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1015	AckNum: 915	WindowSize = 1	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1030	AckNum: 930	WindowSize = 2	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1045	AckNum: 945	WindowSize = 3	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1060	AckNum: 960	WindowSize = 4	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1075	AckNum: 975	WindowSize = 5	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1090	AckNum: 990	WindowSize = 6	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1105	AckNum: 1005	WindowSize = 7	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1120	AckNum: 1020	WindowSize = 8	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1135	AckNum: 1035	WindowSize = 9	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1150	AckNum: 1050	WindowSize = 10	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1165	AckNum: 1065	WindowSize = 11	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1180	AckNum: 1080	WindowSize = 12	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1195	AckNum: 1095	WindowSize = 13	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1210	AckNum: 1110	WindowSize = 14	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1225	AckNum: 1125	WindowSize = 15	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 915	AckNum: 1240	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 930	AckNum: 1255	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 945	AckNum: 1270	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 960	AckNum: 1285	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 975	AckNum: 1300	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 990	AckNum: 1315	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1005	AckNum: 1330	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1020	AckNum: 1345	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1035	AckNum: 1360	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1050	AckNum: 1375	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1065	AckNum: 1390	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1080	AckNum: 1405	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1095	AckNum: 1420	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1110	AckNum: 1435	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1125	AckNum: 1450	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1240	AckNum: 1140	WindowSize = 1	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1255	AckNum: 1155	WindowSize = 2	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1270	AckNum: 1170	WindowSize = 3	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1285	AckNum: 1185	WindowSize = 4	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1300	AckNum: 1200	WindowSize = 5	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1315	AckNum: 1215	WindowSize = 6	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1330	AckNum: 1230	WindowSize = 7	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1345	AckNum: 1245	WindowSize = 8	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1360	AckNum: 1260	WindowSize = 9	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1375	AckNum: 1275	WindowSize = 10	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1390	AckNum: 1290	WindowSize = 11	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1405	AckNum: 1305	WindowSize = 12	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1420	AckNum: 1320	WindowSize = 13	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1435	AckNum: 1335	WindowSize = 14	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1450	AckNum: 1350	WindowSize = 15	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1140	AckNum: 1465	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1155	AckNum: 1480	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1170	AckNum: 1495	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1185	AckNum: 1510	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1200	AckNum: 1525	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1215	AckNum: 1540	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1230	AckNum: 1555	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1245	AckNum: 1570	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1260	AckNum: 1585	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1275	AckNum: 1600	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1290	AckNum: 1615	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1305	AckNum: 1630	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1320	AckNum: 1645	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1335	AckNum: 1660	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1350	AckNum: 1675	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1240	AckNum: 1140	WindowSize = 1	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1465	AckNum: 1365	WindowSize = 1	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1480	AckNum: 1380	WindowSize = 2	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1495	AckNum: 1395	WindowSize = 3	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1510	AckNum: 1410	WindowSize = 4	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1525	AckNum: 1425	WindowSize = 5	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1540	AckNum: 1440	WindowSize = 6	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1555	AckNum: 1455	WindowSize = 7	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1570	AckNum: 1470	WindowSize = 8	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1585	AckNum: 1485	WindowSize = 9	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1600	AckNum: 1500	WindowSize = 10	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1615	AckNum: 1515	WindowSize = 11	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1630	AckNum: 1530	WindowSize = 12	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1645	AckNum: 1545	WindowSize = 13	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1660	AckNum: 1560	WindowSize = 14	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1675	AckNum: 1575	WindowSize = 15	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1365	AckNum: 1690	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1380	AckNum: 1705	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1395	AckNum: 1720	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1410	AckNum: 1735	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1425	AckNum: 1750	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1440	AckNum: 1765	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1455	AckNum: 1780	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1470	AckNum: 1795	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1485	AckNum: 1810	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1500	AckNum: 1825	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1515	AckNum: 1840	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1530	AckNum: 1855	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1545	AckNum: 1870	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1560	AckNum: 1885	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1575	AckNum: 1900	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1465	AckNum: 1365	WindowSize = 1	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1480	AckNum: 1380	WindowSize = 2	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1495	AckNum: 1395	WindowSize = 3	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1510	AckNum: 1410	WindowSize = 4	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1525	AckNum: 1425	WindowSize = 5	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1690	AckNum: 1590	WindowSize = 1	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1705	AckNum: 1605	WindowSize = 2	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1720	AckNum: 1620	WindowSize = 3	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1735	AckNum: 1635	WindowSize = 4	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1750	AckNum: 1650	WindowSize = 5	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1765	AckNum: 1665	WindowSize = 6	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1780	AckNum: 1680	WindowSize = 7	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1795	AckNum: 1695	WindowSize = 8	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1810	AckNum: 1710	WindowSize = 9	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1825	AckNum: 1725	WindowSize = 10	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1840	AckNum: 1740	WindowSize = 11	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1855	AckNum: 1755	WindowSize = 12	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1870	AckNum: 1770	WindowSize = 13	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1885	AckNum: 1785	WindowSize = 14	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1900	AckNum: 1800	WindowSize = 15	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1590	AckNum: 1915	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1605	AckNum: 1930	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1620	AckNum: 1945	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1635	AckNum: 1960	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1650	AckNum: 1975	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1665	AckNum: 1990	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1680	AckNum: 2005	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1695	AckNum: 2020	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1710	AckNum: 2035	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1725	AckNum: 2050	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1740	AckNum: 2065	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1755	AckNum: 2080	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1770	AckNum: 2095	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1785	AckNum: 2110	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1800	AckNum: 2125	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1690	AckNum: 1590	WindowSize = 1	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1705	AckNum: 1605	WindowSize = 2	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1915	AckNum: 1815	WindowSize = 1	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1930	AckNum: 1830	WindowSize = 2	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1945	AckNum: 1845	WindowSize = 3	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1960	AckNum: 1860	WindowSize = 4	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1975	AckNum: 1875	WindowSize = 5	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1990	AckNum: 1890	WindowSize = 6	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2005	AckNum: 1905	WindowSize = 7	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2020	AckNum: 1920	WindowSize = 8	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2035	AckNum: 1935	WindowSize = 9	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2050	AckNum: 1950	WindowSize = 10	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2065	AckNum: 1965	WindowSize = 11	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2080	AckNum: 1980	WindowSize = 12	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2095	AckNum: 1995	WindowSize = 13	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2110	AckNum: 2010	WindowSize = 14	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2125	AckNum: 2025	WindowSize = 15	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1815	AckNum: 2140	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1830	AckNum: 2155	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1845	AckNum: 2170	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1860	AckNum: 2185	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1875	AckNum: 2200	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1890	AckNum: 2215	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1905	AckNum: 2230	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1920	AckNum: 2245	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1935	AckNum: 2260	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1950	AckNum: 2275	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1965	AckNum: 2290	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1980	AckNum: 2305	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 1995	AckNum: 2320	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2010	AckNum: 2335	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2025	AckNum: 2350	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 1915	AckNum: 1815	WindowSize = 1	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2140	AckNum: 2040	WindowSize = 1	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2155	AckNum: 2055	WindowSize = 2	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2170	AckNum: 2070	WindowSize = 3	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2185	AckNum: 2085	WindowSize = 4	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2200	AckNum: 2100	WindowSize = 5	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2215	AckNum: 2115	WindowSize = 6	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2230	AckNum: 2130	WindowSize = 7	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2245	AckNum: 2145	WindowSize = 8	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2260	AckNum: 2160	WindowSize = 9	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2275	AckNum: 2175	WindowSize = 10	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2290	AckNum: 2190	WindowSize = 11	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2305	AckNum: 2205	WindowSize = 12	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2320	AckNum: 2220	WindowSize = 13	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2335	AckNum: 2235	WindowSize = 14	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2350	AckNum: 2250	WindowSize = 15	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2040	AckNum: 2365	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2055	AckNum: 2380	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2070	AckNum: 2395	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2085	AckNum: 2410	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2100	AckNum: 2425	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2115	AckNum: 2440	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2130	AckNum: 2455	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2145	AckNum: 2470	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2160	AckNum: 2485	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2175	AckNum: 2500	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2190	AckNum: 2515	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2205	AckNum: 2530	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2220	AckNum: 2545	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2235	AckNum: 2560	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2250	AckNum: 2575	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2365	AckNum: 2265	WindowSize = 1	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2380	AckNum: 2280	WindowSize = 2	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2395	AckNum: 2295	WindowSize = 3	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2410	AckNum: 2310	WindowSize = 4	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2425	AckNum: 2325	WindowSize = 5	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2440	AckNum: 2340	WindowSize = 6	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2455	AckNum: 2355	WindowSize = 7	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2470	AckNum: 2370	WindowSize = 8	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2485	AckNum: 2385	WindowSize = 9	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2500	AckNum: 2400	WindowSize = 10	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2515	AckNum: 2415	WindowSize = 11	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2530	AckNum: 2430	WindowSize = 12	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2545	AckNum: 2445	WindowSize = 13	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2560	AckNum: 2460	WindowSize = 14	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2575	AckNum: 2475	WindowSize = 15	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2265	AckNum: 2590	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2280	AckNum: 2605	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2295	AckNum: 2620	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2310	AckNum: 2635	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2325	AckNum: 2650	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2340	AckNum: 2665	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2355	AckNum: 2680	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2370	AckNum: 2695	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2385	AckNum: 2710	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2400	AckNum: 2725	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2415	AckNum: 2740	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2430	AckNum: 2755	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2445	AckNum: 2770	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2460	AckNum: 2785	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2475	AckNum: 2800	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2590	AckNum: 2490	WindowSize = 1	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2605	AckNum: 2505	WindowSize = 2	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2620	AckNum: 2520	WindowSize = 3	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2635	AckNum: 2535	WindowSize = 4	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2650	AckNum: 2550	WindowSize = 5	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2665	AckNum: 2565	WindowSize = 6	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2680	AckNum: 2580	WindowSize = 7	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2695	AckNum: 2595	WindowSize = 8	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2710	AckNum: 2610	WindowSize = 9	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2725	AckNum: 2625	WindowSize = 10	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2740	AckNum: 2640	WindowSize = 11	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2755	AckNum: 2655	WindowSize = 12	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2770	AckNum: 2670	WindowSize = 13	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2785	AckNum: 2685	WindowSize = 14	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2800	AckNum: 2700	WindowSize = 15	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2490	AckNum: 2815	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2505	AckNum: 2830	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2520	AckNum: 2845	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2535	AckNum: 2860	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2550	AckNum: 2875	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2565	AckNum: 2890	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2580	AckNum: 2905	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2595	AckNum: 2920	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2610	AckNum: 2935	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2625	AckNum: 2950	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2640	AckNum: 2965	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2655	AckNum: 2980	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2670	AckNum: 2995	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2685	AckNum: 3010	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2700	AckNum: 3025	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2815	AckNum: 2715	WindowSize = 1	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2830	AckNum: 2730	WindowSize = 2	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2845	AckNum: 2745	WindowSize = 3	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2860	AckNum: 2760	WindowSize = 4	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2875	AckNum: 2775	WindowSize = 5	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2890	AckNum: 2790	WindowSize = 6	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2905	AckNum: 2805	WindowSize = 7	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2920	AckNum: 2820	WindowSize = 8	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2935	AckNum: 2835	WindowSize = 9	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2950	AckNum: 2850	WindowSize = 10	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2965	AckNum: 2865	WindowSize = 11	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2980	AckNum: 2880	WindowSize = 12	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2995	AckNum: 2895	WindowSize = 13	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3010	AckNum: 2910	WindowSize = 14	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3025	AckNum: 2925	WindowSize = 15	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2715	AckNum: 3040	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2730	AckNum: 3055	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2745	AckNum: 3070	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2760	AckNum: 3085	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2775	AckNum: 3100	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2790	AckNum: 3115	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2805	AckNum: 3130	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2820	AckNum: 3145	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2835	AckNum: 3160	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2850	AckNum: 3175	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2865	AckNum: 3190	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2880	AckNum: 3205	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2895	AckNum: 3220	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2910	AckNum: 3235	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2925	AckNum: 3250	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2815	AckNum: 2715	WindowSize = 1	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2830	AckNum: 2730	WindowSize = 2	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2845	AckNum: 2745	WindowSize = 3	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2860	AckNum: 2760	WindowSize = 4	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2875	AckNum: 2775	WindowSize = 5	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2890	AckNum: 2790	WindowSize = 6	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 2905	AckNum: 2805	WindowSize = 7	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3040	AckNum: 2940	WindowSize = 1	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3055	AckNum: 2955	WindowSize = 2	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3070	AckNum: 2970	WindowSize = 3	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3085	AckNum: 2985	WindowSize = 4	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3100	AckNum: 3000	WindowSize = 5	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3115	AckNum: 3015	WindowSize = 6	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3130	AckNum: 3030	WindowSize = 7	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3145	AckNum: 3045	WindowSize = 8	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3160	AckNum: 3060	WindowSize = 9	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3175	AckNum: 3075	WindowSize = 10	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3190	AckNum: 3090	WindowSize = 11	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3205	AckNum: 3105	WindowSize = 12	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3220	AckNum: 3120	WindowSize = 13	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3235	AckNum: 3135	WindowSize = 14	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3250	AckNum: 3150	WindowSize = 15	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2940	AckNum: 3265	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2955	AckNum: 3280	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2970	AckNum: 3295	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 2985	AckNum: 3310	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3000	AckNum: 3325	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3015	AckNum: 3340	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3030	AckNum: 3355	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3045	AckNum: 3370	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3060	AckNum: 3385	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3075	AckNum: 3400	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3090	AckNum: 3415	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3105	AckNum: 3430	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3120	AckNum: 3445	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3135	AckNum: 3460	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3150	AckNum: 3475	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3040	AckNum: 2940	WindowSize = 1	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3055	AckNum: 2955	WindowSize = 2	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3070	AckNum: 2970	WindowSize = 3	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3265	AckNum: 3165	WindowSize = 1	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3280	AckNum: 3180	WindowSize = 2	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3295	AckNum: 3195	WindowSize = 3	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3310	AckNum: 3210	WindowSize = 4	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3325	AckNum: 3225	WindowSize = 5	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3340	AckNum: 3240	WindowSize = 6	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3355	AckNum: 3255	WindowSize = 7	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3370	AckNum: 3270	WindowSize = 8	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3385	AckNum: 3285	WindowSize = 9	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3400	AckNum: 3300	WindowSize = 10	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3415	AckNum: 3315	WindowSize = 11	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3430	AckNum: 3330	WindowSize = 12	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3445	AckNum: 3345	WindowSize = 13	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3460	AckNum: 3360	WindowSize = 14	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3475	AckNum: 3375	WindowSize = 15	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3165	AckNum: 3490	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3180	AckNum: 3505	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3195	AckNum: 3520	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3210	AckNum: 3535	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3225	AckNum: 3550	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3240	AckNum: 3565	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3255	AckNum: 3580	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3270	AckNum: 3595	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3285	AckNum: 3610	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3300	AckNum: 3625	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3315	AckNum: 3640	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3330	AckNum: 3655	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3345	AckNum: 3670	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3360	AckNum: 3685	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3375	AckNum: 3700	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3490	AckNum: 3390	WindowSize = 1	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3505	AckNum: 3405	WindowSize = 2	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3520	AckNum: 3420	WindowSize = 3	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3535	AckNum: 3435	WindowSize = 4	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3550	AckNum: 3450	WindowSize = 5	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3565	AckNum: 3465	WindowSize = 6	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3580	AckNum: 3480	WindowSize = 7	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3595	AckNum: 3495	WindowSize = 8	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3610	AckNum: 3510	WindowSize = 9	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3625	AckNum: 3525	WindowSize = 10	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3640	AckNum: 3540	WindowSize = 11	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3655	AckNum: 3555	WindowSize = 12	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3670	AckNum: 3570	WindowSize = 13	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3685	AckNum: 3585	WindowSize = 14	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3700	AckNum: 3600	WindowSize = 15	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3390	AckNum: 3715	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3405	AckNum: 3730	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3420	AckNum: 3745	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3435	AckNum: 3760	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3450	AckNum: 3775	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3465	AckNum: 3790	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3480	AckNum: 3805	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3495	AckNum: 3820	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3510	AckNum: 3835	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3525	AckNum: 3850	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3540	AckNum: 3865	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3555	AckNum: 3880	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3570	AckNum: 3895	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3585	AckNum: 3910	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3600	AckNum: 3925	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3715	AckNum: 3615	WindowSize = 1	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3730	AckNum: 3630	WindowSize = 2	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3745	AckNum: 3645	WindowSize = 3	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3760	AckNum: 3660	WindowSize = 4	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3775	AckNum: 3675	WindowSize = 5	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3790	AckNum: 3690	WindowSize = 6	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3805	AckNum: 3705	WindowSize = 7	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3820	AckNum: 3720	WindowSize = 8	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3835	AckNum: 3735	WindowSize = 9	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3850	AckNum: 3750	WindowSize = 10	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3865	AckNum: 3765	WindowSize = 11	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3880	AckNum: 3780	WindowSize = 12	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3895	AckNum: 3795	WindowSize = 13	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3910	AckNum: 3810	WindowSize = 14	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3925	AckNum: 3825	WindowSize = 15	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3615	AckNum: 3940	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3630	AckNum: 3955	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3645	AckNum: 3970	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3660	AckNum: 3985	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3675	AckNum: 4000	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3690	AckNum: 4015	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3705	AckNum: 4030	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3720	AckNum: 4045	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3735	AckNum: 4060	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3750	AckNum: 4075	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3765	AckNum: 4090	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3780	AckNum: 4105	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3795	AckNum: 4120	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3810	AckNum: 4135	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3825	AckNum: 4150	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3715	AckNum: 3615	WindowSize = 1	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3940	AckNum: 3840	WindowSize = 1	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3955	AckNum: 3855	WindowSize = 2	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3970	AckNum: 3870	WindowSize = 3	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3985	AckNum: 3885	WindowSize = 4	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4000	AckNum: 3900	WindowSize = 5	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4015	AckNum: 3915	WindowSize = 6	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4030	AckNum: 3930	WindowSize = 7	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4045	AckNum: 3945	WindowSize = 8	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4060	AckNum: 3960	WindowSize = 9	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4075	AckNum: 3975	WindowSize = 10	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4090	AckNum: 3990	WindowSize = 11	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4105	AckNum: 4005	WindowSize = 12	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4120	AckNum: 4020	WindowSize = 13	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4135	AckNum: 4035	WindowSize = 14	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4150	AckNum: 4050	WindowSize = 15	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3840	AckNum: 4165	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3855	AckNum: 4180	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3870	AckNum: 4195	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3885	AckNum: 4210	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3900	AckNum: 4225	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3915	AckNum: 4240	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3930	AckNum: 4255	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3945	AckNum: 4270	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3960	AckNum: 4285	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3975	AckNum: 4300	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 3990	AckNum: 4315	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4005	AckNum: 4330	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4020	AckNum: 4345	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4035	AckNum: 4360	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4050	AckNum: 4375	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3940	AckNum: 3840	WindowSize = 1	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 3955	AckNum: 3855	WindowSize = 2	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4165	AckNum: 4065	WindowSize = 1	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4180	AckNum: 4080	WindowSize = 2	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4195	AckNum: 4095	WindowSize = 3	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4210	AckNum: 4110	WindowSize = 4	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4225	AckNum: 4125	WindowSize = 5	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4240	AckNum: 4140	WindowSize = 6	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4255	AckNum: 4155	WindowSize = 7	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4270	AckNum: 4170	WindowSize = 8	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4285	AckNum: 4185	WindowSize = 9	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4300	AckNum: 4200	WindowSize = 10	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4315	AckNum: 4215	WindowSize = 11	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4330	AckNum: 4230	WindowSize = 12	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4345	AckNum: 4245	WindowSize = 13	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4360	AckNum: 4260	WindowSize = 14	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4375	AckNum: 4275	WindowSize = 15	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4065	AckNum: 4390	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4080	AckNum: 4405	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4095	AckNum: 4420	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4110	AckNum: 4435	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4125	AckNum: 4450	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4140	AckNum: 4465	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4155	AckNum: 4480	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4170	AckNum: 4495	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4185	AckNum: 4510	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4200	AckNum: 4525	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4215	AckNum: 4540	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4230	AckNum: 4555	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4245	AckNum: 4570	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4260	AckNum: 4585	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4275	AckNum: 4600	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4390	AckNum: 4290	WindowSize = 1	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4405	AckNum: 4305	WindowSize = 2	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4420	AckNum: 4320	WindowSize = 3	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4435	AckNum: 4335	WindowSize = 4	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4450	AckNum: 4350	WindowSize = 5	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4465	AckNum: 4365	WindowSize = 6	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4480	AckNum: 4380	WindowSize = 7	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4495	AckNum: 4395	WindowSize = 8	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4510	AckNum: 4410	WindowSize = 9	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4525	AckNum: 4425	WindowSize = 10	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4540	AckNum: 4440	WindowSize = 11	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4555	AckNum: 4455	WindowSize = 12	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4570	AckNum: 4470	WindowSize = 13	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4585	AckNum: 4485	WindowSize = 14	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4600	AckNum: 4500	WindowSize = 15	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4290	AckNum: 4615	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4305	AckNum: 4630	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4320	AckNum: 4645	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4335	AckNum: 4660	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4350	AckNum: 4675	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4365	AckNum: 4690	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4380	AckNum: 4705	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4395	AckNum: 4720	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4410	AckNum: 4735	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4425	AckNum: 4750	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4440	AckNum: 4765	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4455	AckNum: 4780	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4470	AckNum: 4795	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4485	AckNum: 4810	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4500	AckNum: 4825	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4390	AckNum: 4290	WindowSize = 1	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4615	AckNum: 4515	WindowSize = 1	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4630	AckNum: 4530	WindowSize = 2	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4645	AckNum: 4545	WindowSize = 3	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4660	AckNum: 4560	WindowSize = 4	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4675	AckNum: 4575	WindowSize = 5	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4690	AckNum: 4590	WindowSize = 6	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4705	AckNum: 4605	WindowSize = 7	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4720	AckNum: 4620	WindowSize = 8	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4735	AckNum: 4635	WindowSize = 9	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4750	AckNum: 4650	WindowSize = 10	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4765	AckNum: 4665	WindowSize = 11	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4780	AckNum: 4680	WindowSize = 12	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4795	AckNum: 4695	WindowSize = 13	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4810	AckNum: 4710	WindowSize = 14	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4825	AckNum: 4725	WindowSize = 15	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4515	AckNum: 4840	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4530	AckNum: 4855	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4545	AckNum: 4870	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4560	AckNum: 4885	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4575	AckNum: 4900	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4590	AckNum: 4915	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4605	AckNum: 4930	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4620	AckNum: 4945	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4635	AckNum: 4960	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4650	AckNum: 4975	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4665	AckNum: 4990	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4680	AckNum: 5005	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4695	AckNum: 5020	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4710	AckNum: 5035	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4725	AckNum: 5050	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4615	AckNum: 4515	WindowSize = 1	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4630	AckNum: 4530	WindowSize = 2	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4645	AckNum: 4545	WindowSize = 3	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4840	AckNum: 4740	WindowSize = 1	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4855	AckNum: 4755	WindowSize = 2	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4870	AckNum: 4770	WindowSize = 3	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4885	AckNum: 4785	WindowSize = 4	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4900	AckNum: 4800	WindowSize = 5	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4915	AckNum: 4815	WindowSize = 6	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4930	AckNum: 4830	WindowSize = 7	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4945	AckNum: 4845	WindowSize = 8	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4960	AckNum: 4860	WindowSize = 9	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4975	AckNum: 4875	WindowSize = 10	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 4990	AckNum: 4890	WindowSize = 11	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5005	AckNum: 4905	WindowSize = 12	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5020	AckNum: 4920	WindowSize = 13	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5035	AckNum: 4935	WindowSize = 14	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5050	AckNum: 4950	WindowSize = 15	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4740	AckNum: 5065	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4755	AckNum: 5080	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4770	AckNum: 5095	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4785	AckNum: 5110	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4800	AckNum: 5125	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4815	AckNum: 5140	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4830	AckNum: 5155	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4845	AckNum: 5170	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4860	AckNum: 5185	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4875	AckNum: 5200	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4890	AckNum: 5215	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4905	AckNum: 5230	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4920	AckNum: 5245	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4935	AckNum: 5260	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4950	AckNum: 5275	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5065	AckNum: 4965	WindowSize = 1	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5080	AckNum: 4980	WindowSize = 2	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5095	AckNum: 4995	WindowSize = 3	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5110	AckNum: 5010	WindowSize = 4	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5125	AckNum: 5025	WindowSize = 5	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5140	AckNum: 5040	WindowSize = 6	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5155	AckNum: 5055	WindowSize = 7	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5170	AckNum: 5070	WindowSize = 8	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5185	AckNum: 5085	WindowSize = 9	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5200	AckNum: 5100	WindowSize = 10	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5215	AckNum: 5115	WindowSize = 11	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5230	AckNum: 5130	WindowSize = 12	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5245	AckNum: 5145	WindowSize = 13	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5260	AckNum: 5160	WindowSize = 14	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5275	AckNum: 5175	WindowSize = 15	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4965	AckNum: 5290	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4980	AckNum: 5305	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 4995	AckNum: 5320	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5010	AckNum: 5335	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5025	AckNum: 5350	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5040	AckNum: 5365	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5055	AckNum: 5380	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5070	AckNum: 5395	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5085	AckNum: 5410	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5100	AckNum: 5425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5115	AckNum: 5440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5130	AckNum: 5455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5145	AckNum: 5470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5160	AckNum: 5485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5175	AckNum: 5500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5065	AckNum: 4965	WindowSize = 1	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5290	AckNum: 5190	WindowSize = 1	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5305	AckNum: 5205	WindowSize = 2	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5320	AckNum: 5220	WindowSize = 3	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5335	AckNum: 5235	WindowSize = 4	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5350	AckNum: 5250	WindowSize = 5	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5365	AckNum: 5265	WindowSize = 6	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5380	AckNum: 5280	WindowSize = 7	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5395	AckNum: 5295	WindowSize = 8	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5410	AckNum: 5310	WindowSize = 9	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5425	AckNum: 5325	WindowSize = 10	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5440	AckNum: 5340	WindowSize = 11	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5455	AckNum: 5355	WindowSize = 12	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5470	AckNum: 5370	WindowSize = 13	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5485	AckNum: 5385	WindowSize = 14	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5500	AckNum: 5400	WindowSize = 15	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5190	AckNum: 5515	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5205	AckNum: 5530	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5220	AckNum: 5545	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5235	AckNum: 5560	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5250	AckNum: 5575	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5265	AckNum: 5590	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5280	AckNum: 5605	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5295	AckNum: 5620	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5310	AckNum: 5635	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5325	AckNum: 5650	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5340	AckNum: 5665	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5355	AckNum: 5680	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5370	AckNum: 5695	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5385	AckNum: 5710	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5400	AckNum: 5725	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5515	AckNum: 5415	WindowSize = 1	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5530	AckNum: 5430	WindowSize = 2	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5545	AckNum: 5445	WindowSize = 3	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5560	AckNum: 5460	WindowSize = 4	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5575	AckNum: 5475	WindowSize = 5	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5590	AckNum: 5490	WindowSize = 6	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5605	AckNum: 5505	WindowSize = 7	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5620	AckNum: 5520	WindowSize = 8	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5635	AckNum: 5535	WindowSize = 9	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5650	AckNum: 5550	WindowSize = 10	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5665	AckNum: 5565	WindowSize = 11	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5680	AckNum: 5580	WindowSize = 12	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5695	AckNum: 5595	WindowSize = 13	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5710	AckNum: 5610	WindowSize = 14	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5725	AckNum: 5625	WindowSize = 15	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5415	AckNum: 5740	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5430	AckNum: 5755	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5445	AckNum: 5770	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5460	AckNum: 5785	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5475	AckNum: 5800	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5490	AckNum: 5815	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5505	AckNum: 5830	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5520	AckNum: 5845	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5535	AckNum: 5860	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5550	AckNum: 5875	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5565	AckNum: 5890	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5580	AckNum: 5905	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5595	AckNum: 5920	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5610	AckNum: 5935	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5625	AckNum: 5950	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5515	AckNum: 5415	WindowSize = 1	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5530	AckNum: 5430	WindowSize = 2	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5545	AckNum: 5445	WindowSize = 3	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5560	AckNum: 5460	WindowSize = 4	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5740	AckNum: 5640	WindowSize = 1	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5755	AckNum: 5655	WindowSize = 2	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5770	AckNum: 5670	WindowSize = 3	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5785	AckNum: 5685	WindowSize = 4	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5800	AckNum: 5700	WindowSize = 5	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5815	AckNum: 5715	WindowSize = 6	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5830	AckNum: 5730	WindowSize = 7	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5845	AckNum: 5745	WindowSize = 8	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5860	AckNum: 5760	WindowSize = 9	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5875	AckNum: 5775	WindowSize = 10	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5890	AckNum: 5790	WindowSize = 11	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5905	AckNum: 5805	WindowSize = 12	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5920	AckNum: 5820	WindowSize = 13	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5935	AckNum: 5835	WindowSize = 14	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5950	AckNum: 5850	WindowSize = 15	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5640	AckNum: 5965	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5655	AckNum: 5980	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5670	AckNum: 5995	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5685	AckNum: 6010	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5700	AckNum: 6025	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5715	AckNum: 6040	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5730	AckNum: 6055	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5745	AckNum: 6070	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5760	AckNum: 6085	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5775	AckNum: 6100	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5790	AckNum: 6115	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5805	AckNum: 6130	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5820	AckNum: 6145	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5835	AckNum: 6160	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5850	AckNum: 6175	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5965	AckNum: 5865	WindowSize = 1	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5980	AckNum: 5880	WindowSize = 2	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5995	AckNum: 5895	WindowSize = 3	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6010	AckNum: 5910	WindowSize = 4	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6025	AckNum: 5925	WindowSize = 5	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6040	AckNum: 5940	WindowSize = 6	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6055	AckNum: 5955	WindowSize = 7	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6070	AckNum: 5970	WindowSize = 8	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6085	AckNum: 5985	WindowSize = 9	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6100	AckNum: 6000	WindowSize = 10	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6115	AckNum: 6015	WindowSize = 11	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6130	AckNum: 6030	WindowSize = 12	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6145	AckNum: 6045	WindowSize = 13	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6160	AckNum: 6060	WindowSize = 14	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6175	AckNum: 6075	WindowSize = 15	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5865	AckNum: 6190	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5880	AckNum: 6205	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5895	AckNum: 6220	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5910	AckNum: 6235	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5925	AckNum: 6250	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5940	AckNum: 6265	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5955	AckNum: 6280	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5970	AckNum: 6295	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 5985	AckNum: 6310	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6000	AckNum: 6325	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6015	AckNum: 6340	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6030	AckNum: 6355	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6045	AckNum: 6370	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6060	AckNum: 6385	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6075	AckNum: 6400	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 5965	AckNum: 5865	WindowSize = 1	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6190	AckNum: 6090	WindowSize = 1	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6205	AckNum: 6105	WindowSize = 2	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6220	AckNum: 6120	WindowSize = 3	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6235	AckNum: 6135	WindowSize = 4	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6250	AckNum: 6150	WindowSize = 5	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6265	AckNum: 6165	WindowSize = 6	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6280	AckNum: 6180	WindowSize = 7	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6295	AckNum: 6195	WindowSize = 8	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6310	AckNum: 6210	WindowSize = 9	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6325	AckNum: 6225	WindowSize = 10	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6340	AckNum: 6240	WindowSize = 11	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6355	AckNum: 6255	WindowSize = 12	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6370	AckNum: 6270	WindowSize = 13	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6385	AckNum: 6285	WindowSize = 14	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6400	AckNum: 6300	WindowSize = 15	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6090	AckNum: 6415	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6105	AckNum: 6430	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6120	AckNum: 6445	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6135	AckNum: 6460	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6150	AckNum: 6475	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6165	AckNum: 6490	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6180	AckNum: 6505	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6195	AckNum: 6520	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6210	AckNum: 6535	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6225	AckNum: 6550	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6240	AckNum: 6565	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6255	AckNum: 6580	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6270	AckNum: 6595	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6285	AckNum: 6610	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6300	AckNum: 6625	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6415	AckNum: 6315	WindowSize = 1	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6430	AckNum: 6330	WindowSize = 2	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6445	AckNum: 6345	WindowSize = 3	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6460	AckNum: 6360	WindowSize = 4	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6475	AckNum: 6375	WindowSize = 5	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6490	AckNum: 6390	WindowSize = 6	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6505	AckNum: 6405	WindowSize = 7	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6520	AckNum: 6420	WindowSize = 8	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6535	AckNum: 6435	WindowSize = 9	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6550	AckNum: 6450	WindowSize = 10	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6565	AckNum: 6465	WindowSize = 11	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6580	AckNum: 6480	WindowSize = 12	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6595	AckNum: 6495	WindowSize = 13	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6610	AckNum: 6510	WindowSize = 14	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6625	AckNum: 6525	WindowSize = 15	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6315	AckNum: 6640	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6330	AckNum: 6655	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6345	AckNum: 6670	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6360	AckNum: 6685	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6375	AckNum: 6700	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6390	AckNum: 6715	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6405	AckNum: 6730	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6420	AckNum: 6745	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6435	AckNum: 6760	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6450	AckNum: 6775	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6465	AckNum: 6790	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6480	AckNum: 6805	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6495	AckNum: 6820	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6510	AckNum: 6835	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6525	AckNum: 6850	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6415	AckNum: 6315	WindowSize = 1	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6640	AckNum: 6540	WindowSize = 1	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6655	AckNum: 6555	WindowSize = 2	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6670	AckNum: 6570	WindowSize = 3	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6685	AckNum: 6585	WindowSize = 4	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6700	AckNum: 6600	WindowSize = 5	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6715	AckNum: 6615	WindowSize = 6	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6730	AckNum: 6630	WindowSize = 7	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6745	AckNum: 6645	WindowSize = 8	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6760	AckNum: 6660	WindowSize = 9	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6775	AckNum: 6675	WindowSize = 10	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6790	AckNum: 6690	WindowSize = 11	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6805	AckNum: 6705	WindowSize = 12	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6820	AckNum: 6720	WindowSize = 13	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6835	AckNum: 6735	WindowSize = 14	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6850	AckNum: 6750	WindowSize = 15	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6540	AckNum: 6865	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6555	AckNum: 6880	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6570	AckNum: 6895	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6585	AckNum: 6910	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6600	AckNum: 6925	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6615	AckNum: 6940	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6630	AckNum: 6955	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6645	AckNum: 6970	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6660	AckNum: 6985	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6675	AckNum: 7000	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6690	AckNum: 7015	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6705	AckNum: 7030	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6720	AckNum: 7045	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6735	AckNum: 7060	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6750	AckNum: 7075	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6640	AckNum: 6540	WindowSize = 1	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6865	AckNum: 6765	WindowSize = 1	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6880	AckNum: 6780	WindowSize = 2	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6895	AckNum: 6795	WindowSize = 3	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6910	AckNum: 6810	WindowSize = 4	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6925	AckNum: 6825	WindowSize = 5	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6940	AckNum: 6840	WindowSize = 6	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6955	AckNum: 6855	WindowSize = 7	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6970	AckNum: 6870	WindowSize = 8	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 6985	AckNum: 6885	WindowSize = 9	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7000	AckNum: 6900	WindowSize = 10	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7015	AckNum: 6915	WindowSize = 11	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7030	AckNum: 6930	WindowSize = 12	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7045	AckNum: 6945	WindowSize = 13	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7060	AckNum: 6960	WindowSize = 14	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7075	AckNum: 6975	WindowSize = 15	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6765	AckNum: 7090	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6780	AckNum: 7105	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6795	AckNum: 7120	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6810	AckNum: 7135	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6825	AckNum: 7150	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6840	AckNum: 7165	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6855	AckNum: 7180	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6870	AckNum: 7195	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6885	AckNum: 7210	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6900	AckNum: 7225	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6915	AckNum: 7240	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6930	AckNum: 7255	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6945	AckNum: 7270	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6960	AckNum: 7285	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6975	AckNum: 7300	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7090	AckNum: 6990	WindowSize = 1	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7105	AckNum: 7005	WindowSize = 2	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7120	AckNum: 7020	WindowSize = 3	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7135	AckNum: 7035	WindowSize = 4	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7150	AckNum: 7050	WindowSize = 5	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7165	AckNum: 7065	WindowSize = 6	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7180	AckNum: 7080	WindowSize = 7	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7195	AckNum: 7095	WindowSize = 8	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7210	AckNum: 7110	WindowSize = 9	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7225	AckNum: 7125	WindowSize = 10	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7240	AckNum: 7140	WindowSize = 11	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7255	AckNum: 7155	WindowSize = 12	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7270	AckNum: 7170	WindowSize = 13	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7285	AckNum: 7185	WindowSize = 14	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7300	AckNum: 7200	WindowSize = 15	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 6990	AckNum: 7315	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7005	AckNum: 7330	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7020	AckNum: 7345	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7035	AckNum: 7360	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7050	AckNum: 7375	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7065	AckNum: 7390	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7080	AckNum: 7405	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7095	AckNum: 7420	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7110	AckNum: 7435	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7125	AckNum: 7450	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7140	AckNum: 7465	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7155	AckNum: 7480	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7170	AckNum: 7495	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7185	AckNum: 7510	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7200	AckNum: 7525	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7090	AckNum: 6990	WindowSize = 1	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7105	AckNum: 7005	WindowSize = 2	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7120	AckNum: 7020	WindowSize = 3	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7315	AckNum: 7215	WindowSize = 1	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7330	AckNum: 7230	WindowSize = 2	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7345	AckNum: 7245	WindowSize = 3	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7360	AckNum: 7260	WindowSize = 4	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7375	AckNum: 7275	WindowSize = 5	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7390	AckNum: 7290	WindowSize = 6	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7405	AckNum: 7305	WindowSize = 7	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7420	AckNum: 7320	WindowSize = 8	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7435	AckNum: 7335	WindowSize = 9	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7450	AckNum: 7350	WindowSize = 10	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7465	AckNum: 7365	WindowSize = 11	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7480	AckNum: 7380	WindowSize = 12	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7495	AckNum: 7395	WindowSize = 13	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7510	AckNum: 7410	WindowSize = 14	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7525	AckNum: 7425	WindowSize = 15	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7215	AckNum: 7540	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7230	AckNum: 7555	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7245	AckNum: 7570	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7260	AckNum: 7585	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7275	AckNum: 7600	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7290	AckNum: 7615	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7305	AckNum: 7630	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7320	AckNum: 7645	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7335	AckNum: 7660	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7350	AckNum: 7675	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7365	AckNum: 7690	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7380	AckNum: 7705	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7395	AckNum: 7720	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7410	AckNum: 7735	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7425	AckNum: 7750	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7315	AckNum: 7215	WindowSize = 1	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7330	AckNum: 7230	WindowSize = 2	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7540	AckNum: 7440	WindowSize = 1	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7555	AckNum: 7455	WindowSize = 2	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7570	AckNum: 7470	WindowSize = 3	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7585	AckNum: 7485	WindowSize = 4	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7600	AckNum: 7500	WindowSize = 5	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7615	AckNum: 7515	WindowSize = 6	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7630	AckNum: 7530	WindowSize = 7	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7645	AckNum: 7545	WindowSize = 8	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7660	AckNum: 7560	WindowSize = 9	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7675	AckNum: 7575	WindowSize = 10	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7690	AckNum: 7590	WindowSize = 11	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7705	AckNum: 7605	WindowSize = 12	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7720	AckNum: 7620	WindowSize = 13	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7735	AckNum: 7635	WindowSize = 14	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7750	AckNum: 7650	WindowSize = 15	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7440	AckNum: 7765	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7455	AckNum: 7780	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7470	AckNum: 7795	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7485	AckNum: 7810	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7500	AckNum: 7825	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7515	AckNum: 7840	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7530	AckNum: 7855	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7545	AckNum: 7870	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7560	AckNum: 7885	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7575	AckNum: 7900	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7590	AckNum: 7915	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7605	AckNum: 7930	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7620	AckNum: 7945	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7635	AckNum: 7960	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7650	AckNum: 7975	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7540	AckNum: 7440	WindowSize = 1	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7555	AckNum: 7455	WindowSize = 2	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7570	AckNum: 7470	WindowSize = 3	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7585	AckNum: 7485	WindowSize = 4	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7600	AckNum: 7500	WindowSize = 5	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7765	AckNum: 7665	WindowSize = 1	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7780	AckNum: 7680	WindowSize = 2	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7795	AckNum: 7695	WindowSize = 3	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7810	AckNum: 7710	WindowSize = 4	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7825	AckNum: 7725	WindowSize = 5	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7840	AckNum: 7740	WindowSize = 6	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7855	AckNum: 7755	WindowSize = 7	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7870	AckNum: 7770	WindowSize = 8	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7885	AckNum: 7785	WindowSize = 9	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7900	AckNum: 7800	WindowSize = 10	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7915	AckNum: 7815	WindowSize = 11	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7930	AckNum: 7830	WindowSize = 12	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7945	AckNum: 7845	WindowSize = 13	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7960	AckNum: 7860	WindowSize = 14	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7975	AckNum: 7875	WindowSize = 15	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7665	AckNum: 7990	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7680	AckNum: 8005	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7695	AckNum: 8020	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7710	AckNum: 8035	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7725	AckNum: 8050	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7740	AckNum: 8065	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7755	AckNum: 8080	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7770	AckNum: 8095	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7785	AckNum: 8110	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7800	AckNum: 8125	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7815	AckNum: 8140	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7830	AckNum: 8155	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7845	AckNum: 8170	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7860	AckNum: 8185	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7875	AckNum: 8200	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7990	AckNum: 7890	WindowSize = 1	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8005	AckNum: 7905	WindowSize = 2	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8020	AckNum: 7920	WindowSize = 3	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8035	AckNum: 7935	WindowSize = 4	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8050	AckNum: 7950	WindowSize = 5	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8065	AckNum: 7965	WindowSize = 6	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8080	AckNum: 7980	WindowSize = 7	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8095	AckNum: 7995	WindowSize = 8	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8110	AckNum: 8010	WindowSize = 9	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8125	AckNum: 8025	WindowSize = 10	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8140	AckNum: 8040	WindowSize = 11	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8155	AckNum: 8055	WindowSize = 12	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8170	AckNum: 8070	WindowSize = 13	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8185	AckNum: 8085	WindowSize = 14	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8200	AckNum: 8100	WindowSize = 15	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7890	AckNum: 8215	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7905	AckNum: 8230	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7920	AckNum: 8245	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7935	AckNum: 8260	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7950	AckNum: 8275	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7965	AckNum: 8290	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7980	AckNum: 8305	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 7995	AckNum: 8320	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8010	AckNum: 8335	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8025	AckNum: 8350	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8040	AckNum: 8365	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8055	AckNum: 8380	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8070	AckNum: 8395	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8085	AckNum: 8410	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8100	AckNum: 8425	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 7990	AckNum: 7890	WindowSize = 1	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8005	AckNum: 7905	WindowSize = 2	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8215	AckNum: 8115	WindowSize = 1	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8230	AckNum: 8130	WindowSize = 2	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8245	AckNum: 8145	WindowSize = 3	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8260	AckNum: 8160	WindowSize = 4	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8275	AckNum: 8175	WindowSize = 5	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8290	AckNum: 8190	WindowSize = 6	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8305	AckNum: 8205	WindowSize = 7	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8320	AckNum: 8220	WindowSize = 8	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8335	AckNum: 8235	WindowSize = 9	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8350	AckNum: 8250	WindowSize = 10	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8365	AckNum: 8265	WindowSize = 11	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8380	AckNum: 8280	WindowSize = 12	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8395	AckNum: 8295	WindowSize = 13	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8410	AckNum: 8310	WindowSize = 14	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8425	AckNum: 8325	WindowSize = 15	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8115	AckNum: 8440	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8130	AckNum: 8455	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8145	AckNum: 8470	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8160	AckNum: 8485	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8175	AckNum: 8500	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8190	AckNum: 8515	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8205	AckNum: 8530	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8220	AckNum: 8545	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8235	AckNum: 8560	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8250	AckNum: 8575	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8265	AckNum: 8590	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8280	AckNum: 8605	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8295	AckNum: 8620	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8310	AckNum: 8635	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8325	AckNum: 8650	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8440	AckNum: 8340	WindowSize = 1	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8455	AckNum: 8355	WindowSize = 2	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8470	AckNum: 8370	WindowSize = 3	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8485	AckNum: 8385	WindowSize = 4	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8500	AckNum: 8400	WindowSize = 5	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8515	AckNum: 8415	WindowSize = 6	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8530	AckNum: 8430	WindowSize = 7	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8545	AckNum: 8445	WindowSize = 8	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8560	AckNum: 8460	WindowSize = 9	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8575	AckNum: 8475	WindowSize = 10	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8590	AckNum: 8490	WindowSize = 11	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8605	AckNum: 8505	WindowSize = 12	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8620	AckNum: 8520	WindowSize = 13	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8635	AckNum: 8535	WindowSize = 14	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8650	AckNum: 8550	WindowSize = 15	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8340	AckNum: 8665	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8355	AckNum: 8680	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8370	AckNum: 8695	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8385	AckNum: 8710	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8400	AckNum: 8725	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8415	AckNum: 8740	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8430	AckNum: 8755	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8445	AckNum: 8770	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8460	AckNum: 8785	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8475	AckNum: 8800	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8490	AckNum: 8815	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8505	AckNum: 8830	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8520	AckNum: 8845	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8535	AckNum: 8860	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8550	AckNum: 8875	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8665	AckNum: 8565	WindowSize = 1	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8680	AckNum: 8580	WindowSize = 2	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8695	AckNum: 8595	WindowSize = 3	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8710	AckNum: 8610	WindowSize = 4	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8725	AckNum: 8625	WindowSize = 5	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8740	AckNum: 8640	WindowSize = 6	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8755	AckNum: 8655	WindowSize = 7	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8770	AckNum: 8670	WindowSize = 8	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8785	AckNum: 8685	WindowSize = 9	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8800	AckNum: 8700	WindowSize = 10	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8815	AckNum: 8715	WindowSize = 11	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8830	AckNum: 8730	WindowSize = 12	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8845	AckNum: 8745	WindowSize = 13	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8860	AckNum: 8760	WindowSize = 14	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8875	AckNum: 8775	WindowSize = 15	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8565	AckNum: 8890	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8580	AckNum: 8905	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8595	AckNum: 8920	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8610	AckNum: 8935	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8625	AckNum: 8950	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8640	AckNum: 8965	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8655	AckNum: 8980	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8670	AckNum: 8995	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8685	AckNum: 9010	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8700	AckNum: 9025	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8715	AckNum: 9040	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8730	AckNum: 9055	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8745	AckNum: 9070	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8760	AckNum: 9085	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8775	AckNum: 9100	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8890	AckNum: 8790	WindowSize = 1	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8905	AckNum: 8805	WindowSize = 2	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8920	AckNum: 8820	WindowSize = 3	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8935	AckNum: 8835	WindowSize = 4	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8950	AckNum: 8850	WindowSize = 5	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8965	AckNum: 8865	WindowSize = 6	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8980	AckNum: 8880	WindowSize = 7	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8995	AckNum: 8895	WindowSize = 8	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9010	AckNum: 8910	WindowSize = 9	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9025	AckNum: 8925	WindowSize = 10	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9040	AckNum: 8940	WindowSize = 11	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9055	AckNum: 8955	WindowSize = 12	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9070	AckNum: 8970	WindowSize = 13	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9085	AckNum: 8985	WindowSize = 14	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9100	AckNum: 9000	WindowSize = 15	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8790	AckNum: 9115	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8805	AckNum: 9130	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8820	AckNum: 9145	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8835	AckNum: 9160	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8850	AckNum: 9175	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8865	AckNum: 9190	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8880	AckNum: 9205	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8895	AckNum: 9220	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8910	AckNum: 9235	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8925	AckNum: 9250	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8940	AckNum: 9265	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8955	AckNum: 9280	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8970	AckNum: 9295	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 8985	AckNum: 9310	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9000	AckNum: 9325	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 8890	AckNum: 8790	WindowSize = 1	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9115	AckNum: 9015	WindowSize = 1	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9130	AckNum: 9030	WindowSize = 2	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9145	AckNum: 9045	WindowSize = 3	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9160	AckNum: 9060	WindowSize = 4	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9175	AckNum: 9075	WindowSize = 5	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9190	AckNum: 9090	WindowSize = 6	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9205	AckNum: 9105	WindowSize = 7	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9220	AckNum: 9120	WindowSize = 8	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9235	AckNum: 9135	WindowSize = 9	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9250	AckNum: 9150	WindowSize = 10	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9265	AckNum: 9165	WindowSize = 11	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9280	AckNum: 9180	WindowSize = 12	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9295	AckNum: 9195	WindowSize = 13	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9310	AckNum: 9210	WindowSize = 14	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9325	AckNum: 9225	WindowSize = 15	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9015	AckNum: 9340	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9030	AckNum: 9355	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9045	AckNum: 9370	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9060	AckNum: 9385	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9075	AckNum: 9400	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9090	AckNum: 9415	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9105	AckNum: 9430	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9120	AckNum: 9445	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9135	AckNum: 9460	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9150	AckNum: 9475	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9165	AckNum: 9490	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9180	AckNum: 9505	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9195	AckNum: 9520	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9210	AckNum: 9535	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9225	AckNum: 9550	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9340	AckNum: 9240	WindowSize = 1	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9355	AckNum: 9255	WindowSize = 2	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9370	AckNum: 9270	WindowSize = 3	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9385	AckNum: 9285	WindowSize = 4	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9400	AckNum: 9300	WindowSize = 5	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9415	AckNum: 9315	WindowSize = 6	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9430	AckNum: 9330	WindowSize = 7	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9445	AckNum: 9345	WindowSize = 8	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9460	AckNum: 9360	WindowSize = 9	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9475	AckNum: 9375	WindowSize = 10	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9490	AckNum: 9390	WindowSize = 11	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9505	AckNum: 9405	WindowSize = 12	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9520	AckNum: 9420	WindowSize = 13	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9535	AckNum: 9435	WindowSize = 14	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9550	AckNum: 9450	WindowSize = 15	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9240	AckNum: 9565	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9255	AckNum: 9580	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9270	AckNum: 9595	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9285	AckNum: 9610	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9300	AckNum: 9625	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9315	AckNum: 9640	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9330	AckNum: 9655	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9345	AckNum: 9670	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9360	AckNum: 9685	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9375	AckNum: 9700	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9390	AckNum: 9715	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9405	AckNum: 9730	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9420	AckNum: 9745	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9435	AckNum: 9760	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9450	AckNum: 9775	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9340	AckNum: 9240	WindowSize = 1	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9565	AckNum: 9465	WindowSize = 1	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9580	AckNum: 9480	WindowSize = 2	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9595	AckNum: 9495	WindowSize = 3	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9610	AckNum: 9510	WindowSize = 4	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9625	AckNum: 9525	WindowSize = 5	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9640	AckNum: 9540	WindowSize = 6	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9655	AckNum: 9555	WindowSize = 7	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9670	AckNum: 9570	WindowSize = 8	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9685	AckNum: 9585	WindowSize = 9	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9700	AckNum: 9600	WindowSize = 10	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9715	AckNum: 9615	WindowSize = 11	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9730	AckNum: 9630	WindowSize = 12	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9745	AckNum: 9645	WindowSize = 13	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9760	AckNum: 9660	WindowSize = 14	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9775	AckNum: 9675	WindowSize = 15	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9465	AckNum: 9790	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9480	AckNum: 9805	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9495	AckNum: 9820	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9510	AckNum: 9835	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9525	AckNum: 9850	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9540	AckNum: 9865	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9555	AckNum: 9880	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9570	AckNum: 9895	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9585	AckNum: 9910	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9600	AckNum: 9925	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9615	AckNum: 9940	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9630	AckNum: 9955	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9645	AckNum: 9970	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9660	AckNum: 9985	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9675	AckNum: 10000	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9790	AckNum: 9690	WindowSize = 1	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9805	AckNum: 9705	WindowSize = 2	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9820	AckNum: 9720	WindowSize = 3	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9835	AckNum: 9735	WindowSize = 4	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9850	AckNum: 9750	WindowSize = 5	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9865	AckNum: 9765	WindowSize = 6	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9880	AckNum: 9780	WindowSize = 7	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9895	AckNum: 9795	WindowSize = 8	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9910	AckNum: 9810	WindowSize = 9	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9925	AckNum: 9825	WindowSize = 10	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9940	AckNum: 9840	WindowSize = 11	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9955	AckNum: 9855	WindowSize = 12	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9970	AckNum: 9870	WindowSize = 13	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9985	AckNum: 9885	WindowSize = 14	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10000	AckNum: 9900	WindowSize = 15	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9690	AckNum: 10015	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9705	AckNum: 10030	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9720	AckNum: 10045	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9735	AckNum: 10060	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9750	AckNum: 10075	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9765	AckNum: 10090	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9780	AckNum: 10105	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9795	AckNum: 10120	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9810	AckNum: 10135	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9825	AckNum: 10150	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9840	AckNum: 10165	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9855	AckNum: 10180	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9870	AckNum: 10195	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9885	AckNum: 10210	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9900	AckNum: 10225	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 9790	AckNum: 9690	WindowSize = 1	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10015	AckNum: 9915	WindowSize = 1	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10030	AckNum: 9930	WindowSize = 2	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10045	AckNum: 9945	WindowSize = 3	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10060	AckNum: 9960	WindowSize = 4	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10075	AckNum: 9975	WindowSize = 5	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10090	AckNum: 9990	WindowSize = 6	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10105	AckNum: 10005	WindowSize = 7	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10120	AckNum: 10020	WindowSize = 8	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10135	AckNum: 10035	WindowSize = 9	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10150	AckNum: 10050	WindowSize = 10	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10165	AckNum: 10065	WindowSize = 11	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10180	AckNum: 10080	WindowSize = 12	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10195	AckNum: 10095	WindowSize = 13	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10210	AckNum: 10110	WindowSize = 14	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10225	AckNum: 10125	WindowSize = 15	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9915	AckNum: 10240	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9930	AckNum: 10255	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9945	AckNum: 10270	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9960	AckNum: 10285	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9975	AckNum: 10300	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 9990	AckNum: 10315	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10005	AckNum: 10330	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10020	AckNum: 10345	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10035	AckNum: 10360	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10050	AckNum: 10375	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10065	AckNum: 10390	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10080	AckNum: 10405	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10095	AckNum: 10420	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10110	AckNum: 10435	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10125	AckNum: 10450	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10015	AckNum: 9915	WindowSize = 1	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10030	AckNum: 9930	WindowSize = 2	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10045	AckNum: 9945	WindowSize = 3	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10240	AckNum: 10140	WindowSize = 1	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10255	AckNum: 10155	WindowSize = 2	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10270	AckNum: 10170	WindowSize = 3	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10285	AckNum: 10185	WindowSize = 4	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10300	AckNum: 10200	WindowSize = 5	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10315	AckNum: 10215	WindowSize = 6	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10330	AckNum: 10230	WindowSize = 7	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10345	AckNum: 10245	WindowSize = 8	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10360	AckNum: 10260	WindowSize = 9	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10375	AckNum: 10275	WindowSize = 10	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10390	AckNum: 10290	WindowSize = 11	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10405	AckNum: 10305	WindowSize = 12	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10420	AckNum: 10320	WindowSize = 13	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10435	AckNum: 10335	WindowSize = 14	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10450	AckNum: 10350	WindowSize = 15	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10140	AckNum: 10465	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10155	AckNum: 10480	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10170	AckNum: 10495	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10185	AckNum: 10510	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10200	AckNum: 10525	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10215	AckNum: 10540	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10230	AckNum: 10555	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10245	AckNum: 10570	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10260	AckNum: 10585	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10275	AckNum: 10600	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10290	AckNum: 10615	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10305	AckNum: 10630	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10320	AckNum: 10645	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10335	AckNum: 10660	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10350	AckNum: 10675	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10240	AckNum: 10140	WindowSize = 1	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10465	AckNum: 10365	WindowSize = 1	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10480	AckNum: 10380	WindowSize = 2	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10495	AckNum: 10395	WindowSize = 3	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10510	AckNum: 10410	WindowSize = 4	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10525	AckNum: 10425	WindowSize = 5	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10540	AckNum: 10440	WindowSize = 6	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10555	AckNum: 10455	WindowSize = 7	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10570	AckNum: 10470	WindowSize = 8	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10585	AckNum: 10485	WindowSize = 9	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10600	AckNum: 10500	WindowSize = 10	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10615	AckNum: 10515	WindowSize = 11	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10630	AckNum: 10530	WindowSize = 12	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10645	AckNum: 10545	WindowSize = 13	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10660	AckNum: 10560	WindowSize = 14	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10675	AckNum: 10575	WindowSize = 15	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10365	AckNum: 10690	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10380	AckNum: 10705	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10395	AckNum: 10720	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10410	AckNum: 10735	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10425	AckNum: 10750	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10440	AckNum: 10765	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10455	AckNum: 10780	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10470	AckNum: 10795	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10485	AckNum: 10810	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10500	AckNum: 10825	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10515	AckNum: 10840	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10530	AckNum: 10855	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10545	AckNum: 10870	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10560	AckNum: 10885	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10575	AckNum: 10900	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10465	AckNum: 10365	WindowSize = 1	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10480	AckNum: 10380	WindowSize = 2	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10690	AckNum: 10590	WindowSize = 1	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10705	AckNum: 10605	WindowSize = 2	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10720	AckNum: 10620	WindowSize = 3	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10735	AckNum: 10635	WindowSize = 4	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10750	AckNum: 10650	WindowSize = 5	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10765	AckNum: 10665	WindowSize = 6	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10780	AckNum: 10680	WindowSize = 7	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10795	AckNum: 10695	WindowSize = 8	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10810	AckNum: 10710	WindowSize = 9	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10825	AckNum: 10725	WindowSize = 10	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10840	AckNum: 10740	WindowSize = 11	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10855	AckNum: 10755	WindowSize = 12	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10870	AckNum: 10770	WindowSize = 13	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10885	AckNum: 10785	WindowSize = 14	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10900	AckNum: 10800	WindowSize = 15	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10590	AckNum: 10915	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10605	AckNum: 10930	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10620	AckNum: 10945	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10635	AckNum: 10960	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10650	AckNum: 10975	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10665	AckNum: 10990	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10680	AckNum: 11005	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10695	AckNum: 11020	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10710	AckNum: 11035	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10725	AckNum: 11050	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10740	AckNum: 11065	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10755	AckNum: 11080	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10770	AckNum: 11095	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10785	AckNum: 11110	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10800	AckNum: 11125	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10690	AckNum: 10590	WindowSize = 1	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10915	AckNum: 10815	WindowSize = 1	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10930	AckNum: 10830	WindowSize = 2	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10945	AckNum: 10845	WindowSize = 3	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10960	AckNum: 10860	WindowSize = 4	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10975	AckNum: 10875	WindowSize = 5	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10990	AckNum: 10890	WindowSize = 6	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11005	AckNum: 10905	WindowSize = 7	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11020	AckNum: 10920	WindowSize = 8	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11035	AckNum: 10935	WindowSize = 9	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11050	AckNum: 10950	WindowSize = 10	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11065	AckNum: 10965	WindowSize = 11	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11080	AckNum: 10980	WindowSize = 12	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11095	AckNum: 10995	WindowSize = 13	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11110	AckNum: 11010	WindowSize = 14	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11125	AckNum: 11025	WindowSize = 15	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10815	AckNum: 11140	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10830	AckNum: 11155	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10845	AckNum: 11170	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10860	AckNum: 11185	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10875	AckNum: 11200	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10890	AckNum: 11215	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10905	AckNum: 11230	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10920	AckNum: 11245	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10935	AckNum: 11260	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10950	AckNum: 11275	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10965	AckNum: 11290	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10980	AckNum: 11305	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 10995	AckNum: 11320	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11010	AckNum: 11335	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11025	AckNum: 11350	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10915	AckNum: 10815	WindowSize = 1	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10930	AckNum: 10830	WindowSize = 2	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10945	AckNum: 10845	WindowSize = 3	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 10960	AckNum: 10860	WindowSize = 4	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11140	AckNum: 11040	WindowSize = 1	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11155	AckNum: 11055	WindowSize = 2	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11170	AckNum: 11070	WindowSize = 3	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11185	AckNum: 11085	WindowSize = 4	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11200	AckNum: 11100	WindowSize = 5	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11215	AckNum: 11115	WindowSize = 6	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11230	AckNum: 11130	WindowSize = 7	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11245	AckNum: 11145	WindowSize = 8	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11260	AckNum: 11160	WindowSize = 9	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11275	AckNum: 11175	WindowSize = 10	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11290	AckNum: 11190	WindowSize = 11	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11305	AckNum: 11205	WindowSize = 12	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11320	AckNum: 11220	WindowSize = 13	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11335	AckNum: 11235	WindowSize = 14	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11350	AckNum: 11250	WindowSize = 15	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11040	AckNum: 11365	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11055	AckNum: 11380	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11070	AckNum: 11395	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11085	AckNum: 11410	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11100	AckNum: 11425	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11115	AckNum: 11440	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11130	AckNum: 11455	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11145	AckNum: 11470	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11160	AckNum: 11485	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11175	AckNum: 11500	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11190	AckNum: 11515	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11205	AckNum: 11530	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11220	AckNum: 11545	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11235	AckNum: 11560	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11250	AckNum: 11575	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11365	AckNum: 11265	WindowSize = 1	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11380	AckNum: 11280	WindowSize = 2	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11395	AckNum: 11295	WindowSize = 3	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11410	AckNum: 11310	WindowSize = 4	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11425	AckNum: 11325	WindowSize = 5	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11440	AckNum: 11340	WindowSize = 6	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11455	AckNum: 11355	WindowSize = 7	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11470	AckNum: 11370	WindowSize = 8	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11485	AckNum: 11385	WindowSize = 9	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11500	AckNum: 11400	WindowSize = 10	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11515	AckNum: 11415	WindowSize = 11	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11530	AckNum: 11430	WindowSize = 12	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11545	AckNum: 11445	WindowSize = 13	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11560	AckNum: 11460	WindowSize = 14	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11575	AckNum: 11475	WindowSize = 15	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11265	AckNum: 11590	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11280	AckNum: 11605	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11295	AckNum: 11620	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11310	AckNum: 11635	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11325	AckNum: 11650	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11340	AckNum: 11665	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11355	AckNum: 11680	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11370	AckNum: 11695	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11385	AckNum: 11710	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11400	AckNum: 11725	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11415	AckNum: 11740	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11430	AckNum: 11755	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11445	AckNum: 11770	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11460	AckNum: 11785	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11475	AckNum: 11800	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11590	AckNum: 11490	WindowSize = 1	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11605	AckNum: 11505	WindowSize = 2	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11620	AckNum: 11520	WindowSize = 3	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11635	AckNum: 11535	WindowSize = 4	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11650	AckNum: 11550	WindowSize = 5	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11665	AckNum: 11565	WindowSize = 6	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11680	AckNum: 11580	WindowSize = 7	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11695	AckNum: 11595	WindowSize = 8	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11710	AckNum: 11610	WindowSize = 9	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11725	AckNum: 11625	WindowSize = 10	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11740	AckNum: 11640	WindowSize = 11	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11755	AckNum: 11655	WindowSize = 12	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11770	AckNum: 11670	WindowSize = 13	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11785	AckNum: 11685	WindowSize = 14	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11800	AckNum: 11700	WindowSize = 15	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11490	AckNum: 11815	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11505	AckNum: 11830	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11520	AckNum: 11845	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11535	AckNum: 11860	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11550	AckNum: 11875	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11565	AckNum: 11890	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11580	AckNum: 11905	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11595	AckNum: 11920	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11610	AckNum: 11935	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11625	AckNum: 11950	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11640	AckNum: 11965	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11655	AckNum: 11980	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11670	AckNum: 11995	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11685	AckNum: 12010	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11700	AckNum: 12025	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11815	AckNum: 11715	WindowSize = 1	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11830	AckNum: 11730	WindowSize = 2	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11845	AckNum: 11745	WindowSize = 3	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11860	AckNum: 11760	WindowSize = 4	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11875	AckNum: 11775	WindowSize = 5	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11890	AckNum: 11790	WindowSize = 6	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11905	AckNum: 11805	WindowSize = 7	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11920	AckNum: 11820	WindowSize = 8	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11935	AckNum: 11835	WindowSize = 9	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11950	AckNum: 11850	WindowSize = 10	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11965	AckNum: 11865	WindowSize = 11	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11980	AckNum: 11880	WindowSize = 12	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11995	AckNum: 11895	WindowSize = 13	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12010	AckNum: 11910	WindowSize = 14	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12025	AckNum: 11925	WindowSize = 15	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11715	AckNum: 12040	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11730	AckNum: 12055	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11745	AckNum: 12070	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11760	AckNum: 12085	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11775	AckNum: 12100	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11790	AckNum: 12115	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11805	AckNum: 12130	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11820	AckNum: 12145	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11835	AckNum: 12160	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11850	AckNum: 12175	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11865	AckNum: 12190	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11880	AckNum: 12205	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11895	AckNum: 12220	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11910	AckNum: 12235	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11925	AckNum: 12250	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 11815	AckNum: 11715	WindowSize = 1	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12040	AckNum: 11940	WindowSize = 1	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12055	AckNum: 11955	WindowSize = 2	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12070	AckNum: 11970	WindowSize = 3	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12085	AckNum: 11985	WindowSize = 4	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12100	AckNum: 12000	WindowSize = 5	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12115	AckNum: 12015	WindowSize = 6	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12130	AckNum: 12030	WindowSize = 7	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12145	AckNum: 12045	WindowSize = 8	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12160	AckNum: 12060	WindowSize = 9	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12175	AckNum: 12075	WindowSize = 10	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12190	AckNum: 12090	WindowSize = 11	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12205	AckNum: 12105	WindowSize = 12	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12220	AckNum: 12120	WindowSize = 13	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12235	AckNum: 12135	WindowSize = 14	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12250	AckNum: 12150	WindowSize = 15	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11940	AckNum: 12265	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11955	AckNum: 12280	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11970	AckNum: 12295	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 11985	AckNum: 12310	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12000	AckNum: 12325	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12015	AckNum: 12340	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12030	AckNum: 12355	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12045	AckNum: 12370	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12060	AckNum: 12385	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12075	AckNum: 12400	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12090	AckNum: 12415	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12105	AckNum: 12430	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12120	AckNum: 12445	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12135	AckNum: 12460	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12150	AckNum: 12475	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12265	AckNum: 12165	WindowSize = 1	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12280	AckNum: 12180	WindowSize = 2	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12295	AckNum: 12195	WindowSize = 3	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12310	AckNum: 12210	WindowSize = 4	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12325	AckNum: 12225	WindowSize = 5	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12340	AckNum: 12240	WindowSize = 6	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12355	AckNum: 12255	WindowSize = 7	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12370	AckNum: 12270	WindowSize = 8	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12385	AckNum: 12285	WindowSize = 9	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12400	AckNum: 12300	WindowSize = 10	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12415	AckNum: 12315	WindowSize = 11	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12430	AckNum: 12330	WindowSize = 12	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12445	AckNum: 12345	WindowSize = 13	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12460	AckNum: 12360	WindowSize = 14	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12475	AckNum: 12375	WindowSize = 15	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12165	AckNum: 12490	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12180	AckNum: 12505	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12195	AckNum: 12520	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12210	AckNum: 12535	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12225	AckNum: 12550	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12240	AckNum: 12565	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12255	AckNum: 12580	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12270	AckNum: 12595	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12285	AckNum: 12610	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12300	AckNum: 12625	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12315	AckNum: 12640	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12330	AckNum: 12655	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12345	AckNum: 12670	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12360	AckNum: 12685	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12375	AckNum: 12700	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12490	AckNum: 12390	WindowSize = 1	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12505	AckNum: 12405	WindowSize = 2	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12520	AckNum: 12420	WindowSize = 3	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12535	AckNum: 12435	WindowSize = 4	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12550	AckNum: 12450	WindowSize = 5	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12565	AckNum: 12465	WindowSize = 6	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12580	AckNum: 12480	WindowSize = 7	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12595	AckNum: 12495	WindowSize = 8	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12610	AckNum: 12510	WindowSize = 9	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12625	AckNum: 12525	WindowSize = 10	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12640	AckNum: 12540	WindowSize = 11	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12655	AckNum: 12555	WindowSize = 12	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12670	AckNum: 12570	WindowSize = 13	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12685	AckNum: 12585	WindowSize = 14	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12700	AckNum: 12600	WindowSize = 15	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12390	AckNum: 12715	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12405	AckNum: 12730	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12420	AckNum: 12745	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12435	AckNum: 12760	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12450	AckNum: 12775	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12465	AckNum: 12790	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12480	AckNum: 12805	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12495	AckNum: 12820	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12510	AckNum: 12835	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12525	AckNum: 12850	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12540	AckNum: 12865	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12555	AckNum: 12880	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12570	AckNum: 12895	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12585	AckNum: 12910	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12600	AckNum: 12925	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12715	AckNum: 12615	WindowSize = 1	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12730	AckNum: 12630	WindowSize = 2	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12745	AckNum: 12645	WindowSize = 3	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12760	AckNum: 12660	WindowSize = 4	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12775	AckNum: 12675	WindowSize = 5	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12790	AckNum: 12690	WindowSize = 6	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12805	AckNum: 12705	WindowSize = 7	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12820	AckNum: 12720	WindowSize = 8	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12835	AckNum: 12735	WindowSize = 9	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12850	AckNum: 12750	WindowSize = 10	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12865	AckNum: 12765	WindowSize = 11	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12880	AckNum: 12780	WindowSize = 12	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12895	AckNum: 12795	WindowSize = 13	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12910	AckNum: 12810	WindowSize = 14	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12925	AckNum: 12825	WindowSize = 15	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12615	AckNum: 12940	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12630	AckNum: 12955	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12645	AckNum: 12970	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12660	AckNum: 12985	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12675	AckNum: 13000	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12690	AckNum: 13015	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12705	AckNum: 13030	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12720	AckNum: 13045	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12735	AckNum: 13060	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12750	AckNum: 13075	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12765	AckNum: 13090	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12780	AckNum: 13105	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12795	AckNum: 13120	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12810	AckNum: 13135	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12825	AckNum: 13150	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12715	AckNum: 12615	WindowSize = 1	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12940	AckNum: 12840	WindowSize = 1	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12955	AckNum: 12855	WindowSize = 2	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12970	AckNum: 12870	WindowSize = 3	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 12985	AckNum: 12885	WindowSize = 4	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13000	AckNum: 12900	WindowSize = 5	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13015	AckNum: 12915	WindowSize = 6	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13030	AckNum: 12930	WindowSize = 7	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13045	AckNum: 12945	WindowSize = 8	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13060	AckNum: 12960	WindowSize = 9	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13075	AckNum: 12975	WindowSize = 10	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13090	AckNum: 12990	WindowSize = 11	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13105	AckNum: 13005	WindowSize = 12	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13120	AckNum: 13020	WindowSize = 13	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13135	AckNum: 13035	WindowSize = 14	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13150	AckNum: 13050	WindowSize = 15	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12840	AckNum: 13165	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12855	AckNum: 13180	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12870	AckNum: 13195	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12885	AckNum: 13210	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12900	AckNum: 13225	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12915	AckNum: 13240	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12930	AckNum: 13255	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12945	AckNum: 13270	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12960	AckNum: 13285	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12975	AckNum: 13300	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 12990	AckNum: 13315	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13005	AckNum: 13330	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13020	AckNum: 13345	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13035	AckNum: 13360	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13050	AckNum: 13375	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13165	AckNum: 13065	WindowSize = 1	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13180	AckNum: 13080	WindowSize = 2	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13195	AckNum: 13095	WindowSize = 3	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13210	AckNum: 13110	WindowSize = 4	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13225	AckNum: 13125	WindowSize = 5	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13240	AckNum: 13140	WindowSize = 6	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13255	AckNum: 13155	WindowSize = 7	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13270	AckNum: 13170	WindowSize = 8	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13285	AckNum: 13185	WindowSize = 9	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13300	AckNum: 13200	WindowSize = 10	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13315	AckNum: 13215	WindowSize = 11	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13330	AckNum: 13230	WindowSize = 12	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13345	AckNum: 13245	WindowSize = 13	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13360	AckNum: 13260	WindowSize = 14	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13375	AckNum: 13275	WindowSize = 15	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13065	AckNum: 13390	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13080	AckNum: 13405	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13095	AckNum: 13420	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13110	AckNum: 13435	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13125	AckNum: 13450	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13140	AckNum: 13465	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13155	AckNum: 13480	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13170	AckNum: 13495	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13185	AckNum: 13510	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13200	AckNum: 13525	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13215	AckNum: 13540	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13230	AckNum: 13555	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13245	AckNum: 13570	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13260	AckNum: 13585	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13275	AckNum: 13600	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13165	AckNum: 13065	WindowSize = 1	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13180	AckNum: 13080	WindowSize = 2	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13390	AckNum: 13290	WindowSize = 1	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13405	AckNum: 13305	WindowSize = 2	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13420	AckNum: 13320	WindowSize = 3	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13435	AckNum: 13335	WindowSize = 4	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13450	AckNum: 13350	WindowSize = 5	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13465	AckNum: 13365	WindowSize = 6	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13480	AckNum: 13380	WindowSize = 7	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13495	AckNum: 13395	WindowSize = 8	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13510	AckNum: 13410	WindowSize = 9	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13525	AckNum: 13425	WindowSize = 10	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13540	AckNum: 13440	WindowSize = 11	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13555	AckNum: 13455	WindowSize = 12	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13570	AckNum: 13470	WindowSize = 13	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13585	AckNum: 13485	WindowSize = 14	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13600	AckNum: 13500	WindowSize = 15	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13290	AckNum: 13615	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13305	AckNum: 13630	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13320	AckNum: 13645	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13335	AckNum: 13660	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13350	AckNum: 13675	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13365	AckNum: 13690	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13380	AckNum: 13705	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13395	AckNum: 13720	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13410	AckNum: 13735	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13425	AckNum: 13750	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13440	AckNum: 13765	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13455	AckNum: 13780	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13470	AckNum: 13795	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13485	AckNum: 13810	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13500	AckNum: 13825	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13390	AckNum: 13290	WindowSize = 1	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13615	AckNum: 13515	WindowSize = 1	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13630	AckNum: 13530	WindowSize = 2	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13645	AckNum: 13545	WindowSize = 3	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13660	AckNum: 13560	WindowSize = 4	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13675	AckNum: 13575	WindowSize = 5	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13690	AckNum: 13590	WindowSize = 6	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13705	AckNum: 13605	WindowSize = 7	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13720	AckNum: 13620	WindowSize = 8	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13735	AckNum: 13635	WindowSize = 9	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13750	AckNum: 13650	WindowSize = 10	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13765	AckNum: 13665	WindowSize = 11	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13780	AckNum: 13680	WindowSize = 12	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13795	AckNum: 13695	WindowSize = 13	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13810	AckNum: 13710	WindowSize = 14	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13825	AckNum: 13725	WindowSize = 15	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13515	AckNum: 13840	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13530	AckNum: 13855	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13545	AckNum: 13870	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13560	AckNum: 13885	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13575	AckNum: 13900	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13590	AckNum: 13915	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13605	AckNum: 13930	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13620	AckNum: 13945	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13635	AckNum: 13960	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13650	AckNum: 13975	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13665	AckNum: 13990	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13680	AckNum: 14005	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13695	AckNum: 14020	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13710	AckNum: 14035	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13725	AckNum: 14050	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13615	AckNum: 13515	WindowSize = 1	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13630	AckNum: 13530	WindowSize = 2	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13840	AckNum: 13740	WindowSize = 1	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13855	AckNum: 13755	WindowSize = 2	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13870	AckNum: 13770	WindowSize = 3	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13885	AckNum: 13785	WindowSize = 4	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13900	AckNum: 13800	WindowSize = 5	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13915	AckNum: 13815	WindowSize = 6	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13930	AckNum: 13830	WindowSize = 7	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13945	AckNum: 13845	WindowSize = 8	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13960	AckNum: 13860	WindowSize = 9	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13975	AckNum: 13875	WindowSize = 10	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13990	AckNum: 13890	WindowSize = 11	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14005	AckNum: 13905	WindowSize = 12	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14020	AckNum: 13920	WindowSize = 13	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14035	AckNum: 13935	WindowSize = 14	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14050	AckNum: 13950	WindowSize = 15	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13740	AckNum: 14065	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13755	AckNum: 14080	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13770	AckNum: 14095	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13785	AckNum: 14110	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13800	AckNum: 14125	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13815	AckNum: 14140	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13830	AckNum: 14155	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13845	AckNum: 14170	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13860	AckNum: 14185	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13875	AckNum: 14200	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13890	AckNum: 14215	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13905	AckNum: 14230	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13920	AckNum: 14245	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13935	AckNum: 14260	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13950	AckNum: 14275	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13840	AckNum: 13740	WindowSize = 1	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13855	AckNum: 13755	WindowSize = 2	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13870	AckNum: 13770	WindowSize = 3	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 13885	AckNum: 13785	WindowSize = 4	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14065	AckNum: 13965	WindowSize = 1	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14080	AckNum: 13980	WindowSize = 2	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14095	AckNum: 13995	WindowSize = 3	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14110	AckNum: 14010	WindowSize = 4	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14125	AckNum: 14025	WindowSize = 5	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14140	AckNum: 14040	WindowSize = 6	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14155	AckNum: 14055	WindowSize = 7	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14170	AckNum: 14070	WindowSize = 8	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14185	AckNum: 14085	WindowSize = 9	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14200	AckNum: 14100	WindowSize = 10	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14215	AckNum: 14115	WindowSize = 11	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14230	AckNum: 14130	WindowSize = 12	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14245	AckNum: 14145	WindowSize = 13	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14260	AckNum: 14160	WindowSize = 14	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14275	AckNum: 14175	WindowSize = 15	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13965	AckNum: 14290	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13980	AckNum: 14305	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 13995	AckNum: 14320	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14010	AckNum: 14335	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14025	AckNum: 14350	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14040	AckNum: 14365	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14055	AckNum: 14380	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14070	AckNum: 14395	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14085	AckNum: 14410	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14100	AckNum: 14425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14115	AckNum: 14440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14130	AckNum: 14455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14145	AckNum: 14470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14160	AckNum: 14485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14175	AckNum: 14500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14290	AckNum: 14190	WindowSize = 1	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14305	AckNum: 14205	WindowSize = 2	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14320	AckNum: 14220	WindowSize = 3	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14335	AckNum: 14235	WindowSize = 4	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14350	AckNum: 14250	WindowSize = 5	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14365	AckNum: 14265	WindowSize = 6	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14380	AckNum: 14280	WindowSize = 7	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14395	AckNum: 14295	WindowSize = 8	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14410	AckNum: 14310	WindowSize = 9	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14425	AckNum: 14325	WindowSize = 10	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14440	AckNum: 14340	WindowSize = 11	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14455	AckNum: 14355	WindowSize = 12	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14470	AckNum: 14370	WindowSize = 13	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14485	AckNum: 14385	WindowSize = 14	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14500	AckNum: 14400	WindowSize = 15	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14190	AckNum: 14515	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14205	AckNum: 14530	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14220	AckNum: 14545	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14235	AckNum: 14560	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14250	AckNum: 14575	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14265	AckNum: 14590	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14280	AckNum: 14605	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14295	AckNum: 14620	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14310	AckNum: 14635	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14325	AckNum: 14650	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14340	AckNum: 14665	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14355	AckNum: 14680	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14370	AckNum: 14695	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14385	AckNum: 14710	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14400	AckNum: 14725	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14515	AckNum: 14415	WindowSize = 1	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14530	AckNum: 14430	WindowSize = 2	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14545	AckNum: 14445	WindowSize = 3	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14560	AckNum: 14460	WindowSize = 4	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14575	AckNum: 14475	WindowSize = 5	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14590	AckNum: 14490	WindowSize = 6	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14605	AckNum: 14505	WindowSize = 7	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14620	AckNum: 14520	WindowSize = 8	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14635	AckNum: 14535	WindowSize = 9	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14650	AckNum: 14550	WindowSize = 10	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14665	AckNum: 14565	WindowSize = 11	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14680	AckNum: 14580	WindowSize = 12	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14695	AckNum: 14595	WindowSize = 13	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14710	AckNum: 14610	WindowSize = 14	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14725	AckNum: 14625	WindowSize = 15	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14415	AckNum: 14740	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14430	AckNum: 14755	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14445	AckNum: 14770	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14460	AckNum: 14785	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14475	AckNum: 14800	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14490	AckNum: 14815	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14505	AckNum: 14830	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14520	AckNum: 14845	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14535	AckNum: 14860	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14550	AckNum: 14875	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14565	AckNum: 14890	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14580	AckNum: 14905	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14595	AckNum: 14920	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14610	AckNum: 14935	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14625	AckNum: 14950	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14515	AckNum: 14415	WindowSize = 1	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14530	AckNum: 14430	WindowSize = 2	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14545	AckNum: 14445	WindowSize = 3	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14740	AckNum: 14640	WindowSize = 1	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14755	AckNum: 14655	WindowSize = 2	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14770	AckNum: 14670	WindowSize = 3	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14785	AckNum: 14685	WindowSize = 4	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14800	AckNum: 14700	WindowSize = 5	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14815	AckNum: 14715	WindowSize = 6	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14830	AckNum: 14730	WindowSize = 7	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14845	AckNum: 14745	WindowSize = 8	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14860	AckNum: 14760	WindowSize = 9	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14875	AckNum: 14775	WindowSize = 10	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14890	AckNum: 14790	WindowSize = 11	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14905	AckNum: 14805	WindowSize = 12	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14920	AckNum: 14820	WindowSize = 13	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14935	AckNum: 14835	WindowSize = 14	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14950	AckNum: 14850	WindowSize = 15	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14640	AckNum: 14965	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14655	AckNum: 14980	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14670	AckNum: 14995	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14685	AckNum: 15010	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14700	AckNum: 15025	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14715	AckNum: 15040	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14730	AckNum: 15055	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14745	AckNum: 15070	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14760	AckNum: 15085	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14775	AckNum: 15100	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14790	AckNum: 15115	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14805	AckNum: 15130	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14820	AckNum: 15145	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14835	AckNum: 15160	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14850	AckNum: 15175	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14740	AckNum: 14640	WindowSize = 1	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14755	AckNum: 14655	WindowSize = 2	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14770	AckNum: 14670	WindowSize = 3	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14785	AckNum: 14685	WindowSize = 4	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14965	AckNum: 14865	WindowSize = 1	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14980	AckNum: 14880	WindowSize = 2	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 14995	AckNum: 14895	WindowSize = 3	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15010	AckNum: 14910	WindowSize = 4	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15025	AckNum: 14925	WindowSize = 5	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15040	AckNum: 14940	WindowSize = 6	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15055	AckNum: 14955	WindowSize = 7	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15070	AckNum: 14970	WindowSize = 8	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15085	AckNum: 14985	WindowSize = 9	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15100	AckNum: 15000	WindowSize = 10	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15115	AckNum: 15015	WindowSize = 11	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15130	AckNum: 15030	WindowSize = 12	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15145	AckNum: 15045	WindowSize = 13	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15160	AckNum: 15060	WindowSize = 14	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15175	AckNum: 15075	WindowSize = 15	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14865	AckNum: 15190	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14880	AckNum: 15205	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14895	AckNum: 15220	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14910	AckNum: 15235	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14925	AckNum: 15250	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14940	AckNum: 15265	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14955	AckNum: 15280	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14970	AckNum: 15295	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 14985	AckNum: 15310	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15000	AckNum: 15325	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15015	AckNum: 15340	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15030	AckNum: 15355	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15045	AckNum: 15370	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15060	AckNum: 15385	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15075	AckNum: 15400	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15190	AckNum: 15090	WindowSize = 1	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15205	AckNum: 15105	WindowSize = 2	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15220	AckNum: 15120	WindowSize = 3	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15235	AckNum: 15135	WindowSize = 4	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15250	AckNum: 15150	WindowSize = 5	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15265	AckNum: 15165	WindowSize = 6	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15280	AckNum: 15180	WindowSize = 7	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15295	AckNum: 15195	WindowSize = 8	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15310	AckNum: 15210	WindowSize = 9	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15325	AckNum: 15225	WindowSize = 10	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15340	AckNum: 15240	WindowSize = 11	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15355	AckNum: 15255	WindowSize = 12	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15370	AckNum: 15270	WindowSize = 13	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15385	AckNum: 15285	WindowSize = 14	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15400	AckNum: 15300	WindowSize = 15	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15090	AckNum: 15415	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15105	AckNum: 15430	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15120	AckNum: 15445	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15135	AckNum: 15460	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15150	AckNum: 15475	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15165	AckNum: 15490	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15180	AckNum: 15505	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15195	AckNum: 15520	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15210	AckNum: 15535	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15225	AckNum: 15550	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15240	AckNum: 15565	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15255	AckNum: 15580	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15270	AckNum: 15595	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15285	AckNum: 15610	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15300	AckNum: 15625	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15190	AckNum: 15090	WindowSize = 1	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15205	AckNum: 15105	WindowSize = 2	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15415	AckNum: 15315	WindowSize = 1	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15430	AckNum: 15330	WindowSize = 2	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15445	AckNum: 15345	WindowSize = 3	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15460	AckNum: 15360	WindowSize = 4	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15475	AckNum: 15375	WindowSize = 5	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15490	AckNum: 15390	WindowSize = 6	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15505	AckNum: 15405	WindowSize = 7	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15520	AckNum: 15420	WindowSize = 8	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15535	AckNum: 15435	WindowSize = 9	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15550	AckNum: 15450	WindowSize = 10	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15565	AckNum: 15465	WindowSize = 11	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15580	AckNum: 15480	WindowSize = 12	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15595	AckNum: 15495	WindowSize = 13	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15610	AckNum: 15510	WindowSize = 14	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15625	AckNum: 15525	WindowSize = 15	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15315	AckNum: 15640	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15330	AckNum: 15655	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15345	AckNum: 15670	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15360	AckNum: 15685	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15375	AckNum: 15700	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15390	AckNum: 15715	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15405	AckNum: 15730	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15420	AckNum: 15745	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15435	AckNum: 15760	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15450	AckNum: 15775	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15465	AckNum: 15790	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15480	AckNum: 15805	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15495	AckNum: 15820	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15510	AckNum: 15835	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15525	AckNum: 15850	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15640	AckNum: 15540	WindowSize = 1	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15655	AckNum: 15555	WindowSize = 2	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15670	AckNum: 15570	WindowSize = 3	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15685	AckNum: 15585	WindowSize = 4	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15700	AckNum: 15600	WindowSize = 5	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15715	AckNum: 15615	WindowSize = 6	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15730	AckNum: 15630	WindowSize = 7	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15745	AckNum: 15645	WindowSize = 8	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15760	AckNum: 15660	WindowSize = 9	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15775	AckNum: 15675	WindowSize = 10	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15790	AckNum: 15690	WindowSize = 11	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15805	AckNum: 15705	WindowSize = 12	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15820	AckNum: 15720	WindowSize = 13	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15835	AckNum: 15735	WindowSize = 14	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15850	AckNum: 15750	WindowSize = 15	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15540	AckNum: 15865	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15555	AckNum: 15880	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15570	AckNum: 15895	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15585	AckNum: 15910	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15600	AckNum: 15925	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15615	AckNum: 15940	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15630	AckNum: 15955	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15645	AckNum: 15970	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15660	AckNum: 15985	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15675	AckNum: 16000	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15690	AckNum: 16015	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15705	AckNum: 16030	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15720	AckNum: 16045	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15735	AckNum: 16060	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15750	AckNum: 16075	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15865	AckNum: 15765	WindowSize = 1	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15880	AckNum: 15780	WindowSize = 2	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15895	AckNum: 15795	WindowSize = 3	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15910	AckNum: 15810	WindowSize = 4	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15925	AckNum: 15825	WindowSize = 5	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15940	AckNum: 15840	WindowSize = 6	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15955	AckNum: 15855	WindowSize = 7	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15970	AckNum: 15870	WindowSize = 8	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15985	AckNum: 15885	WindowSize = 9	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16000	AckNum: 15900	WindowSize = 10	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16015	AckNum: 15915	WindowSize = 11	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16030	AckNum: 15930	WindowSize = 12	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16045	AckNum: 15945	WindowSize = 13	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16060	AckNum: 15960	WindowSize = 14	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16075	AckNum: 15975	WindowSize = 15	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15765	AckNum: 16090	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15780	AckNum: 16105	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15795	AckNum: 16120	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15810	AckNum: 16135	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15825	AckNum: 16150	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15840	AckNum: 16165	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15855	AckNum: 16180	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15870	AckNum: 16195	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15885	AckNum: 16210	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15900	AckNum: 16225	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15915	AckNum: 16240	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15930	AckNum: 16255	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15945	AckNum: 16270	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15960	AckNum: 16285	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15975	AckNum: 16300	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 15865	AckNum: 15765	WindowSize = 1	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16090	AckNum: 15990	WindowSize = 1	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16105	AckNum: 16005	WindowSize = 2	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16120	AckNum: 16020	WindowSize = 3	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16135	AckNum: 16035	WindowSize = 4	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16150	AckNum: 16050	WindowSize = 5	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16165	AckNum: 16065	WindowSize = 6	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16180	AckNum: 16080	WindowSize = 7	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16195	AckNum: 16095	WindowSize = 8	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16210	AckNum: 16110	WindowSize = 9	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16225	AckNum: 16125	WindowSize = 10	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16240	AckNum: 16140	WindowSize = 11	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16255	AckNum: 16155	WindowSize = 12	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16270	AckNum: 16170	WindowSize = 13	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16285	AckNum: 16185	WindowSize = 14	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16300	AckNum: 16200	WindowSize = 15	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 15990	AckNum: 16315	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16005	AckNum: 16330	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16020	AckNum: 16345	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16035	AckNum: 16360	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16050	AckNum: 16375	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16065	AckNum: 16390	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16080	AckNum: 16405	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16095	AckNum: 16420	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16110	AckNum: 16435	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16125	AckNum: 16450	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16140	AckNum: 16465	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16155	AckNum: 16480	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16170	AckNum: 16495	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16185	AckNum: 16510	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16200	AckNum: 16525	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16090	AckNum: 15990	WindowSize = 1	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16315	AckNum: 16215	WindowSize = 1	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16330	AckNum: 16230	WindowSize = 2	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16345	AckNum: 16245	WindowSize = 3	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16360	AckNum: 16260	WindowSize = 4	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16375	AckNum: 16275	WindowSize = 5	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16390	AckNum: 16290	WindowSize = 6	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16405	AckNum: 16305	WindowSize = 7	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16420	AckNum: 16320	WindowSize = 8	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16435	AckNum: 16335	WindowSize = 9	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16450	AckNum: 16350	WindowSize = 10	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16465	AckNum: 16365	WindowSize = 11	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16480	AckNum: 16380	WindowSize = 12	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16495	AckNum: 16395	WindowSize = 13	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16510	AckNum: 16410	WindowSize = 14	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16525	AckNum: 16425	WindowSize = 15	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16215	AckNum: 16540	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16230	AckNum: 16555	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16245	AckNum: 16570	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16260	AckNum: 16585	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16275	AckNum: 16600	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16290	AckNum: 16615	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16305	AckNum: 16630	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16320	AckNum: 16645	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16335	AckNum: 16660	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16350	AckNum: 16675	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16365	AckNum: 16690	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16380	AckNum: 16705	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16395	AckNum: 16720	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16410	AckNum: 16735	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16425	AckNum: 16750	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16540	AckNum: 16440	WindowSize = 1	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16555	AckNum: 16455	WindowSize = 2	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16570	AckNum: 16470	WindowSize = 3	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16585	AckNum: 16485	WindowSize = 4	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16600	AckNum: 16500	WindowSize = 5	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16615	AckNum: 16515	WindowSize = 6	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16630	AckNum: 16530	WindowSize = 7	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16645	AckNum: 16545	WindowSize = 8	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16660	AckNum: 16560	WindowSize = 9	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16675	AckNum: 16575	WindowSize = 10	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16690	AckNum: 16590	WindowSize = 11	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16705	AckNum: 16605	WindowSize = 12	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16720	AckNum: 16620	WindowSize = 13	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16735	AckNum: 16635	WindowSize = 14	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16750	AckNum: 16650	WindowSize = 15	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16440	AckNum: 16765	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16455	AckNum: 16780	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16470	AckNum: 16795	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16485	AckNum: 16810	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16500	AckNum: 16825	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16515	AckNum: 16840	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16530	AckNum: 16855	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16545	AckNum: 16870	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16560	AckNum: 16885	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16575	AckNum: 16900	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16590	AckNum: 16915	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16605	AckNum: 16930	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16620	AckNum: 16945	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16635	AckNum: 16960	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16650	AckNum: 16975	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16540	AckNum: 16440	WindowSize = 1	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16555	AckNum: 16455	WindowSize = 2	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16765	AckNum: 16665	WindowSize = 1	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16780	AckNum: 16680	WindowSize = 2	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16795	AckNum: 16695	WindowSize = 3	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16810	AckNum: 16710	WindowSize = 4	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16825	AckNum: 16725	WindowSize = 5	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16840	AckNum: 16740	WindowSize = 6	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16855	AckNum: 16755	WindowSize = 7	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16870	AckNum: 16770	WindowSize = 8	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16885	AckNum: 16785	WindowSize = 9	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16900	AckNum: 16800	WindowSize = 10	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16915	AckNum: 16815	WindowSize = 11	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16930	AckNum: 16830	WindowSize = 12	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16945	AckNum: 16845	WindowSize = 13	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16960	AckNum: 16860	WindowSize = 14	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16975	AckNum: 16875	WindowSize = 15	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16665	AckNum: 16990	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16680	AckNum: 17005	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16695	AckNum: 17020	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16710	AckNum: 17035	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16725	AckNum: 17050	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16740	AckNum: 17065	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16755	AckNum: 17080	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16770	AckNum: 17095	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16785	AckNum: 17110	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16800	AckNum: 17125	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16815	AckNum: 17140	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16830	AckNum: 17155	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16845	AckNum: 17170	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16860	AckNum: 17185	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16875	AckNum: 17200	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16990	AckNum: 16890	WindowSize = 1	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17005	AckNum: 16905	WindowSize = 2	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17020	AckNum: 16920	WindowSize = 3	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17035	AckNum: 16935	WindowSize = 4	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17050	AckNum: 16950	WindowSize = 5	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17065	AckNum: 16965	WindowSize = 6	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17080	AckNum: 16980	WindowSize = 7	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17095	AckNum: 16995	WindowSize = 8	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17110	AckNum: 17010	WindowSize = 9	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17125	AckNum: 17025	WindowSize = 10	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17140	AckNum: 17040	WindowSize = 11	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17155	AckNum: 17055	WindowSize = 12	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17170	AckNum: 17070	WindowSize = 13	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17185	AckNum: 17085	WindowSize = 14	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17200	AckNum: 17100	WindowSize = 15	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16890	AckNum: 17215	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16905	AckNum: 17230	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16920	AckNum: 17245	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16935	AckNum: 17260	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16950	AckNum: 17275	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16965	AckNum: 17290	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16980	AckNum: 17305	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 16995	AckNum: 17320	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17010	AckNum: 17335	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17025	AckNum: 17350	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17040	AckNum: 17365	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17055	AckNum: 17380	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17070	AckNum: 17395	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17085	AckNum: 17410	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17100	AckNum: 17425	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 16990	AckNum: 16890	WindowSize = 1	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17005	AckNum: 16905	WindowSize = 2	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17020	AckNum: 16920	WindowSize = 3	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17035	AckNum: 16935	WindowSize = 4	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17050	AckNum: 16950	WindowSize = 5	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17215	AckNum: 17115	WindowSize = 1	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17230	AckNum: 17130	WindowSize = 2	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17245	AckNum: 17145	WindowSize = 3	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17260	AckNum: 17160	WindowSize = 4	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17275	AckNum: 17175	WindowSize = 5	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17290	AckNum: 17190	WindowSize = 6	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17305	AckNum: 17205	WindowSize = 7	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17320	AckNum: 17220	WindowSize = 8	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17335	AckNum: 17235	WindowSize = 9	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17350	AckNum: 17250	WindowSize = 10	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17365	AckNum: 17265	WindowSize = 11	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17380	AckNum: 17280	WindowSize = 12	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17395	AckNum: 17295	WindowSize = 13	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17410	AckNum: 17310	WindowSize = 14	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17425	AckNum: 17325	WindowSize = 15	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17115	AckNum: 17440	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17130	AckNum: 17455	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17145	AckNum: 17470	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17160	AckNum: 17485	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17175	AckNum: 17500	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17190	AckNum: 17515	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17205	AckNum: 17530	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17220	AckNum: 17545	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17235	AckNum: 17560	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17250	AckNum: 17575	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17265	AckNum: 17590	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17280	AckNum: 17605	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17295	AckNum: 17620	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17310	AckNum: 17635	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17325	AckNum: 17650	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17440	AckNum: 17340	WindowSize = 1	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17455	AckNum: 17355	WindowSize = 2	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17470	AckNum: 17370	WindowSize = 3	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17485	AckNum: 17385	WindowSize = 4	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17500	AckNum: 17400	WindowSize = 5	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17515	AckNum: 17415	WindowSize = 6	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17530	AckNum: 17430	WindowSize = 7	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17545	AckNum: 17445	WindowSize = 8	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17560	AckNum: 17460	WindowSize = 9	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17575	AckNum: 17475	WindowSize = 10	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17590	AckNum: 17490	WindowSize = 11	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17605	AckNum: 17505	WindowSize = 12	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17620	AckNum: 17520	WindowSize = 13	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17635	AckNum: 17535	WindowSize = 14	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17650	AckNum: 17550	WindowSize = 15	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17340	AckNum: 17665	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17355	AckNum: 17680	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17370	AckNum: 17695	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17385	AckNum: 17710	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17400	AckNum: 17725	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17415	AckNum: 17740	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17430	AckNum: 17755	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17445	AckNum: 17770	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17460	AckNum: 17785	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17475	AckNum: 17800	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17490	AckNum: 17815	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17505	AckNum: 17830	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17520	AckNum: 17845	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17535	AckNum: 17860	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17550	AckNum: 17875	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17440	AckNum: 17340	WindowSize = 1	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17455	AckNum: 17355	WindowSize = 2	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17665	AckNum: 17565	WindowSize = 1	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17680	AckNum: 17580	WindowSize = 2	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17695	AckNum: 17595	WindowSize = 3	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17710	AckNum: 17610	WindowSize = 4	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17725	AckNum: 17625	WindowSize = 5	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17740	AckNum: 17640	WindowSize = 6	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17755	AckNum: 17655	WindowSize = 7	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17770	AckNum: 17670	WindowSize = 8	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17785	AckNum: 17685	WindowSize = 9	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17800	AckNum: 17700	WindowSize = 10	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17815	AckNum: 17715	WindowSize = 11	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17830	AckNum: 17730	WindowSize = 12	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17845	AckNum: 17745	WindowSize = 13	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17860	AckNum: 17760	WindowSize = 14	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17875	AckNum: 17775	WindowSize = 15	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17565	AckNum: 17890	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17580	AckNum: 17905	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17595	AckNum: 17920	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17610	AckNum: 17935	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17625	AckNum: 17950	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17640	AckNum: 17965	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17655	AckNum: 17980	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17670	AckNum: 17995	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17685	AckNum: 18010	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17700	AckNum: 18025	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17715	AckNum: 18040	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17730	AckNum: 18055	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17745	AckNum: 18070	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17760	AckNum: 18085	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17775	AckNum: 18100	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17890	AckNum: 17790	WindowSize = 1	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17905	AckNum: 17805	WindowSize = 2	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17920	AckNum: 17820	WindowSize = 3	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17935	AckNum: 17835	WindowSize = 4	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17950	AckNum: 17850	WindowSize = 5	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17965	AckNum: 17865	WindowSize = 6	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17980	AckNum: 17880	WindowSize = 7	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17995	AckNum: 17895	WindowSize = 8	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18010	AckNum: 17910	WindowSize = 9	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18025	AckNum: 17925	WindowSize = 10	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18040	AckNum: 17940	WindowSize = 11	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18055	AckNum: 17955	WindowSize = 12	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18070	AckNum: 17970	WindowSize = 13	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18085	AckNum: 17985	WindowSize = 14	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18100	AckNum: 18000	WindowSize = 15	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17790	AckNum: 18115	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17805	AckNum: 18130	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17820	AckNum: 18145	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17835	AckNum: 18160	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17850	AckNum: 18175	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17865	AckNum: 18190	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17880	AckNum: 18205	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17895	AckNum: 18220	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17910	AckNum: 18235	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17925	AckNum: 18250	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17940	AckNum: 18265	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17955	AckNum: 18280	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17970	AckNum: 18295	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 17985	AckNum: 18310	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18000	AckNum: 18325	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 17890	AckNum: 17790	WindowSize = 1	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18115	AckNum: 18015	WindowSize = 1	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18130	AckNum: 18030	WindowSize = 2	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18145	AckNum: 18045	WindowSize = 3	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18160	AckNum: 18060	WindowSize = 4	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18175	AckNum: 18075	WindowSize = 5	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18190	AckNum: 18090	WindowSize = 6	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18205	AckNum: 18105	WindowSize = 7	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18220	AckNum: 18120	WindowSize = 8	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18235	AckNum: 18135	WindowSize = 9	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18250	AckNum: 18150	WindowSize = 10	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18265	AckNum: 18165	WindowSize = 11	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18280	AckNum: 18180	WindowSize = 12	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18295	AckNum: 18195	WindowSize = 13	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18310	AckNum: 18210	WindowSize = 14	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18325	AckNum: 18225	WindowSize = 15	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18015	AckNum: 18340	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18030	AckNum: 18355	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18045	AckNum: 18370	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18060	AckNum: 18385	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18075	AckNum: 18400	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18090	AckNum: 18415	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18105	AckNum: 18430	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18120	AckNum: 18445	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18135	AckNum: 18460	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18150	AckNum: 18475	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18165	AckNum: 18490	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18180	AckNum: 18505	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18195	AckNum: 18520	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18210	AckNum: 18535	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18225	AckNum: 18550	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18340	AckNum: 18240	WindowSize = 1	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18355	AckNum: 18255	WindowSize = 2	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18370	AckNum: 18270	WindowSize = 3	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18385	AckNum: 18285	WindowSize = 4	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18400	AckNum: 18300	WindowSize = 5	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18415	AckNum: 18315	WindowSize = 6	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18430	AckNum: 18330	WindowSize = 7	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18445	AckNum: 18345	WindowSize = 8	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18460	AckNum: 18360	WindowSize = 9	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18475	AckNum: 18375	WindowSize = 10	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18490	AckNum: 18390	WindowSize = 11	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18505	AckNum: 18405	WindowSize = 12	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18520	AckNum: 18420	WindowSize = 13	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18535	AckNum: 18435	WindowSize = 14	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18550	AckNum: 18450	WindowSize = 15	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18240	AckNum: 18565	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18255	AckNum: 18580	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18270	AckNum: 18595	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18285	AckNum: 18610	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18300	AckNum: 18625	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18315	AckNum: 18640	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18330	AckNum: 18655	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18345	AckNum: 18670	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18360	AckNum: 18685	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18375	AckNum: 18700	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18390	AckNum: 18715	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18405	AckNum: 18730	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18420	AckNum: 18745	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18435	AckNum: 18760	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18450	AckNum: 18775	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18565	AckNum: 18465	WindowSize = 1	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18580	AckNum: 18480	WindowSize = 2	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18595	AckNum: 18495	WindowSize = 3	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18610	AckNum: 18510	WindowSize = 4	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18625	AckNum: 18525	WindowSize = 5	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18640	AckNum: 18540	WindowSize = 6	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18655	AckNum: 18555	WindowSize = 7	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18670	AckNum: 18570	WindowSize = 8	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18685	AckNum: 18585	WindowSize = 9	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18700	AckNum: 18600	WindowSize = 10	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18715	AckNum: 18615	WindowSize = 11	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18730	AckNum: 18630	WindowSize = 12	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18745	AckNum: 18645	WindowSize = 13	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18760	AckNum: 18660	WindowSize = 14	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18775	AckNum: 18675	WindowSize = 15	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18465	AckNum: 18790	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18480	AckNum: 18805	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18495	AckNum: 18820	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18510	AckNum: 18835	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18525	AckNum: 18850	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18540	AckNum: 18865	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18555	AckNum: 18880	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18570	AckNum: 18895	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18585	AckNum: 18910	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18600	AckNum: 18925	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18615	AckNum: 18940	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18630	AckNum: 18955	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18645	AckNum: 18970	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18660	AckNum: 18985	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18675	AckNum: 19000	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18790	AckNum: 18690	WindowSize = 1	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18805	AckNum: 18705	WindowSize = 2	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18820	AckNum: 18720	WindowSize = 3	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18835	AckNum: 18735	WindowSize = 4	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18850	AckNum: 18750	WindowSize = 5	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18865	AckNum: 18765	WindowSize = 6	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18880	AckNum: 18780	WindowSize = 7	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18895	AckNum: 18795	WindowSize = 8	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18910	AckNum: 18810	WindowSize = 9	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18925	AckNum: 18825	WindowSize = 10	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18940	AckNum: 18840	WindowSize = 11	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18955	AckNum: 18855	WindowSize = 12	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18970	AckNum: 18870	WindowSize = 13	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 18985	AckNum: 18885	WindowSize = 14	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19000	AckNum: 18900	WindowSize = 15	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18690	AckNum: 19015	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18705	AckNum: 19030	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18720	AckNum: 19045	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18735	AckNum: 19060	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18750	AckNum: 19075	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18765	AckNum: 19090	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18780	AckNum: 19105	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18795	AckNum: 19120	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18810	AckNum: 19135	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18825	AckNum: 19150	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18840	AckNum: 19165	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18855	AckNum: 19180	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18870	AckNum: 19195	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18885	AckNum: 19210	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18900	AckNum: 19225	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19015	AckNum: 18915	WindowSize = 1	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19030	AckNum: 18930	WindowSize = 2	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19045	AckNum: 18945	WindowSize = 3	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19060	AckNum: 18960	WindowSize = 4	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19075	AckNum: 18975	WindowSize = 5	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19090	AckNum: 18990	WindowSize = 6	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19105	AckNum: 19005	WindowSize = 7	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19120	AckNum: 19020	WindowSize = 8	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19135	AckNum: 19035	WindowSize = 9	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19150	AckNum: 19050	WindowSize = 10	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19165	AckNum: 19065	WindowSize = 11	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19180	AckNum: 19080	WindowSize = 12	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19195	AckNum: 19095	WindowSize = 13	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19210	AckNum: 19110	WindowSize = 14	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19225	AckNum: 19125	WindowSize = 15	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18915	AckNum: 19240	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18930	AckNum: 19255	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18945	AckNum: 19270	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18960	AckNum: 19285	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18975	AckNum: 19300	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 18990	AckNum: 19315	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19005	AckNum: 19330	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19020	AckNum: 19345	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19035	AckNum: 19360	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19050	AckNum: 19375	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19065	AckNum: 19390	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19080	AckNum: 19405	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19095	AckNum: 19420	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19110	AckNum: 19435	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19125	AckNum: 19450	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19015	AckNum: 18915	WindowSize = 1	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19030	AckNum: 18930	WindowSize = 2	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19045	AckNum: 18945	WindowSize = 3	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19060	AckNum: 18960	WindowSize = 4	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19075	AckNum: 18975	WindowSize = 5	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19090	AckNum: 18990	WindowSize = 6	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19240	AckNum: 19140	WindowSize = 1	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19255	AckNum: 19155	WindowSize = 2	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19270	AckNum: 19170	WindowSize = 3	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19285	AckNum: 19185	WindowSize = 4	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19300	AckNum: 19200	WindowSize = 5	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19315	AckNum: 19215	WindowSize = 6	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19330	AckNum: 19230	WindowSize = 7	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19345	AckNum: 19245	WindowSize = 8	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19360	AckNum: 19260	WindowSize = 9	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19375	AckNum: 19275	WindowSize = 10	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19390	AckNum: 19290	WindowSize = 11	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19405	AckNum: 19305	WindowSize = 12	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19420	AckNum: 19320	WindowSize = 13	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19435	AckNum: 19335	WindowSize = 14	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19450	AckNum: 19350	WindowSize = 15	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19140	AckNum: 19465	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19155	AckNum: 19480	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19170	AckNum: 19495	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19185	AckNum: 19510	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19200	AckNum: 19525	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19215	AckNum: 19540	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19230	AckNum: 19555	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19245	AckNum: 19570	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19260	AckNum: 19585	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19275	AckNum: 19600	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19290	AckNum: 19615	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19305	AckNum: 19630	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19320	AckNum: 19645	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19335	AckNum: 19660	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19350	AckNum: 19675	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19465	AckNum: 19365	WindowSize = 1	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19480	AckNum: 19380	WindowSize = 2	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19495	AckNum: 19395	WindowSize = 3	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19510	AckNum: 19410	WindowSize = 4	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19525	AckNum: 19425	WindowSize = 5	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19540	AckNum: 19440	WindowSize = 6	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19555	AckNum: 19455	WindowSize = 7	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19570	AckNum: 19470	WindowSize = 8	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19585	AckNum: 19485	WindowSize = 9	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19600	AckNum: 19500	WindowSize = 10	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19615	AckNum: 19515	WindowSize = 11	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19630	AckNum: 19530	WindowSize = 12	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19645	AckNum: 19545	WindowSize = 13	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19660	AckNum: 19560	WindowSize = 14	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19675	AckNum: 19575	WindowSize = 15	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19365	AckNum: 19690	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19380	AckNum: 19705	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19395	AckNum: 19720	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19410	AckNum: 19735	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19425	AckNum: 19750	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19440	AckNum: 19765	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19455	AckNum: 19780	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19470	AckNum: 19795	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19485	AckNum: 19810	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19500	AckNum: 19825	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19515	AckNum: 19840	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19530	AckNum: 19855	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19545	AckNum: 19870	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19560	AckNum: 19885	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19575	AckNum: 19900	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19465	AckNum: 19365	WindowSize = 1	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19480	AckNum: 19380	WindowSize = 2	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19495	AckNum: 19395	WindowSize = 3	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19510	AckNum: 19410	WindowSize = 4	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19690	AckNum: 19590	WindowSize = 1	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19705	AckNum: 19605	WindowSize = 2	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19720	AckNum: 19620	WindowSize = 3	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19735	AckNum: 19635	WindowSize = 4	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19750	AckNum: 19650	WindowSize = 5	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19765	AckNum: 19665	WindowSize = 6	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19780	AckNum: 19680	WindowSize = 7	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19795	AckNum: 19695	WindowSize = 8	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19810	AckNum: 19710	WindowSize = 9	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19825	AckNum: 19725	WindowSize = 10	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19840	AckNum: 19740	WindowSize = 11	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19855	AckNum: 19755	WindowSize = 12	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19870	AckNum: 19770	WindowSize = 13	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19885	AckNum: 19785	WindowSize = 14	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19900	AckNum: 19800	WindowSize = 15	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19590	AckNum: 19915	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19605	AckNum: 19930	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19620	AckNum: 19945	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19635	AckNum: 19960	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19650	AckNum: 19975	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19665	AckNum: 19990	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19680	AckNum: 20005	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19695	AckNum: 20020	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19710	AckNum: 20035	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19725	AckNum: 20050	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19740	AckNum: 20065	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19755	AckNum: 20080	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19770	AckNum: 20095	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19785	AckNum: 20110	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19800	AckNum: 20125	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19690	AckNum: 19590	WindowSize = 1	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19915	AckNum: 19815	WindowSize = 1	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19930	AckNum: 19830	WindowSize = 2	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19945	AckNum: 19845	WindowSize = 3	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19960	AckNum: 19860	WindowSize = 4	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19975	AckNum: 19875	WindowSize = 5	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19990	AckNum: 19890	WindowSize = 6	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20005	AckNum: 19905	WindowSize = 7	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20020	AckNum: 19920	WindowSize = 8	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20035	AckNum: 19935	WindowSize = 9	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20050	AckNum: 19950	WindowSize = 10	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20065	AckNum: 19965	WindowSize = 11	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20080	AckNum: 19980	WindowSize = 12	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20095	AckNum: 19995	WindowSize = 13	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20110	AckNum: 20010	WindowSize = 14	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20125	AckNum: 20025	WindowSize = 15	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19815	AckNum: 20140	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19830	AckNum: 20155	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19845	AckNum: 20170	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19860	AckNum: 20185	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19875	AckNum: 20200	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19890	AckNum: 20215	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19905	AckNum: 20230	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19920	AckNum: 20245	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19935	AckNum: 20260	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19950	AckNum: 20275	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19965	AckNum: 20290	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19980	AckNum: 20305	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 19995	AckNum: 20320	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20010	AckNum: 20335	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20025	AckNum: 20350	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 19915	AckNum: 19815	WindowSize = 1	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20140	AckNum: 20040	WindowSize = 1	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20155	AckNum: 20055	WindowSize = 2	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20170	AckNum: 20070	WindowSize = 3	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20185	AckNum: 20085	WindowSize = 4	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20200	AckNum: 20100	WindowSize = 5	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20215	AckNum: 20115	WindowSize = 6	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20230	AckNum: 20130	WindowSize = 7	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20245	AckNum: 20145	WindowSize = 8	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20260	AckNum: 20160	WindowSize = 9	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20275	AckNum: 20175	WindowSize = 10	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20290	AckNum: 20190	WindowSize = 11	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20305	AckNum: 20205	WindowSize = 12	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20320	AckNum: 20220	WindowSize = 13	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20335	AckNum: 20235	WindowSize = 14	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20350	AckNum: 20250	WindowSize = 15	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20040	AckNum: 20365	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20055	AckNum: 20380	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20070	AckNum: 20395	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20085	AckNum: 20410	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20100	AckNum: 20425	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20115	AckNum: 20440	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20130	AckNum: 20455	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20145	AckNum: 20470	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20160	AckNum: 20485	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20175	AckNum: 20500	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20190	AckNum: 20515	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20205	AckNum: 20530	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20220	AckNum: 20545	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20235	AckNum: 20560	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20250	AckNum: 20575	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20365	AckNum: 20265	WindowSize = 1	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20380	AckNum: 20280	WindowSize = 2	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20395	AckNum: 20295	WindowSize = 3	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20410	AckNum: 20310	WindowSize = 4	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20425	AckNum: 20325	WindowSize = 5	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20440	AckNum: 20340	WindowSize = 6	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20455	AckNum: 20355	WindowSize = 7	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20470	AckNum: 20370	WindowSize = 8	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20485	AckNum: 20385	WindowSize = 9	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20500	AckNum: 20400	WindowSize = 10	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20515	AckNum: 20415	WindowSize = 11	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20530	AckNum: 20430	WindowSize = 12	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20545	AckNum: 20445	WindowSize = 13	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20560	AckNum: 20460	WindowSize = 14	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20575	AckNum: 20475	WindowSize = 15	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20265	AckNum: 20590	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20280	AckNum: 20605	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20295	AckNum: 20620	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20310	AckNum: 20635	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20325	AckNum: 20650	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20340	AckNum: 20665	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20355	AckNum: 20680	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20370	AckNum: 20695	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20385	AckNum: 20710	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20400	AckNum: 20725	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20415	AckNum: 20740	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20430	AckNum: 20755	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20445	AckNum: 20770	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20460	AckNum: 20785	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20475	AckNum: 20800	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20590	AckNum: 20490	WindowSize = 1	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20605	AckNum: 20505	WindowSize = 2	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20620	AckNum: 20520	WindowSize = 3	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20635	AckNum: 20535	WindowSize = 4	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20650	AckNum: 20550	WindowSize = 5	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20665	AckNum: 20565	WindowSize = 6	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20680	AckNum: 20580	WindowSize = 7	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20695	AckNum: 20595	WindowSize = 8	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20710	AckNum: 20610	WindowSize = 9	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20725	AckNum: 20625	WindowSize = 10	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20740	AckNum: 20640	WindowSize = 11	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20755	AckNum: 20655	WindowSize = 12	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20770	AckNum: 20670	WindowSize = 13	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20785	AckNum: 20685	WindowSize = 14	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20800	AckNum: 20700	WindowSize = 15	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20490	AckNum: 20815	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20505	AckNum: 20830	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20520	AckNum: 20845	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20535	AckNum: 20860	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20550	AckNum: 20875	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20565	AckNum: 20890	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20580	AckNum: 20905	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20595	AckNum: 20920	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20610	AckNum: 20935	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20625	AckNum: 20950	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20640	AckNum: 20965	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20655	AckNum: 20980	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20670	AckNum: 20995	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20685	AckNum: 21010	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20700	AckNum: 21025	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20590	AckNum: 20490	WindowSize = 1	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20815	AckNum: 20715	WindowSize = 1	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20830	AckNum: 20730	WindowSize = 2	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20845	AckNum: 20745	WindowSize = 3	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20860	AckNum: 20760	WindowSize = 4	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20875	AckNum: 20775	WindowSize = 5	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20890	AckNum: 20790	WindowSize = 6	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20905	AckNum: 20805	WindowSize = 7	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20920	AckNum: 20820	WindowSize = 8	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20935	AckNum: 20835	WindowSize = 9	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20950	AckNum: 20850	WindowSize = 10	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20965	AckNum: 20865	WindowSize = 11	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20980	AckNum: 20880	WindowSize = 12	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 20995	AckNum: 20895	WindowSize = 13	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21010	AckNum: 20910	WindowSize = 14	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21025	AckNum: 20925	WindowSize = 15	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20715	AckNum: 21040	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20730	AckNum: 21055	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20745	AckNum: 21070	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20760	AckNum: 21085	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20775	AckNum: 21100	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20790	AckNum: 21115	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20805	AckNum: 21130	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20820	AckNum: 21145	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20835	AckNum: 21160	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20850	AckNum: 21175	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20865	AckNum: 21190	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20880	AckNum: 21205	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20895	AckNum: 21220	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20910	AckNum: 21235	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20925	AckNum: 21250	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21040	AckNum: 20940	WindowSize = 1	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21055	AckNum: 20955	WindowSize = 2	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21070	AckNum: 20970	WindowSize = 3	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21085	AckNum: 20985	WindowSize = 4	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21100	AckNum: 21000	WindowSize = 5	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21115	AckNum: 21015	WindowSize = 6	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21130	AckNum: 21030	WindowSize = 7	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21145	AckNum: 21045	WindowSize = 8	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21160	AckNum: 21060	WindowSize = 9	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21175	AckNum: 21075	WindowSize = 10	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21190	AckNum: 21090	WindowSize = 11	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21205	AckNum: 21105	WindowSize = 12	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21220	AckNum: 21120	WindowSize = 13	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21235	AckNum: 21135	WindowSize = 14	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21250	AckNum: 21150	WindowSize = 15	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20940	AckNum: 21265	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20955	AckNum: 21280	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20970	AckNum: 21295	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 20985	AckNum: 21310	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21000	AckNum: 21325	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21015	AckNum: 21340	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21030	AckNum: 21355	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21045	AckNum: 21370	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21060	AckNum: 21385	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21075	AckNum: 21400	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21090	AckNum: 21415	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21105	AckNum: 21430	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21120	AckNum: 21445	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21135	AckNum: 21460	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21150	AckNum: 21475	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21040	AckNum: 20940	WindowSize = 1	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21055	AckNum: 20955	WindowSize = 2	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21070	AckNum: 20970	WindowSize = 3	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21085	AckNum: 20985	WindowSize = 4	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21100	AckNum: 21000	WindowSize = 5	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21265	AckNum: 21165	WindowSize = 1	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21280	AckNum: 21180	WindowSize = 2	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21295	AckNum: 21195	WindowSize = 3	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21310	AckNum: 21210	WindowSize = 4	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21325	AckNum: 21225	WindowSize = 5	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21340	AckNum: 21240	WindowSize = 6	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21355	AckNum: 21255	WindowSize = 7	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21370	AckNum: 21270	WindowSize = 8	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21385	AckNum: 21285	WindowSize = 9	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21400	AckNum: 21300	WindowSize = 10	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21415	AckNum: 21315	WindowSize = 11	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21430	AckNum: 21330	WindowSize = 12	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21445	AckNum: 21345	WindowSize = 13	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21460	AckNum: 21360	WindowSize = 14	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21475	AckNum: 21375	WindowSize = 15	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21165	AckNum: 21490	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21180	AckNum: 21505	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21195	AckNum: 21520	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21210	AckNum: 21535	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21225	AckNum: 21550	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21240	AckNum: 21565	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21255	AckNum: 21580	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21270	AckNum: 21595	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21285	AckNum: 21610	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21300	AckNum: 21625	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21315	AckNum: 21640	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21330	AckNum: 21655	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21345	AckNum: 21670	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21360	AckNum: 21685	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21375	AckNum: 21700	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21265	AckNum: 21165	WindowSize = 1	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21280	AckNum: 21180	WindowSize = 2	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21490	AckNum: 21390	WindowSize = 1	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21505	AckNum: 21405	WindowSize = 2	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21520	AckNum: 21420	WindowSize = 3	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21535	AckNum: 21435	WindowSize = 4	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21550	AckNum: 21450	WindowSize = 5	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21565	AckNum: 21465	WindowSize = 6	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21580	AckNum: 21480	WindowSize = 7	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21595	AckNum: 21495	WindowSize = 8	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21610	AckNum: 21510	WindowSize = 9	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21625	AckNum: 21525	WindowSize = 10	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21640	AckNum: 21540	WindowSize = 11	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21655	AckNum: 21555	WindowSize = 12	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21670	AckNum: 21570	WindowSize = 13	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21685	AckNum: 21585	WindowSize = 14	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21700	AckNum: 21600	WindowSize = 15	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21390	AckNum: 21715	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21405	AckNum: 21730	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21420	AckNum: 21745	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21435	AckNum: 21760	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21450	AckNum: 21775	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21465	AckNum: 21790	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21480	AckNum: 21805	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21495	AckNum: 21820	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21510	AckNum: 21835	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21525	AckNum: 21850	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21540	AckNum: 21865	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21555	AckNum: 21880	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21570	AckNum: 21895	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21585	AckNum: 21910	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21600	AckNum: 21925	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21490	AckNum: 21390	WindowSize = 1	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21715	AckNum: 21615	WindowSize = 1	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21730	AckNum: 21630	WindowSize = 2	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21745	AckNum: 21645	WindowSize = 3	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21760	AckNum: 21660	WindowSize = 4	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21775	AckNum: 21675	WindowSize = 5	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21790	AckNum: 21690	WindowSize = 6	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21805	AckNum: 21705	WindowSize = 7	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21820	AckNum: 21720	WindowSize = 8	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21835	AckNum: 21735	WindowSize = 9	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21850	AckNum: 21750	WindowSize = 10	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21865	AckNum: 21765	WindowSize = 11	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21880	AckNum: 21780	WindowSize = 12	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21895	AckNum: 21795	WindowSize = 13	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21910	AckNum: 21810	WindowSize = 14	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21925	AckNum: 21825	WindowSize = 15	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21615	AckNum: 21940	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21630	AckNum: 21955	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21645	AckNum: 21970	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21660	AckNum: 21985	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21675	AckNum: 22000	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21690	AckNum: 22015	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21705	AckNum: 22030	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21720	AckNum: 22045	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21735	AckNum: 22060	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21750	AckNum: 22075	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21765	AckNum: 22090	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21780	AckNum: 22105	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21795	AckNum: 22120	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21810	AckNum: 22135	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21825	AckNum: 22150	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21715	AckNum: 21615	WindowSize = 1	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21940	AckNum: 21840	WindowSize = 1	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21955	AckNum: 21855	WindowSize = 2	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21970	AckNum: 21870	WindowSize = 3	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21985	AckNum: 21885	WindowSize = 4	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22000	AckNum: 21900	WindowSize = 5	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22015	AckNum: 21915	WindowSize = 6	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22030	AckNum: 21930	WindowSize = 7	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22045	AckNum: 21945	WindowSize = 8	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22060	AckNum: 21960	WindowSize = 9	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22075	AckNum: 21975	WindowSize = 10	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22090	AckNum: 21990	WindowSize = 11	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22105	AckNum: 22005	WindowSize = 12	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22120	AckNum: 22020	WindowSize = 13	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22135	AckNum: 22035	WindowSize = 14	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22150	AckNum: 22050	WindowSize = 15	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21840	AckNum: 22165	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21855	AckNum: 22180	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21870	AckNum: 22195	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21885	AckNum: 22210	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21900	AckNum: 22225	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21915	AckNum: 22240	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21930	AckNum: 22255	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21945	AckNum: 22270	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21960	AckNum: 22285	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21975	AckNum: 22300	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 21990	AckNum: 22315	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22005	AckNum: 22330	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22020	AckNum: 22345	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22035	AckNum: 22360	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22050	AckNum: 22375	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 21940	AckNum: 21840	WindowSize = 1	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22165	AckNum: 22065	WindowSize = 1	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22180	AckNum: 22080	WindowSize = 2	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22195	AckNum: 22095	WindowSize = 3	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22210	AckNum: 22110	WindowSize = 4	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22225	AckNum: 22125	WindowSize = 5	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22240	AckNum: 22140	WindowSize = 6	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22255	AckNum: 22155	WindowSize = 7	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22270	AckNum: 22170	WindowSize = 8	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22285	AckNum: 22185	WindowSize = 9	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22300	AckNum: 22200	WindowSize = 10	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22315	AckNum: 22215	WindowSize = 11	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22330	AckNum: 22230	WindowSize = 12	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22345	AckNum: 22245	WindowSize = 13	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22360	AckNum: 22260	WindowSize = 14	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22375	AckNum: 22275	WindowSize = 15	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22065	AckNum: 22390	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22080	AckNum: 22405	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22095	AckNum: 22420	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22110	AckNum: 22435	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22125	AckNum: 22450	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22140	AckNum: 22465	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22155	AckNum: 22480	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22170	AckNum: 22495	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22185	AckNum: 22510	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22200	AckNum: 22525	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22215	AckNum: 22540	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22230	AckNum: 22555	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22245	AckNum: 22570	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22260	AckNum: 22585	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22275	AckNum: 22600	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22390	AckNum: 22290	WindowSize = 1	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22405	AckNum: 22305	WindowSize = 2	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22420	AckNum: 22320	WindowSize = 3	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22435	AckNum: 22335	WindowSize = 4	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22450	AckNum: 22350	WindowSize = 5	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22465	AckNum: 22365	WindowSize = 6	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22480	AckNum: 22380	WindowSize = 7	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22495	AckNum: 22395	WindowSize = 8	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22510	AckNum: 22410	WindowSize = 9	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22525	AckNum: 22425	WindowSize = 10	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22540	AckNum: 22440	WindowSize = 11	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22555	AckNum: 22455	WindowSize = 12	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22570	AckNum: 22470	WindowSize = 13	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22585	AckNum: 22485	WindowSize = 14	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22600	AckNum: 22500	WindowSize = 15	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22290	AckNum: 22615	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22305	AckNum: 22630	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22320	AckNum: 22645	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22335	AckNum: 22660	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22350	AckNum: 22675	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22365	AckNum: 22690	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22380	AckNum: 22705	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22395	AckNum: 22720	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22410	AckNum: 22735	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22425	AckNum: 22750	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22440	AckNum: 22765	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22455	AckNum: 22780	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22470	AckNum: 22795	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22485	AckNum: 22810	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22500	AckNum: 22825	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22390	AckNum: 22290	WindowSize = 1	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22405	AckNum: 22305	WindowSize = 2	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22420	AckNum: 22320	WindowSize = 3	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22435	AckNum: 22335	WindowSize = 4	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22615	AckNum: 22515	WindowSize = 1	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22630	AckNum: 22530	WindowSize = 2	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22645	AckNum: 22545	WindowSize = 3	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22660	AckNum: 22560	WindowSize = 4	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22675	AckNum: 22575	WindowSize = 5	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22690	AckNum: 22590	WindowSize = 6	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22705	AckNum: 22605	WindowSize = 7	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22720	AckNum: 22620	WindowSize = 8	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22735	AckNum: 22635	WindowSize = 9	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22750	AckNum: 22650	WindowSize = 10	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22765	AckNum: 22665	WindowSize = 11	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22780	AckNum: 22680	WindowSize = 12	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22795	AckNum: 22695	WindowSize = 13	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22810	AckNum: 22710	WindowSize = 14	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22825	AckNum: 22725	WindowSize = 15	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22515	AckNum: 22840	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22530	AckNum: 22855	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22545	AckNum: 22870	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22560	AckNum: 22885	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22575	AckNum: 22900	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22590	AckNum: 22915	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22605	AckNum: 22930	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22620	AckNum: 22945	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22635	AckNum: 22960	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22650	AckNum: 22975	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22665	AckNum: 22990	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22680	AckNum: 23005	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22695	AckNum: 23020	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22710	AckNum: 23035	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22725	AckNum: 23050	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22840	AckNum: 22740	WindowSize = 1	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22855	AckNum: 22755	WindowSize = 2	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22870	AckNum: 22770	WindowSize = 3	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22885	AckNum: 22785	WindowSize = 4	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22900	AckNum: 22800	WindowSize = 5	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22915	AckNum: 22815	WindowSize = 6	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22930	AckNum: 22830	WindowSize = 7	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22945	AckNum: 22845	WindowSize = 8	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22960	AckNum: 22860	WindowSize = 9	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22975	AckNum: 22875	WindowSize = 10	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22990	AckNum: 22890	WindowSize = 11	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23005	AckNum: 22905	WindowSize = 12	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23020	AckNum: 22920	WindowSize = 13	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23035	AckNum: 22935	WindowSize = 14	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23050	AckNum: 22950	WindowSize = 15	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22740	AckNum: 23065	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22755	AckNum: 23080	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22770	AckNum: 23095	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22785	AckNum: 23110	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22800	AckNum: 23125	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22815	AckNum: 23140	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22830	AckNum: 23155	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22845	AckNum: 23170	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22860	AckNum: 23185	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22875	AckNum: 23200	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22890	AckNum: 23215	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22905	AckNum: 23230	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22920	AckNum: 23245	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22935	AckNum: 23260	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22950	AckNum: 23275	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22840	AckNum: 22740	WindowSize = 1	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22855	AckNum: 22755	WindowSize = 2	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 22870	AckNum: 22770	WindowSize = 3	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23065	AckNum: 22965	WindowSize = 1	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23080	AckNum: 22980	WindowSize = 2	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23095	AckNum: 22995	WindowSize = 3	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23110	AckNum: 23010	WindowSize = 4	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23125	AckNum: 23025	WindowSize = 5	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23140	AckNum: 23040	WindowSize = 6	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23155	AckNum: 23055	WindowSize = 7	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23170	AckNum: 23070	WindowSize = 8	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23185	AckNum: 23085	WindowSize = 9	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23200	AckNum: 23100	WindowSize = 10	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23215	AckNum: 23115	WindowSize = 11	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23230	AckNum: 23130	WindowSize = 12	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23245	AckNum: 23145	WindowSize = 13	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23260	AckNum: 23160	WindowSize = 14	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23275	AckNum: 23175	WindowSize = 15	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22965	AckNum: 23290	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22980	AckNum: 23305	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 22995	AckNum: 23320	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23010	AckNum: 23335	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23025	AckNum: 23350	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23040	AckNum: 23365	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23055	AckNum: 23380	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23070	AckNum: 23395	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23085	AckNum: 23410	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23100	AckNum: 23425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23115	AckNum: 23440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23130	AckNum: 23455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23145	AckNum: 23470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23160	AckNum: 23485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23175	AckNum: 23500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23065	AckNum: 22965	WindowSize = 1	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23290	AckNum: 23190	WindowSize = 1	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23305	AckNum: 23205	WindowSize = 2	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23320	AckNum: 23220	WindowSize = 3	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23335	AckNum: 23235	WindowSize = 4	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23350	AckNum: 23250	WindowSize = 5	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23365	AckNum: 23265	WindowSize = 6	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23380	AckNum: 23280	WindowSize = 7	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23395	AckNum: 23295	WindowSize = 8	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23410	AckNum: 23310	WindowSize = 9	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23425	AckNum: 23325	WindowSize = 10	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23440	AckNum: 23340	WindowSize = 11	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23455	AckNum: 23355	WindowSize = 12	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23470	AckNum: 23370	WindowSize = 13	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23485	AckNum: 23385	WindowSize = 14	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23500	AckNum: 23400	WindowSize = 15	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23190	AckNum: 23515	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23205	AckNum: 23530	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23220	AckNum: 23545	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23235	AckNum: 23560	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23250	AckNum: 23575	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23265	AckNum: 23590	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23280	AckNum: 23605	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23295	AckNum: 23620	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23310	AckNum: 23635	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23325	AckNum: 23650	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23340	AckNum: 23665	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23355	AckNum: 23680	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23370	AckNum: 23695	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23385	AckNum: 23710	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23400	AckNum: 23725	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23290	AckNum: 23190	WindowSize = 1	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23515	AckNum: 23415	WindowSize = 1	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23530	AckNum: 23430	WindowSize = 2	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23545	AckNum: 23445	WindowSize = 3	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23560	AckNum: 23460	WindowSize = 4	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23575	AckNum: 23475	WindowSize = 5	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23590	AckNum: 23490	WindowSize = 6	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23605	AckNum: 23505	WindowSize = 7	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23620	AckNum: 23520	WindowSize = 8	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23635	AckNum: 23535	WindowSize = 9	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23650	AckNum: 23550	WindowSize = 10	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23665	AckNum: 23565	WindowSize = 11	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23680	AckNum: 23580	WindowSize = 12	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23695	AckNum: 23595	WindowSize = 13	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23710	AckNum: 23610	WindowSize = 14	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23725	AckNum: 23625	WindowSize = 15	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23415	AckNum: 23740	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23430	AckNum: 23755	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23445	AckNum: 23770	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23460	AckNum: 23785	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23475	AckNum: 23800	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23490	AckNum: 23815	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23505	AckNum: 23830	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23520	AckNum: 23845	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23535	AckNum: 23860	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23550	AckNum: 23875	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23565	AckNum: 23890	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23580	AckNum: 23905	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23595	AckNum: 23920	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23610	AckNum: 23935	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23625	AckNum: 23950	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23515	AckNum: 23415	WindowSize = 1	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23530	AckNum: 23430	WindowSize = 2	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23740	AckNum: 23640	WindowSize = 1	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23755	AckNum: 23655	WindowSize = 2	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23770	AckNum: 23670	WindowSize = 3	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23785	AckNum: 23685	WindowSize = 4	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23800	AckNum: 23700	WindowSize = 5	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23815	AckNum: 23715	WindowSize = 6	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23830	AckNum: 23730	WindowSize = 7	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23845	AckNum: 23745	WindowSize = 8	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23860	AckNum: 23760	WindowSize = 9	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23875	AckNum: 23775	WindowSize = 10	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23890	AckNum: 23790	WindowSize = 11	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23905	AckNum: 23805	WindowSize = 12	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23920	AckNum: 23820	WindowSize = 13	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23935	AckNum: 23835	WindowSize = 14	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23950	AckNum: 23850	WindowSize = 15	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23640	AckNum: 23965	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23655	AckNum: 23980	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23670	AckNum: 23995	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23685	AckNum: 24010	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23700	AckNum: 24025	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23715	AckNum: 24040	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23730	AckNum: 24055	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23745	AckNum: 24070	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23760	AckNum: 24085	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23775	AckNum: 24100	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23790	AckNum: 24115	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23805	AckNum: 24130	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23820	AckNum: 24145	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23835	AckNum: 24160	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23850	AckNum: 24175	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23965	AckNum: 23865	WindowSize = 1	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23980	AckNum: 23880	WindowSize = 2	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 23995	AckNum: 23895	WindowSize = 3	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24010	AckNum: 23910	WindowSize = 4	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24025	AckNum: 23925	WindowSize = 5	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24040	AckNum: 23940	WindowSize = 6	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24055	AckNum: 23955	WindowSize = 7	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24070	AckNum: 23970	WindowSize = 8	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24085	AckNum: 23985	WindowSize = 9	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24100	AckNum: 24000	WindowSize = 10	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24115	AckNum: 24015	WindowSize = 11	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24130	AckNum: 24030	WindowSize = 12	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24145	AckNum: 24045	WindowSize = 13	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24160	AckNum: 24060	WindowSize = 14	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24175	AckNum: 24075	WindowSize = 15	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23865	AckNum: 24190	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23880	AckNum: 24205	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23895	AckNum: 24220	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23910	AckNum: 24235	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23925	AckNum: 24250	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23940	AckNum: 24265	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23955	AckNum: 24280	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23970	AckNum: 24295	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 23985	AckNum: 24310	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24000	AckNum: 24325	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24015	AckNum: 24340	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24030	AckNum: 24355	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24045	AckNum: 24370	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24060	AckNum: 24385	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24075	AckNum: 24400	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24190	AckNum: 24090	WindowSize = 1	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24205	AckNum: 24105	WindowSize = 2	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24220	AckNum: 24120	WindowSize = 3	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24235	AckNum: 24135	WindowSize = 4	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24250	AckNum: 24150	WindowSize = 5	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24265	AckNum: 24165	WindowSize = 6	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24280	AckNum: 24180	WindowSize = 7	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24295	AckNum: 24195	WindowSize = 8	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24310	AckNum: 24210	WindowSize = 9	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24325	AckNum: 24225	WindowSize = 10	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24340	AckNum: 24240	WindowSize = 11	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24355	AckNum: 24255	WindowSize = 12	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24370	AckNum: 24270	WindowSize = 13	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24385	AckNum: 24285	WindowSize = 14	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24400	AckNum: 24300	WindowSize = 15	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24090	AckNum: 24415	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24105	AckNum: 24430	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24120	AckNum: 24445	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24135	AckNum: 24460	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24150	AckNum: 24475	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24165	AckNum: 24490	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24180	AckNum: 24505	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24195	AckNum: 24520	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24210	AckNum: 24535	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24225	AckNum: 24550	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24240	AckNum: 24565	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24255	AckNum: 24580	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24270	AckNum: 24595	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24285	AckNum: 24610	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24300	AckNum: 24625	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24190	AckNum: 24090	WindowSize = 1	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24205	AckNum: 24105	WindowSize = 2	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24415	AckNum: 24315	WindowSize = 1	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24430	AckNum: 24330	WindowSize = 2	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24445	AckNum: 24345	WindowSize = 3	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24460	AckNum: 24360	WindowSize = 4	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24475	AckNum: 24375	WindowSize = 5	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24490	AckNum: 24390	WindowSize = 6	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24505	AckNum: 24405	WindowSize = 7	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24520	AckNum: 24420	WindowSize = 8	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24535	AckNum: 24435	WindowSize = 9	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24550	AckNum: 24450	WindowSize = 10	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24565	AckNum: 24465	WindowSize = 11	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24580	AckNum: 24480	WindowSize = 12	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24595	AckNum: 24495	WindowSize = 13	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24610	AckNum: 24510	WindowSize = 14	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24625	AckNum: 24525	WindowSize = 15	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24315	AckNum: 24640	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24330	AckNum: 24655	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24345	AckNum: 24670	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24360	AckNum: 24685	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24375	AckNum: 24700	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24390	AckNum: 24715	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24405	AckNum: 24730	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24420	AckNum: 24745	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24435	AckNum: 24760	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24450	AckNum: 24775	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24465	AckNum: 24790	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24480	AckNum: 24805	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24495	AckNum: 24820	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24510	AckNum: 24835	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24525	AckNum: 24850	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24415	AckNum: 24315	WindowSize = 1	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24430	AckNum: 24330	WindowSize = 2	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24640	AckNum: 24540	WindowSize = 1	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24655	AckNum: 24555	WindowSize = 2	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24670	AckNum: 24570	WindowSize = 3	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24685	AckNum: 24585	WindowSize = 4	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24700	AckNum: 24600	WindowSize = 5	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24715	AckNum: 24615	WindowSize = 6	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24730	AckNum: 24630	WindowSize = 7	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24745	AckNum: 24645	WindowSize = 8	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24760	AckNum: 24660	WindowSize = 9	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24775	AckNum: 24675	WindowSize = 10	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24790	AckNum: 24690	WindowSize = 11	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24805	AckNum: 24705	WindowSize = 12	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24820	AckNum: 24720	WindowSize = 13	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24835	AckNum: 24735	WindowSize = 14	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24850	AckNum: 24750	WindowSize = 15	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24540	AckNum: 24865	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24555	AckNum: 24880	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24570	AckNum: 24895	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24585	AckNum: 24910	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24600	AckNum: 24925	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24615	AckNum: 24940	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24630	AckNum: 24955	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24645	AckNum: 24970	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24660	AckNum: 24985	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24675	AckNum: 25000	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24690	AckNum: 25015	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24705	AckNum: 25030	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24720	AckNum: 25045	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24735	AckNum: 25060	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24750	AckNum: 25075	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24640	AckNum: 24540	WindowSize = 1	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24655	AckNum: 24555	WindowSize = 2	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24865	AckNum: 24765	WindowSize = 1	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24880	AckNum: 24780	WindowSize = 2	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24895	AckNum: 24795	WindowSize = 3	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24910	AckNum: 24810	WindowSize = 4	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24925	AckNum: 24825	WindowSize = 5	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24940	AckNum: 24840	WindowSize = 6	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24955	AckNum: 24855	WindowSize = 7	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24970	AckNum: 24870	WindowSize = 8	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 24985	AckNum: 24885	WindowSize = 9	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25000	AckNum: 24900	WindowSize = 10	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25015	AckNum: 24915	WindowSize = 11	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25030	AckNum: 24930	WindowSize = 12	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25045	AckNum: 24945	WindowSize = 13	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25060	AckNum: 24960	WindowSize = 14	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25075	AckNum: 24975	WindowSize = 15	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24765	AckNum: 25090	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24780	AckNum: 25105	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24795	AckNum: 25120	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24810	AckNum: 25135	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24825	AckNum: 25150	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24840	AckNum: 25165	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24855	AckNum: 25180	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24870	AckNum: 25195	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24885	AckNum: 25210	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24900	AckNum: 25225	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24915	AckNum: 25240	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24930	AckNum: 25255	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24945	AckNum: 25270	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24960	AckNum: 25285	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24975	AckNum: 25300	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25090	AckNum: 24990	WindowSize = 1	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25105	AckNum: 25005	WindowSize = 2	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25120	AckNum: 25020	WindowSize = 3	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25135	AckNum: 25035	WindowSize = 4	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25150	AckNum: 25050	WindowSize = 5	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25165	AckNum: 25065	WindowSize = 6	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25180	AckNum: 25080	WindowSize = 7	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25195	AckNum: 25095	WindowSize = 8	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25210	AckNum: 25110	WindowSize = 9	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25225	AckNum: 25125	WindowSize = 10	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25240	AckNum: 25140	WindowSize = 11	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25255	AckNum: 25155	WindowSize = 12	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25270	AckNum: 25170	WindowSize = 13	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25285	AckNum: 25185	WindowSize = 14	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25300	AckNum: 25200	WindowSize = 15	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 24990	AckNum: 25315	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25005	AckNum: 25330	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25020	AckNum: 25345	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25035	AckNum: 25360	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25050	AckNum: 25375	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25065	AckNum: 25390	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25080	AckNum: 25405	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25095	AckNum: 25420	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25110	AckNum: 25435	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25125	AckNum: 25450	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25140	AckNum: 25465	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25155	AckNum: 25480	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25170	AckNum: 25495	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25185	AckNum: 25510	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25200	AckNum: 25525	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25090	AckNum: 24990	WindowSize = 1	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25315	AckNum: 25215	WindowSize = 1	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25330	AckNum: 25230	WindowSize = 2	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25345	AckNum: 25245	WindowSize = 3	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25360	AckNum: 25260	WindowSize = 4	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25375	AckNum: 25275	WindowSize = 5	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25390	AckNum: 25290	WindowSize = 6	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25405	AckNum: 25305	WindowSize = 7	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25420	AckNum: 25320	WindowSize = 8	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25435	AckNum: 25335	WindowSize = 9	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25450	AckNum: 25350	WindowSize = 10	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25465	AckNum: 25365	WindowSize = 11	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25480	AckNum: 25380	WindowSize = 12	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25495	AckNum: 25395	WindowSize = 13	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25510	AckNum: 25410	WindowSize = 14	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25525	AckNum: 25425	WindowSize = 15	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25215	AckNum: 25540	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25230	AckNum: 25555	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25245	AckNum: 25570	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25260	AckNum: 25585	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25275	AckNum: 25600	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25290	AckNum: 25615	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25305	AckNum: 25630	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25320	AckNum: 25645	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25335	AckNum: 25660	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25350	AckNum: 25675	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25365	AckNum: 25690	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25380	AckNum: 25705	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25395	AckNum: 25720	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25410	AckNum: 25735	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25425	AckNum: 25750	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25315	AckNum: 25215	WindowSize = 1	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25540	AckNum: 25440	WindowSize = 1	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25555	AckNum: 25455	WindowSize = 2	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25570	AckNum: 25470	WindowSize = 3	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25585	AckNum: 25485	WindowSize = 4	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25600	AckNum: 25500	WindowSize = 5	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25615	AckNum: 25515	WindowSize = 6	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25630	AckNum: 25530	WindowSize = 7	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25645	AckNum: 25545	WindowSize = 8	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25660	AckNum: 25560	WindowSize = 9	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25675	AckNum: 25575	WindowSize = 10	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25690	AckNum: 25590	WindowSize = 11	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25705	AckNum: 25605	WindowSize = 12	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25720	AckNum: 25620	WindowSize = 13	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25735	AckNum: 25635	WindowSize = 14	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25750	AckNum: 25650	WindowSize = 15	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25440	AckNum: 25765	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25455	AckNum: 25780	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25470	AckNum: 25795	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25485	AckNum: 25810	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25500	AckNum: 25825	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25515	AckNum: 25840	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25530	AckNum: 25855	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25545	AckNum: 25870	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25560	AckNum: 25885	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25575	AckNum: 25900	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25590	AckNum: 25915	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25605	AckNum: 25930	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25620	AckNum: 25945	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25635	AckNum: 25960	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25650	AckNum: 25975	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25765	AckNum: 25665	WindowSize = 1	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25780	AckNum: 25680	WindowSize = 2	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25795	AckNum: 25695	WindowSize = 3	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25810	AckNum: 25710	WindowSize = 4	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25825	AckNum: 25725	WindowSize = 5	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25840	AckNum: 25740	WindowSize = 6	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25855	AckNum: 25755	WindowSize = 7	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25870	AckNum: 25770	WindowSize = 8	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25885	AckNum: 25785	WindowSize = 9	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25900	AckNum: 25800	WindowSize = 10	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25915	AckNum: 25815	WindowSize = 11	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25930	AckNum: 25830	WindowSize = 12	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25945	AckNum: 25845	WindowSize = 13	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25960	AckNum: 25860	WindowSize = 14	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25975	AckNum: 25875	WindowSize = 15	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25665	AckNum: 25990	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25680	AckNum: 26005	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25695	AckNum: 26020	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25710	AckNum: 26035	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25725	AckNum: 26050	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25740	AckNum: 26065	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25755	AckNum: 26080	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25770	AckNum: 26095	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25785	AckNum: 26110	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25800	AckNum: 26125	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25815	AckNum: 26140	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25830	AckNum: 26155	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25845	AckNum: 26170	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25860	AckNum: 26185	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25875	AckNum: 26200	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25765	AckNum: 25665	WindowSize = 1	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25780	AckNum: 25680	WindowSize = 2	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25795	AckNum: 25695	WindowSize = 3	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25810	AckNum: 25710	WindowSize = 4	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 25990	AckNum: 25890	WindowSize = 1	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26005	AckNum: 25905	WindowSize = 2	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26020	AckNum: 25920	WindowSize = 3	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26035	AckNum: 25935	WindowSize = 4	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26050	AckNum: 25950	WindowSize = 5	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26065	AckNum: 25965	WindowSize = 6	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26080	AckNum: 25980	WindowSize = 7	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26095	AckNum: 25995	WindowSize = 8	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26110	AckNum: 26010	WindowSize = 9	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26125	AckNum: 26025	WindowSize = 10	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26140	AckNum: 26040	WindowSize = 11	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26155	AckNum: 26055	WindowSize = 12	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26170	AckNum: 26070	WindowSize = 13	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26185	AckNum: 26085	WindowSize = 14	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26200	AckNum: 26100	WindowSize = 15	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25890	AckNum: 26215	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25905	AckNum: 26230	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25920	AckNum: 26245	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25935	AckNum: 26260	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25950	AckNum: 26275	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25965	AckNum: 26290	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25980	AckNum: 26305	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 25995	AckNum: 26320	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26010	AckNum: 26335	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26025	AckNum: 26350	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26040	AckNum: 26365	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26055	AckNum: 26380	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26070	AckNum: 26395	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26085	AckNum: 26410	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26100	AckNum: 26425	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26215	AckNum: 26115	WindowSize = 1	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26230	AckNum: 26130	WindowSize = 2	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26245	AckNum: 26145	WindowSize = 3	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26260	AckNum: 26160	WindowSize = 4	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26275	AckNum: 26175	WindowSize = 5	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26290	AckNum: 26190	WindowSize = 6	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26305	AckNum: 26205	WindowSize = 7	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26320	AckNum: 26220	WindowSize = 8	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26335	AckNum: 26235	WindowSize = 9	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26350	AckNum: 26250	WindowSize = 10	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26365	AckNum: 26265	WindowSize = 11	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26380	AckNum: 26280	WindowSize = 12	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26395	AckNum: 26295	WindowSize = 13	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26410	AckNum: 26310	WindowSize = 14	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26425	AckNum: 26325	WindowSize = 15	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26115	AckNum: 26440	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26130	AckNum: 26455	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26145	AckNum: 26470	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26160	AckNum: 26485	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26175	AckNum: 26500	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26190	AckNum: 26515	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26205	AckNum: 26530	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26220	AckNum: 26545	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26235	AckNum: 26560	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26250	AckNum: 26575	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26265	AckNum: 26590	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26280	AckNum: 26605	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26295	AckNum: 26620	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26310	AckNum: 26635	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26325	AckNum: 26650	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26440	AckNum: 26340	WindowSize = 1	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26455	AckNum: 26355	WindowSize = 2	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26470	AckNum: 26370	WindowSize = 3	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26485	AckNum: 26385	WindowSize = 4	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26500	AckNum: 26400	WindowSize = 5	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26515	AckNum: 26415	WindowSize = 6	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26530	AckNum: 26430	WindowSize = 7	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26545	AckNum: 26445	WindowSize = 8	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26560	AckNum: 26460	WindowSize = 9	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26575	AckNum: 26475	WindowSize = 10	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26590	AckNum: 26490	WindowSize = 11	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26605	AckNum: 26505	WindowSize = 12	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26620	AckNum: 26520	WindowSize = 13	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26635	AckNum: 26535	WindowSize = 14	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26650	AckNum: 26550	WindowSize = 15	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26340	AckNum: 26665	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26355	AckNum: 26680	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26370	AckNum: 26695	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26385	AckNum: 26710	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26400	AckNum: 26725	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26415	AckNum: 26740	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26430	AckNum: 26755	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26445	AckNum: 26770	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26460	AckNum: 26785	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26475	AckNum: 26800	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26490	AckNum: 26815	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26505	AckNum: 26830	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26520	AckNum: 26845	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26535	AckNum: 26860	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26550	AckNum: 26875	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26665	AckNum: 26565	WindowSize = 1	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26680	AckNum: 26580	WindowSize = 2	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26695	AckNum: 26595	WindowSize = 3	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26710	AckNum: 26610	WindowSize = 4	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26725	AckNum: 26625	WindowSize = 5	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26740	AckNum: 26640	WindowSize = 6	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26755	AckNum: 26655	WindowSize = 7	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26770	AckNum: 26670	WindowSize = 8	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26785	AckNum: 26685	WindowSize = 9	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26800	AckNum: 26700	WindowSize = 10	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26815	AckNum: 26715	WindowSize = 11	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26830	AckNum: 26730	WindowSize = 12	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26845	AckNum: 26745	WindowSize = 13	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26860	AckNum: 26760	WindowSize = 14	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26875	AckNum: 26775	WindowSize = 15	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26565	AckNum: 26890	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26580	AckNum: 26905	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26595	AckNum: 26920	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26610	AckNum: 26935	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26625	AckNum: 26950	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26640	AckNum: 26965	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26655	AckNum: 26980	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26670	AckNum: 26995	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26685	AckNum: 27010	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26700	AckNum: 27025	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26715	AckNum: 27040	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26730	AckNum: 27055	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26745	AckNum: 27070	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26760	AckNum: 27085	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26775	AckNum: 27100	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26665	AckNum: 26565	WindowSize = 1	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26680	AckNum: 26580	WindowSize = 2	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26890	AckNum: 26790	WindowSize = 1	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26905	AckNum: 26805	WindowSize = 2	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26920	AckNum: 26820	WindowSize = 3	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26935	AckNum: 26835	WindowSize = 4	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26950	AckNum: 26850	WindowSize = 5	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26965	AckNum: 26865	WindowSize = 6	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26980	AckNum: 26880	WindowSize = 7	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26995	AckNum: 26895	WindowSize = 8	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27010	AckNum: 26910	WindowSize = 9	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27025	AckNum: 26925	WindowSize = 10	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27040	AckNum: 26940	WindowSize = 11	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27055	AckNum: 26955	WindowSize = 12	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27070	AckNum: 26970	WindowSize = 13	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27085	AckNum: 26985	WindowSize = 14	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27100	AckNum: 27000	WindowSize = 15	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26790	AckNum: 27115	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26805	AckNum: 27130	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26820	AckNum: 27145	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26835	AckNum: 27160	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26850	AckNum: 27175	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26865	AckNum: 27190	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26880	AckNum: 27205	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26895	AckNum: 27220	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26910	AckNum: 27235	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26925	AckNum: 27250	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26940	AckNum: 27265	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26955	AckNum: 27280	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26970	AckNum: 27295	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 26985	AckNum: 27310	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27000	AckNum: 27325	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26890	AckNum: 26790	WindowSize = 1	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 26905	AckNum: 26805	WindowSize = 2	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27115	AckNum: 27015	WindowSize = 1	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27130	AckNum: 27030	WindowSize = 2	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27145	AckNum: 27045	WindowSize = 3	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27160	AckNum: 27060	WindowSize = 4	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27175	AckNum: 27075	WindowSize = 5	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27190	AckNum: 27090	WindowSize = 6	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27205	AckNum: 27105	WindowSize = 7	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27220	AckNum: 27120	WindowSize = 8	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27235	AckNum: 27135	WindowSize = 9	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27250	AckNum: 27150	WindowSize = 10	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27265	AckNum: 27165	WindowSize = 11	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27280	AckNum: 27180	WindowSize = 12	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27295	AckNum: 27195	WindowSize = 13	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27310	AckNum: 27210	WindowSize = 14	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27325	AckNum: 27225	WindowSize = 15	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27015	AckNum: 27340	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27030	AckNum: 27355	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27045	AckNum: 27370	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27060	AckNum: 27385	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27075	AckNum: 27400	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27090	AckNum: 27415	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27105	AckNum: 27430	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27120	AckNum: 27445	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27135	AckNum: 27460	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27150	AckNum: 27475	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27165	AckNum: 27490	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27180	AckNum: 27505	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27195	AckNum: 27520	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27210	AckNum: 27535	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27225	AckNum: 27550	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27115	AckNum: 27015	WindowSize = 1	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27340	AckNum: 27240	WindowSize = 1	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27355	AckNum: 27255	WindowSize = 2	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27370	AckNum: 27270	WindowSize = 3	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27385	AckNum: 27285	WindowSize = 4	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27400	AckNum: 27300	WindowSize = 5	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27415	AckNum: 27315	WindowSize = 6	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27430	AckNum: 27330	WindowSize = 7	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27445	AckNum: 27345	WindowSize = 8	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27460	AckNum: 27360	WindowSize = 9	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27475	AckNum: 27375	WindowSize = 10	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27490	AckNum: 27390	WindowSize = 11	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27505	AckNum: 27405	WindowSize = 12	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27520	AckNum: 27420	WindowSize = 13	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27535	AckNum: 27435	WindowSize = 14	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27550	AckNum: 27450	WindowSize = 15	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27240	AckNum: 27565	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27255	AckNum: 27580	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27270	AckNum: 27595	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27285	AckNum: 27610	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27300	AckNum: 27625	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27315	AckNum: 27640	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27330	AckNum: 27655	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27345	AckNum: 27670	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27360	AckNum: 27685	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27375	AckNum: 27700	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27390	AckNum: 27715	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27405	AckNum: 27730	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27420	AckNum: 27745	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27435	AckNum: 27760	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27450	AckNum: 27775	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27565	AckNum: 27465	WindowSize = 1	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27580	AckNum: 27480	WindowSize = 2	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27595	AckNum: 27495	WindowSize = 3	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27610	AckNum: 27510	WindowSize = 4	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27625	AckNum: 27525	WindowSize = 5	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27640	AckNum: 27540	WindowSize = 6	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27655	AckNum: 27555	WindowSize = 7	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27670	AckNum: 27570	WindowSize = 8	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27685	AckNum: 27585	WindowSize = 9	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27700	AckNum: 27600	WindowSize = 10	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27715	AckNum: 27615	WindowSize = 11	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27730	AckNum: 27630	WindowSize = 12	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27745	AckNum: 27645	WindowSize = 13	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27760	AckNum: 27660	WindowSize = 14	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27775	AckNum: 27675	WindowSize = 15	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27465	AckNum: 27790	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27480	AckNum: 27805	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27495	AckNum: 27820	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27510	AckNum: 27835	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27525	AckNum: 27850	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27540	AckNum: 27865	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27555	AckNum: 27880	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27570	AckNum: 27895	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27585	AckNum: 27910	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27600	AckNum: 27925	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27615	AckNum: 27940	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27630	AckNum: 27955	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27645	AckNum: 27970	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27660	AckNum: 27985	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27675	AckNum: 28000	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27565	AckNum: 27465	WindowSize = 1	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27580	AckNum: 27480	WindowSize = 2	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27790	AckNum: 27690	WindowSize = 1	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27805	AckNum: 27705	WindowSize = 2	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27820	AckNum: 27720	WindowSize = 3	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27835	AckNum: 27735	WindowSize = 4	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27850	AckNum: 27750	WindowSize = 5	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27865	AckNum: 27765	WindowSize = 6	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27880	AckNum: 27780	WindowSize = 7	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27895	AckNum: 27795	WindowSize = 8	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27910	AckNum: 27810	WindowSize = 9	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27925	AckNum: 27825	WindowSize = 10	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27940	AckNum: 27840	WindowSize = 11	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27955	AckNum: 27855	WindowSize = 12	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27970	AckNum: 27870	WindowSize = 13	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27985	AckNum: 27885	WindowSize = 14	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28000	AckNum: 27900	WindowSize = 15	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27690	AckNum: 28015	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27705	AckNum: 28030	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27720	AckNum: 28045	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27735	AckNum: 28060	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27750	AckNum: 28075	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27765	AckNum: 28090	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27780	AckNum: 28105	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27795	AckNum: 28120	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27810	AckNum: 28135	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27825	AckNum: 28150	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27840	AckNum: 28165	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27855	AckNum: 28180	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27870	AckNum: 28195	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27885	AckNum: 28210	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27900	AckNum: 28225	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27790	AckNum: 27690	WindowSize = 1	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 27805	AckNum: 27705	WindowSize = 2	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28015	AckNum: 27915	WindowSize = 1	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28030	AckNum: 27930	WindowSize = 2	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28045	AckNum: 27945	WindowSize = 3	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28060	AckNum: 27960	WindowSize = 4	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28075	AckNum: 27975	WindowSize = 5	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28090	AckNum: 27990	WindowSize = 6	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28105	AckNum: 28005	WindowSize = 7	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28120	AckNum: 28020	WindowSize = 8	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28135	AckNum: 28035	WindowSize = 9	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28150	AckNum: 28050	WindowSize = 10	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28165	AckNum: 28065	WindowSize = 11	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28180	AckNum: 28080	WindowSize = 12	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28195	AckNum: 28095	WindowSize = 13	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28210	AckNum: 28110	WindowSize = 14	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28225	AckNum: 28125	WindowSize = 15	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27915	AckNum: 28240	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27930	AckNum: 28255	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27945	AckNum: 28270	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27960	AckNum: 28285	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27975	AckNum: 28300	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 27990	AckNum: 28315	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28005	AckNum: 28330	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28020	AckNum: 28345	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28035	AckNum: 28360	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28050	AckNum: 28375	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28065	AckNum: 28390	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28080	AckNum: 28405	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28095	AckNum: 28420	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28110	AckNum: 28435	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28125	AckNum: 28450	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28015	AckNum: 27915	WindowSize = 1	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28030	AckNum: 27930	WindowSize = 2	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28240	AckNum: 28140	WindowSize = 1	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28255	AckNum: 28155	WindowSize = 2	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28270	AckNum: 28170	WindowSize = 3	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28285	AckNum: 28185	WindowSize = 4	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28300	AckNum: 28200	WindowSize = 5	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28315	AckNum: 28215	WindowSize = 6	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28330	AckNum: 28230	WindowSize = 7	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28345	AckNum: 28245	WindowSize = 8	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28360	AckNum: 28260	WindowSize = 9	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28375	AckNum: 28275	WindowSize = 10	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28390	AckNum: 28290	WindowSize = 11	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28405	AckNum: 28305	WindowSize = 12	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28420	AckNum: 28320	WindowSize = 13	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28435	AckNum: 28335	WindowSize = 14	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28450	AckNum: 28350	WindowSize = 15	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28140	AckNum: 28465	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28155	AckNum: 28480	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28170	AckNum: 28495	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28185	AckNum: 28510	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28200	AckNum: 28525	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28215	AckNum: 28540	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28230	AckNum: 28555	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28245	AckNum: 28570	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28260	AckNum: 28585	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28275	AckNum: 28600	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28290	AckNum: 28615	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28305	AckNum: 28630	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28320	AckNum: 28645	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28335	AckNum: 28660	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28350	AckNum: 28675	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28465	AckNum: 28365	WindowSize = 1	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28480	AckNum: 28380	WindowSize = 2	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28495	AckNum: 28395	WindowSize = 3	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28510	AckNum: 28410	WindowSize = 4	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28525	AckNum: 28425	WindowSize = 5	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28540	AckNum: 28440	WindowSize = 6	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28555	AckNum: 28455	WindowSize = 7	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28570	AckNum: 28470	WindowSize = 8	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28585	AckNum: 28485	WindowSize = 9	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28600	AckNum: 28500	WindowSize = 10	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28615	AckNum: 28515	WindowSize = 11	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28630	AckNum: 28530	WindowSize = 12	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28645	AckNum: 28545	WindowSize = 13	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28660	AckNum: 28560	WindowSize = 14	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28675	AckNum: 28575	WindowSize = 15	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28365	AckNum: 28690	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28380	AckNum: 28705	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28395	AckNum: 28720	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28410	AckNum: 28735	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28425	AckNum: 28750	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28440	AckNum: 28765	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28455	AckNum: 28780	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28470	AckNum: 28795	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28485	AckNum: 28810	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28500	AckNum: 28825	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28515	AckNum: 28840	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28530	AckNum: 28855	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28545	AckNum: 28870	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28560	AckNum: 28885	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28575	AckNum: 28900	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28690	AckNum: 28590	WindowSize = 1	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28705	AckNum: 28605	WindowSize = 2	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28720	AckNum: 28620	WindowSize = 3	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28735	AckNum: 28635	WindowSize = 4	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28750	AckNum: 28650	WindowSize = 5	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28765	AckNum: 28665	WindowSize = 6	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28780	AckNum: 28680	WindowSize = 7	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28795	AckNum: 28695	WindowSize = 8	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28810	AckNum: 28710	WindowSize = 9	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28825	AckNum: 28725	WindowSize = 10	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28840	AckNum: 28740	WindowSize = 11	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28855	AckNum: 28755	WindowSize = 12	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28870	AckNum: 28770	WindowSize = 13	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28885	AckNum: 28785	WindowSize = 14	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28900	AckNum: 28800	WindowSize = 15	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28590	AckNum: 28915	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28605	AckNum: 28930	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28620	AckNum: 28945	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28635	AckNum: 28960	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28650	AckNum: 28975	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28665	AckNum: 28990	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28680	AckNum: 29005	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28695	AckNum: 29020	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28710	AckNum: 29035	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28725	AckNum: 29050	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28740	AckNum: 29065	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28755	AckNum: 29080	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28770	AckNum: 29095	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28785	AckNum: 29110	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28800	AckNum: 29125	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28690	AckNum: 28590	WindowSize = 1	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28915	AckNum: 28815	WindowSize = 1	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28930	AckNum: 28830	WindowSize = 2	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28945	AckNum: 28845	WindowSize = 3	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28960	AckNum: 28860	WindowSize = 4	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28975	AckNum: 28875	WindowSize = 5	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28990	AckNum: 28890	WindowSize = 6	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29005	AckNum: 28905	WindowSize = 7	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29020	AckNum: 28920	WindowSize = 8	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29035	AckNum: 28935	WindowSize = 9	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29050	AckNum: 28950	WindowSize = 10	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29065	AckNum: 28965	WindowSize = 11	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29080	AckNum: 28980	WindowSize = 12	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29095	AckNum: 28995	WindowSize = 13	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29110	AckNum: 29010	WindowSize = 14	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29125	AckNum: 29025	WindowSize = 15	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28815	AckNum: 29140	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28830	AckNum: 29155	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28845	AckNum: 29170	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28860	AckNum: 29185	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28875	AckNum: 29200	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28890	AckNum: 29215	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28905	AckNum: 29230	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28920	AckNum: 29245	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28935	AckNum: 29260	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28950	AckNum: 29275	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28965	AckNum: 29290	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28980	AckNum: 29305	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 28995	AckNum: 29320	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29010	AckNum: 29335	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29025	AckNum: 29350	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28915	AckNum: 28815	WindowSize = 1	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 28930	AckNum: 28830	WindowSize = 2	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29140	AckNum: 29040	WindowSize = 1	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29155	AckNum: 29055	WindowSize = 2	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29170	AckNum: 29070	WindowSize = 3	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29185	AckNum: 29085	WindowSize = 4	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29200	AckNum: 29100	WindowSize = 5	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29215	AckNum: 29115	WindowSize = 6	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29230	AckNum: 29130	WindowSize = 7	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29245	AckNum: 29145	WindowSize = 8	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29260	AckNum: 29160	WindowSize = 9	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29275	AckNum: 29175	WindowSize = 10	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29290	AckNum: 29190	WindowSize = 11	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29305	AckNum: 29205	WindowSize = 12	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29320	AckNum: 29220	WindowSize = 13	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29335	AckNum: 29235	WindowSize = 14	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29350	AckNum: 29250	WindowSize = 15	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29040	AckNum: 29365	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29055	AckNum: 29380	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29070	AckNum: 29395	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29085	AckNum: 29410	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29100	AckNum: 29425	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29115	AckNum: 29440	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29130	AckNum: 29455	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29145	AckNum: 29470	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29160	AckNum: 29485	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29175	AckNum: 29500	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29190	AckNum: 29515	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29205	AckNum: 29530	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29220	AckNum: 29545	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29235	AckNum: 29560	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29250	AckNum: 29575	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29365	AckNum: 29265	WindowSize = 1	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29380	AckNum: 29280	WindowSize = 2	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29395	AckNum: 29295	WindowSize = 3	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29410	AckNum: 29310	WindowSize = 4	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29425	AckNum: 29325	WindowSize = 5	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29440	AckNum: 29340	WindowSize = 6	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29455	AckNum: 29355	WindowSize = 7	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29470	AckNum: 29370	WindowSize = 8	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29485	AckNum: 29385	WindowSize = 9	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29500	AckNum: 29400	WindowSize = 10	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29515	AckNum: 29415	WindowSize = 11	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29530	AckNum: 29430	WindowSize = 12	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29545	AckNum: 29445	WindowSize = 13	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29560	AckNum: 29460	WindowSize = 14	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29575	AckNum: 29475	WindowSize = 15	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29265	AckNum: 29590	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29280	AckNum: 29605	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29295	AckNum: 29620	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29310	AckNum: 29635	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29325	AckNum: 29650	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29340	AckNum: 29665	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29355	AckNum: 29680	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29370	AckNum: 29695	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29385	AckNum: 29710	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29400	AckNum: 29725	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29415	AckNum: 29740	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29430	AckNum: 29755	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29445	AckNum: 29770	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29460	AckNum: 29785	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29475	AckNum: 29800	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29365	AckNum: 29265	WindowSize = 1	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29380	AckNum: 29280	WindowSize = 2	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29590	AckNum: 29490	WindowSize = 1	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29605	AckNum: 29505	WindowSize = 2	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29620	AckNum: 29520	WindowSize = 3	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29635	AckNum: 29535	WindowSize = 4	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29650	AckNum: 29550	WindowSize = 5	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29665	AckNum: 29565	WindowSize = 6	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29680	AckNum: 29580	WindowSize = 7	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29695	AckNum: 29595	WindowSize = 8	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29710	AckNum: 29610	WindowSize = 9	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29725	AckNum: 29625	WindowSize = 10	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29740	AckNum: 29640	WindowSize = 11	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29755	AckNum: 29655	WindowSize = 12	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29770	AckNum: 29670	WindowSize = 13	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29785	AckNum: 29685	WindowSize = 14	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29800	AckNum: 29700	WindowSize = 15	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29490	AckNum: 29815	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29505	AckNum: 29830	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29520	AckNum: 29845	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29535	AckNum: 29860	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29550	AckNum: 29875	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29565	AckNum: 29890	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29580	AckNum: 29905	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29595	AckNum: 29920	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29610	AckNum: 29935	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29625	AckNum: 29950	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29640	AckNum: 29965	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29655	AckNum: 29980	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29670	AckNum: 29995	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29685	AckNum: 30010	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29700	AckNum: 30025	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29590	AckNum: 29490	WindowSize = 1	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29605	AckNum: 29505	WindowSize = 2	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29620	AckNum: 29520	WindowSize = 3	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29635	AckNum: 29535	WindowSize = 4	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29815	AckNum: 29715	WindowSize = 1	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29830	AckNum: 29730	WindowSize = 2	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29845	AckNum: 29745	WindowSize = 3	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29860	AckNum: 29760	WindowSize = 4	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29875	AckNum: 29775	WindowSize = 5	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29890	AckNum: 29790	WindowSize = 6	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29905	AckNum: 29805	WindowSize = 7	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29920	AckNum: 29820	WindowSize = 8	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29935	AckNum: 29835	WindowSize = 9	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29950	AckNum: 29850	WindowSize = 10	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29965	AckNum: 29865	WindowSize = 11	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29980	AckNum: 29880	WindowSize = 12	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 29995	AckNum: 29895	WindowSize = 13	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30010	AckNum: 29910	WindowSize = 14	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30025	AckNum: 29925	WindowSize = 15	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29715	AckNum: 30040	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29730	AckNum: 30055	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29745	AckNum: 30070	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29760	AckNum: 30085	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29775	AckNum: 30100	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29790	AckNum: 30115	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29805	AckNum: 30130	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29820	AckNum: 30145	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29835	AckNum: 30160	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29850	AckNum: 30175	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29865	AckNum: 30190	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29880	AckNum: 30205	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29895	AckNum: 30220	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29910	AckNum: 30235	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29925	AckNum: 30250	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30040	AckNum: 29940	WindowSize = 1	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30055	AckNum: 29955	WindowSize = 2	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30070	AckNum: 29970	WindowSize = 3	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30085	AckNum: 29985	WindowSize = 4	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30100	AckNum: 30000	WindowSize = 5	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30115	AckNum: 30015	WindowSize = 6	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30130	AckNum: 30030	WindowSize = 7	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30145	AckNum: 30045	WindowSize = 8	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30160	AckNum: 30060	WindowSize = 9	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30175	AckNum: 30075	WindowSize = 10	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30190	AckNum: 30090	WindowSize = 11	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30205	AckNum: 30105	WindowSize = 12	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30220	AckNum: 30120	WindowSize = 13	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30235	AckNum: 30135	WindowSize = 14	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30250	AckNum: 30150	WindowSize = 15	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29940	AckNum: 30265	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29955	AckNum: 30280	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29970	AckNum: 30295	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 29985	AckNum: 30310	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30000	AckNum: 30325	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30015	AckNum: 30340	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30030	AckNum: 30355	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30045	AckNum: 30370	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30060	AckNum: 30385	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30075	AckNum: 30400	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30090	AckNum: 30415	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30105	AckNum: 30430	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30120	AckNum: 30445	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30135	AckNum: 30460	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30150	AckNum: 30475	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30265	AckNum: 30165	WindowSize = 1	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30280	AckNum: 30180	WindowSize = 2	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30295	AckNum: 30195	WindowSize = 3	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30310	AckNum: 30210	WindowSize = 4	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30325	AckNum: 30225	WindowSize = 5	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30340	AckNum: 30240	WindowSize = 6	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30355	AckNum: 30255	WindowSize = 7	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30370	AckNum: 30270	WindowSize = 8	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30385	AckNum: 30285	WindowSize = 9	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30400	AckNum: 30300	WindowSize = 10	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30415	AckNum: 30315	WindowSize = 11	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30430	AckNum: 30330	WindowSize = 12	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30445	AckNum: 30345	WindowSize = 13	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30460	AckNum: 30360	WindowSize = 14	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30475	AckNum: 30375	WindowSize = 15	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30165	AckNum: 30490	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30180	AckNum: 30505	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30195	AckNum: 30520	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30210	AckNum: 30535	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30225	AckNum: 30550	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30240	AckNum: 30565	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30255	AckNum: 30580	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30270	AckNum: 30595	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30285	AckNum: 30610	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30300	AckNum: 30625	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30315	AckNum: 30640	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30330	AckNum: 30655	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30345	AckNum: 30670	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30360	AckNum: 30685	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30375	AckNum: 30700	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30265	AckNum: 30165	WindowSize = 1	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30280	AckNum: 30180	WindowSize = 2	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30295	AckNum: 30195	WindowSize = 3	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30310	AckNum: 30210	WindowSize = 4	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30325	AckNum: 30225	WindowSize = 5	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30340	AckNum: 30240	WindowSize = 6	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30355	AckNum: 30255	WindowSize = 7	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30370	AckNum: 30270	WindowSize = 8	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30385	AckNum: 30285	WindowSize = 9	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30490	AckNum: 30390	WindowSize = 1	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30505	AckNum: 30405	WindowSize = 2	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30520	AckNum: 30420	WindowSize = 3	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30535	AckNum: 30435	WindowSize = 4	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30550	AckNum: 30450	WindowSize = 5	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30565	AckNum: 30465	WindowSize = 6	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30580	AckNum: 30480	WindowSize = 7	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30595	AckNum: 30495	WindowSize = 8	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30610	AckNum: 30510	WindowSize = 9	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30625	AckNum: 30525	WindowSize = 10	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30640	AckNum: 30540	WindowSize = 11	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30655	AckNum: 30555	WindowSize = 12	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30670	AckNum: 30570	WindowSize = 13	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30685	AckNum: 30585	WindowSize = 14	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30700	AckNum: 30600	WindowSize = 15	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30390	AckNum: 30715	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30405	AckNum: 30730	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30420	AckNum: 30745	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30435	AckNum: 30760	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30450	AckNum: 30775	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30465	AckNum: 30790	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30480	AckNum: 30805	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30495	AckNum: 30820	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30510	AckNum: 30835	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30525	AckNum: 30850	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30540	AckNum: 30865	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30555	AckNum: 30880	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30570	AckNum: 30895	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30585	AckNum: 30910	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30600	AckNum: 30925	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30490	AckNum: 30390	WindowSize = 1	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30715	AckNum: 30615	WindowSize = 1	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30730	AckNum: 30630	WindowSize = 2	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30745	AckNum: 30645	WindowSize = 3	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30760	AckNum: 30660	WindowSize = 4	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30775	AckNum: 30675	WindowSize = 5	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30790	AckNum: 30690	WindowSize = 6	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30805	AckNum: 30705	WindowSize = 7	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30820	AckNum: 30720	WindowSize = 8	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30835	AckNum: 30735	WindowSize = 9	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30850	AckNum: 30750	WindowSize = 10	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30865	AckNum: 30765	WindowSize = 11	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30880	AckNum: 30780	WindowSize = 12	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30895	AckNum: 30795	WindowSize = 13	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30910	AckNum: 30810	WindowSize = 14	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30925	AckNum: 30825	WindowSize = 15	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30615	AckNum: 30940	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30630	AckNum: 30955	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30645	AckNum: 30970	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30660	AckNum: 30985	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30675	AckNum: 31000	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30690	AckNum: 31015	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30705	AckNum: 31030	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30720	AckNum: 31045	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30735	AckNum: 31060	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30750	AckNum: 31075	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30765	AckNum: 31090	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30780	AckNum: 31105	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30795	AckNum: 31120	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30810	AckNum: 31135	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30825	AckNum: 31150	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30715	AckNum: 30615	WindowSize = 1	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30730	AckNum: 30630	WindowSize = 2	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30940	AckNum: 30840	WindowSize = 1	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30955	AckNum: 30855	WindowSize = 2	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the mod
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30970	AckNum: 30870	WindowSize = 3	data: el:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to han
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30985	AckNum: 30885	WindowSize = 4	data: dle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31000	AckNum: 30900	WindowSize = 5	data: specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - O
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31015	AckNum: 30915	WindowSize = 6	data: ne side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31030	AckNum: 30930	WindowSize = 7	data: e previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initia
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31045	AckNum: 30945	WindowSize = 8	data: te a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log f
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31060	AckNum: 30960	WindowSize = 9	data: ile at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31075	AckNum: 30975	WindowSize = 10	data: les are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31090	AckNum: 30990	WindowSize = 11	data: e in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Function
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31105	AckNum: 31005	WindowSize = 12	data: ality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31120	AckNum: 31020	WindowSize = 13	data:  that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This mea
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31135	AckNum: 31035	WindowSize = 14	data: ns that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31150	AckNum: 31050	WindowSize = 15	data: ree source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sendi
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30840	AckNum: 31165	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30855	AckNum: 31180	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30870	AckNum: 31195	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30885	AckNum: 31210	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30900	AckNum: 31225	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30915	AckNum: 31240	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30930	AckNum: 31255	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30945	AckNum: 31270	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30960	AckNum: 31285	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30975	AckNum: 31300	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 30990	AckNum: 31315	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31005	AckNum: 31330	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31020	AckNum: 31345	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31035	AckNum: 31360	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31050	AckNum: 31375	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 30940	AckNum: 30840	WindowSize = 1	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31165	AckNum: 31065	WindowSize = 1	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31180	AckNum: 31080	WindowSize = 2	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31195	AckNum: 31095	WindowSize = 3	data:  the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31210	AckNum: 31110	WindowSize = 4	data:  take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31225	AckNum: 31125	WindowSize = 5	data:  project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that s
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31240	AckNum: 31140	WindowSize = 6	data: how creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. T
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31255	AckNum: 31155	WindowSize = 7	data: he protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31270	AckNum: 31170	WindowSize = 8	data:  on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31285	AckNum: 31185	WindowSize = 9	data:  back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplic
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31300	AckNum: 31200	WindowSize = 10	data: ity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The Packet
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31315	AckNum: 31215	WindowSize = 11	data: Type field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31330	AckNum: 31230	WindowSize = 12	data: nd-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31345	AckNum: 31245	WindowSize = 13	data: taining the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31360	AckNum: 31260	WindowSize = 14	data: umbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31375	AckNum: 31275	WindowSize = 15	data: requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documen
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31065	AckNum: 31390	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31080	AckNum: 31405	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31095	AckNum: 31420	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31110	AckNum: 31435	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31125	AckNum: 31450	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31140	AckNum: 31465	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31155	AckNum: 31480	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31170	AckNum: 31495	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31185	AckNum: 31510	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31200	AckNum: 31525	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31215	AckNum: 31540	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31230	AckNum: 31555	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31245	AckNum: 31570	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31260	AckNum: 31585	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31275	AckNum: 31600	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31165	AckNum: 31065	WindowSize = 1	data: ng all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31180	AckNum: 31080	WindowSize = 2	data: of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31390	AckNum: 31290	WindowSize = 1	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31405	AckNum: 31305	WindowSize = 2	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31420	AckNum: 31320	WindowSize = 3	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31435	AckNum: 31335	WindowSize = 4	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31450	AckNum: 31350	WindowSize = 5	data:  can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31465	AckNum: 31365	WindowSize = 6	data: ckets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31480	AckNum: 31380	WindowSize = 7	data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31495	AckNum: 31395	WindowSize = 8	data: to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the pr
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31510	AckNum: 31410	WindowSize = 9	data: otocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will lik
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31525	AckNum: 31425	WindowSize = 10	data: e to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31540	AckNum: 31440	WindowSize = 11	data: :\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components show
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31555	AckNum: 31455	WindowSize = 12	data: n in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable ch
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31570	AckNum: 31470	WindowSize = 13	data: annel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31585	AckNum: 31485	WindowSize = 14	data: application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmissi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31600	AckNum: 31500	WindowSize = 15	data: on (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The Wind
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31290	AckNum: 31615	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31305	AckNum: 31630	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31320	AckNum: 31645	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31335	AckNum: 31660	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31350	AckNum: 31675	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31365	AckNum: 31690	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31380	AckNum: 31705	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31395	AckNum: 31720	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31410	AckNum: 31735	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31425	AckNum: 31750	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31440	AckNum: 31765	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31455	AckNum: 31780	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31470	AckNum: 31795	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31485	AckNum: 31810	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31500	AckNum: 31825	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31390	AckNum: 31290	WindowSize = 1	data: ts as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31405	AckNum: 31305	WindowSize = 2	data: e two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate pa
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31420	AckNum: 31320	WindowSize = 3	data: ckets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randoml
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31435	AckNum: 31335	WindowSize = 4	data: y discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31615	AckNum: 31515	WindowSize = 1	data: owSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31630	AckNum: 31530	WindowSize = 2	data: slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for vali
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31645	AckNum: 31545	WindowSize = 3	data: dating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wiresh
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31660	AckNum: 31560	WindowSize = 4	data: ark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonu
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31675	AckNum: 31575	WindowSize = 5	data: s marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and imp
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31690	AckNum: 31590	WindowSize = 6	data: lement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be de
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31705	AckNum: 31605	WindowSize = 7	data: signing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31720	AckNum: 31620	WindowSize = 8	data:  the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and l
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31735	AckNum: 31635	WindowSize = 9	data: ibraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31750	AckNum: 31650	WindowSize = 10	data:  depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the rece
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31765	AckNum: 31665	WindowSize = 11	data: iver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will prin
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31780	AckNum: 31680	WindowSize = 12	data: t out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a con
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31795	AckNum: 31695	WindowSize = 13	data: figuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other t
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31810	AckNum: 31710	WindowSize = 14	data: han the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf fo
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31825	AckNum: 31725	WindowSize = 15	data: rmat.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts o
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31515	AckNum: 31840	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31530	AckNum: 31855	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31545	AckNum: 31870	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31560	AckNum: 31885	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31575	AckNum: 31900	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31590	AckNum: 31915	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31605	AckNum: 31930	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31620	AckNum: 31945	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31635	AckNum: 31960	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31650	AckNum: 31975	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31665	AckNum: 31990	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31680	AckNum: 32005	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31695	AckNum: 32020	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31710	AckNum: 32035	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31725	AckNum: 32050	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31840	AckNum: 31740	WindowSize = 1	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31855	AckNum: 31755	WindowSize = 2	data: etwork errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator w
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31870	AckNum: 31770	WindowSize = 3	data: ill include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31885	AckNum: 31785	WindowSize = 4	data: from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31900	AckNum: 31800	WindowSize = 5	data:  field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple fram
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31915	AckNum: 31815	WindowSize = 6	data: es rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31930	AckNum: 31830	WindowSize = 7	data: , etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document c
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31945	AckNum: 31845	WindowSize = 8	data: omplete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation m
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31960	AckNum: 31860	WindowSize = 9	data: ethod. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT"
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31975	AckNum: 31875	WindowSize = 10	data: .\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31990	AckNum: 31890	WindowSize = 11	data: your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n -
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32005	AckNum: 31905	WindowSize = 12	data:  The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32020	AckNum: 31920	WindowSize = 13	data:  part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32035	AckNum: 31935	WindowSize = 14	data:  and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32050	AckNum: 31950	WindowSize = 15	data: nd the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response f
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31740	AckNum: 32065	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31755	AckNum: 32080	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31770	AckNum: 32095	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31785	AckNum: 32110	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31800	AckNum: 32125	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31815	AckNum: 32140	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31830	AckNum: 32155	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31845	AckNum: 32170	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31860	AckNum: 32185	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31875	AckNum: 32200	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31890	AckNum: 32215	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31905	AckNum: 32230	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31920	AckNum: 32245	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31935	AckNum: 32260	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31950	AckNum: 32275	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 31840	AckNum: 31740	WindowSize = 1	data: n a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32065	AckNum: 31965	WindowSize = 1	data: or each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32080	AckNum: 31980	WindowSize = 2	data:  can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32095	AckNum: 31995	WindowSize = 3	data: timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32110	AckNum: 32010	WindowSize = 4	data: project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32125	AckNum: 32025	WindowSize = 5	data: The objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding windows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32140	AckNum: 32040	WindowSize = 6	data: to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless channel model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the n
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32155	AckNum: 32055	WindowSize = 7	data: etwork emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.\n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and net
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32170	AckNum: 32070	WindowSize = 8	data: work as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32185	AckNum: 32085	WindowSize = 9	data: start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32200	AckNum: 32100	WindowSize = 10	data: that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32215	AckNum: 32115	WindowSize = 11	data: d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet received, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32230	AckNum: 32130	WindowSize = 12	data: average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You are required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32245	AckNum: 32145	WindowSize = 13	data: be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32260	AckNum: 32160	WindowSize = 14	data: \n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the sharein folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\nThe objective of this project is to design and implement a basic Send-And-Wait protocol simulator. The protocol will be half-duplex and use sliding wi
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32275	AckNum: 32175	WindowSize = 15	data: ndows to send multiple packets between two hosts on a LAN with an \"unrealiable network\" between the two hosts. The following diagram depicts the model:\nYour Mission\n - You may use any language of your choice to implement the three components shown in the diagram above. It is strongly recommended that you use your code from the first assignment to implement the peer stations.\n - You will be designing an application layer protocol in this case on top of UDP (in keeping with the wireless chann
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31965	AckNum: 32290	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31980	AckNum: 32305	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 31995	AckNum: 32320	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32010	AckNum: 32335	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32025	AckNum: 32350	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32040	AckNum: 32365	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32055	AckNum: 32380	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32070	AckNum: 32395	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32085	AckNum: 32410	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32100	AckNum: 32425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32115	AckNum: 32440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32130	AckNum: 32455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32145	AckNum: 32470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32160	AckNum: 32485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32175	AckNum: 32500	WindowSize = 15	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32290	AckNum: 32190	WindowSize = 1	data: el model). The protocol should be able to handle network errors such as packet loss and duplicate packets. You will implement timeouts and ACKs to handle retransmissions due to lost packets (ARQ).\n - The network emulator will act as an unreliable channel over with the packets will be sent. This means that transmitter will send the packets to the network emulator which in turn will forward them to the receiver. The receiver in turn will send ACKs back to the transmitter via the network emulator.
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32305	AckNum: 32205	WindowSize = 2	data: \n - Your implementation of the network emulator will include a "noise" component which will randomly discard packets (and ACKs as well) to achieve a specified bit error rate. This can be specified as part of command line arguments.\n - Your overall application architecture will have a minimum of three source modules: transmitter, receiver, and network as well as any associated include files and libraries if necessary. For the purposes of simplicity it is recommended that the IP addresses and of
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32320	AckNum: 32220	WindowSize = 3	data:  the transmitter, sender and network be extracted from a common configuration file. The port numbers can also be part of the configuration file.\n - One side will allowed to acquired the channel first and send all of its packets. An End of Transmission (EOT) will indicate that it has completed sending all of its packets, after which other side can start sending packets.\n - The following structure depicts a suggested packet format:\n - The PacketType field indicates the type (numeric code) of th
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32335	AckNum: 32235	WindowSize = 4	data: e packet, i.e., ACK or Data or EOT.\n - The SeqNum field is a sequence number used to number data packets.\n - The AckNum field is used to indicate the previous data packet packet being acknowledged and the next expected sequence number.\n - The WindowSize field would typically be used at the start of the session to establish the number of packets that will be sent from the transmitter to the receiver.\nContraints\n - The basic protocol is Send-and-Wait, however it is a modified version in that 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32350	AckNum: 32250	WindowSize = 5	data: it will use a sliding window to send multiple frames rather than single frames. You will still have to implement a timer to wait for ACKs or to initiate a retransmission in the case of a no response for each frame in the window.\n - Your window will slide forward with each ACK received, until all of the frames in the
current window have been ACKâ€™d.\n - Both the transmitter and receiver will print out ongoing the session as simple text
lines containing the type of packet sent, type of packet re
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32365	AckNum: 32265	WindowSize = 6	data: ceived, the status of the
window, sequence numbers, etc. The format of this display will be left up to you.\n - Your application will maintain a log file at both the transmitter and the receiver.
This can be used for both troubleshooting and for validating your protocol.\n - Your network module will take arguments such as the BER (Bit Error Rate), average
delay per packet, and will also have a configuration file specifying IP addresses and
port numbers for the transmitter and receiver.\n - You a
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32380	AckNum: 32280	WindowSize = 7	data: re required to submit an extensive test document complete with screen shots
validating all of the protocol characteristics you have implemented. Examples are
successful transactions, retransmissions, timeouts, etc. You may also want to
include Wireshark captures for this.\n - Lastly, I have kept the project itself fairly open-ended to allow you to be as creative
as you wish. In other words other than the half-duplex, multiple packet ARQ
protocol requirement I am quite flexible in allowing you to
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32395	AckNum: 32295	WindowSize = 8	data:  add features and choose
your own implementation method. As always if have ideas on how you will like to
implement this by all means discuss it with me in class.\n - You will be required to demo your project in the lab on the date it is due.\n - Bonus marks will be awarded for implementations that show creativity and imagination.\n To Be Submitted:\n - Hand in a complete document package in pdf format.\n - Submit a zip file containing the documents as well as your Wireshark captures in the share
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32410	AckNum: 32310	WindowSize = 9	data: in folder for this course under "Final Project-FT".\nMarking Guide:\n - Design work and instructions:\t15\n - Test Document:\t15\n - Protocol Functionality:\t60\n - Report Format:\t10\n\tTotal:\t100\n

 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = DATA	SeqNum = 32410	AckNum: 32310	WindowSize = 10	data: 
 Receive=>	Src = 127.0.0.1:56740		Dst = 127.0.0.1:16415		PacketType = EOT	SeqNum = 32425	AckNum: 0	WindowSize = 15	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32190	AckNum: 32515	WindowSize = 1	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32205	AckNum: 32530	WindowSize = 2	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32220	AckNum: 32545	WindowSize = 3	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32235	AckNum: 32560	WindowSize = 4	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32250	AckNum: 32575	WindowSize = 5	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32265	AckNum: 32590	WindowSize = 6	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32280	AckNum: 32605	WindowSize = 7	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32295	AckNum: 32620	WindowSize = 8	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32310	AckNum: 32635	WindowSize = 9	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32100	AckNum: 32425	WindowSize = 10	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32115	AckNum: 32440	WindowSize = 11	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32130	AckNum: 32455	WindowSize = 12	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32145	AckNum: 32470	WindowSize = 13	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32160	AckNum: 32485	WindowSize = 14	data: 
 Transmit=>	Src: 0.0.0.0:16415		Dst: 0.0.0.0:56740		PacketType = ACK	SeqNum = 32175	AckNum: 32500	WindowSize = 15	data: 
